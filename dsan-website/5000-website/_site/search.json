[
  {
    "objectID": "codes/clustering.html",
    "href": "codes/clustering.html",
    "title": "Clustering",
    "section": "",
    "text": "When we talk about clustering, we often talk about the concept of ‘unsupervised learning’ method, that also brings up the concept of ‘supervised learning’ method.\nWhen we talk about supervised machine learning, it is when there is a defined relationship between the independent and dependent variables of X and Y respectively. If it is for numerical inputs, it is regression and if it is for a class variable, then it is classification.\nHowever, data is never straightforward and there are often instances wherein there is no relationship between the each of the variables. During those instances, employing the un-supervised learning method is the best choice. Clustering, is an unsupervised learning technique that looks for data with no labels, and discovers clusters or groups when there is similarity between the data points. This helps in understanding the internal structure of the data and to understand the patterns within the dataset. In the economic dataset, that contains the fiscal and monetary data of BRICS nations, clustering could be useful to understand if there are well-defining indicators that highlight the performance of each nation, let’s say in terms of GDP. For instance, if a set of features are clustering together, it means there are some features that are well-defined to those specific instances. If certain variables are clustering, it means that maybe there is some sort of information that could be explored to ethically understand the contribution of factors."
  },
  {
    "objectID": "codes/clustering.html#k-means-clustering",
    "href": "codes/clustering.html#k-means-clustering",
    "title": "Clustering",
    "section": "K-Means Clustering",
    "text": "K-Means Clustering\nK-means clustering is one of the unsupervised learning techniques that is used to group the data into distinct clusters without any fixed mapping between the dependant and the independent variables. The primary goal is to partition the dataset into K clusters (by choosing the optimal number of clusters) where each clusters is defined by the centroid. Since K-means uses Euclidean distance to define each cluster on basis of its centroid. For K-means, choosing the optimal number of clusters K is important to run for a range of K values whilst plotting the sum of squared distances between the data points and their centroids, if done through the elbow method. Another way to find optimal clusters is through the silhouette scores which is a metric that is used as an evaluation metrics for clustering. Ranging between -1 to 1, we try to use that score as a metric to find the optimal clustering size where each data point in the defined k range is computed taking into account the intra and inter cluster relationships and the average silhouette score is calculated and plotted. It is visualised using the scree plot to see how the values change with K.\nAlthough K-means is computationally efficient for larger datasets, it assumed the circular clusters that are equally sized, that doesn’t really consider the complex data points. Another disadvantage is how the much of the performance of the model is dependent on k cluster values."
  },
  {
    "objectID": "codes/clustering.html#dbscan-clustering",
    "href": "codes/clustering.html#dbscan-clustering",
    "title": "Clustering",
    "section": "DBSCAN Clustering",
    "text": "DBSCAN Clustering\nDBSCAN, also called as Density-Based Spatial Clustering of Applications with Noise (DBSCAN) is one of the clustering algorithms that tries to look into the density of data points with specific radius to segregate the outliers, the outside and the inside points. There are three main points for DBSCAN, with core points, border points and the outliers.\n\nCore points: The core points are those that have a defined number of minimum samples within a defined radius (referred to as epsilon)\nBorder points: The border points are those that are not core points but loiter somewhere around.\nOutliers: These points are those that are not core points, nor are they closer to the core points. They are often referred to as the noise.\n\nFor DBSCAN, the optimal performance is based on the epsilon value and the number of neighbours the clustering is looking for. Although unlike K-means, we don’t need to pre-specify the number of clusters but we need to find the optimal point. The silhouette score is a good method of evaluation. One of the methods that I have used is to iterate over all possible combinations of eps and min_samples values that gives me the maximum silhouette scores.\nOne of the interesting parts that I liked about DBSCAN is how robust it is to outliers and can handle complex datasets but it is extremely sensitive to the choice of eps and min_sample values."
  },
  {
    "objectID": "codes/clustering.html#hierarchial-clustering",
    "href": "codes/clustering.html#hierarchial-clustering",
    "title": "Clustering",
    "section": "Hierarchial Clustering",
    "text": "Hierarchial Clustering\nThe hierarchical clustering creates a tree of clusters as a dendrogram, that is hierarchical in nature to represent the relationships between the data points in depth. This is a helpful clustering technique as we can rely on visualisation to make sense of the clusters. For hierarchical clustering usually, each point is initially assumed to be a single and independent cluster. Based on the linkage method, the closest clusters are merged together (we used Ward) and on basis of that the dendrogram is formed until a specified number of clusters is reached.\nThe optimal choice for the clusters is a trial and error on basis of what is preferred by the person. For the project, the a bigger cluster size was defined and was pre-defined according to the requirements.\nOne of the hierarchical clustering techniques that I have done is the Agglomerative clustering that follows a bottoms-up approach to build a hierarchy of clusters that follows the exact method of hierarchical clustering."
  },
  {
    "objectID": "codes/clustering.html#k-means",
    "href": "codes/clustering.html#k-means",
    "title": "Clustering",
    "section": "K-Means",
    "text": "K-Means\n\nOptimal K-Means : Elbow Method\n\n\nCode\n# to ignore future warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"sklearn.cluster._kmeans\")\n\n\n# optimal clustering using the elbow method\nwcss = [] \nfor i in range(1, 8): \n    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n    kmeans.fit(x) \n    wcss.append(kmeans.inertia_)\n\n# Plotting the WCSS values\nplt.plot(range(1, 8), wcss, marker='o')\nplt.title('Elbow Method for Optimal k')\nplt.xlabel('Number of Clusters')\nplt.ylabel('WCSS') \nplt.show()\n\n\n\n\n\nIn the code above, to avoid the warnings, the warnings module has been used. For k-means clustering, finding the optimal amount of clustering is important for better interpretability, higher performance and for informed decision making. The elbow method is used to find the optimal amount of clusters ‘K’. It uses the WCSS (Within-Cluster Sum of Square), what is calculated using the distance between the points of the cluster centroid and the points of the cluster. So a loop has been created where for each value of k between 1 and 20, we calculate the WCSS amd plot it that resembles an Elbow. As the clusters increase, the WCSS value decreses. The optimal k value is the change in the shape of the point. The optimal amount of cluster here is 6.\n\n\nOptimal K-Means : Silhoutte Score Method\n\n\nCode\n# silhoutte score to find optimal k clusters\n\nrange_clusters = range(2, 8)\n\nsilhoutte = []\n\nfor n in range_clusters:\n    kmeans = KMeans(n_clusters=n, random_state=2339)\n    kmeans.fit(x)\n    cluster_labels = kmeans.labels_\n    silhoutte.append(silhouette_score(x, cluster_labels))\n\n# plotting\nplt.plot(range_clusters, silhoutte, 'bx-')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Silhouette Score')\nplt.title('Silhouette Analysis for Optimal Clusters (k)')\nplt.show()\n\noptimal_clusters = range_clusters[np.argmax(silhoutte)]\nprint(f\"Optimal Number of Clusters: {optimal_clusters}\")\n\n\n\n\n\nOptimal Number of Clusters: 6\n\n\nFinding the optimal k clusters can also be done through the silhouette score method that quantifies how similar the data point is within a cluster, referred to as ‘cohesion’ in comparison to the other clusters called ‘separation’.\nThe silhouette coefficient or silhouette score kmeans is a measure of how similar a data point is within-cluster (cohesion) compared to other clusters (separation). In the code above, within the self-defined range of k, we calculate the silhouette scors for each iteration and try to find an optimal k that gives the maximum silhoutte scores. As it ranges between -1 and +1, a higher silhoutte scores’ optimal cluster is chosen since it showcases more distinct and well-defined clusters space. Through this as well, we see that optimal k value is 6.\n\n\nOptimal K-Value Clustering\n\nWithout Feature Extraction\n\n\nCode\nk = 6\nkmeans = KMeans(n_clusters=k, random_state=2339)\noptimal_kmeans = kmeans.fit_predict(x)\noptimal_kmeans[0:15]\n\n\narray([2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3], dtype=int32)\n\n\n\n\nCode\n\nplt.scatter(x['ex_debt_shocks'], x['gdp_growth'], c=optimal_kmeans, cmap='viridis')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, marker='X', c='red', label='Centroids')\nplt.title('K-Means Clustering Results (6 Clusters)')\nplt.xlabel('External Debt Shocks')\nplt.ylabel('GDP Growth')\nplt.legend()\nplt.show()\n\n\n\n\n\nOne of my questions that I wanted to ask was about relationship between External Debt Shocks and the GDP growth. External debt shocks and GDP growth have a complex relationship that is influenced by debt levels, composition, and terms, as well as external factors and policy responses. High and unsustainable debt can stifle economic progress, and the mix of concessional and commercial loans influences the outcome. Debt terms, foreign shocks, and a country’s policy reaction are all important considerations. Global economic conditions and country-specific factors such as governance and political stability add to the complexities of this relationship. Hence, one of the ways in which without the influence mapping between the dependant and independant variable, I wanted to find out relationship between External Debt Shocks and GDP Growth. It is seen that there is clustering where certain clusters being exclusive but most clusters overlapping and non-exclusive in nature. Two clusters are properly created, whereas the other two aren’t.\n\n\nCode\n\nx['Cluster'] = optimal_kmeans\n\nsns.pairplot(x, hue='Cluster', palette='viridis', markers='X')\nplt.suptitle('K-Means Clustering Results (6 Clusters)', y=1.02)\nplt.show()\n\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/seaborn/axisgrid.py:123: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\nIf you look at the overall relationships of all the variables with one another, this also gives us an interesting plot to look at. For instance, Military Spending is an interesting component for me to look at since you can see visual relationships with other monetary and fiscal data points.\n\n\n\nWith Feature Extraction\nFeature Extraction is one of the important components for well-defined and better performing clusters, hence an attempt is made to see if they actually help. PCA and t-SNE are both used to see if they capture the linear and non-linear aspects of the data well.\n\n\nCode\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\n# before pca \n\nk_means_before = KMeans(n_clusters=6, random_state=42)\noptimal_kmeans_before = k_means_before.fit_predict(x)\n\n# after pca \npca = PCA(n_components=4)\noptimal_pca_kmeans = pca.fit_transform(x)\n\nkmeans_after_pca = KMeans(n_clusters=6, random_state=42)\nlabels_after_pca = kmeans_after_pca.fit_predict(optimal_pca_kmeans)\n\n\n# after tsne \n\ntsne = TSNE(n_components=3, perplexity=2, random_state=42)\noptima_tsne_kmeans = tsne.fit_transform(x)\n\nkmeans_after_tsne = KMeans(n_clusters=6, random_state=42)\nlabels_after_tsne = kmeans_after_pca.fit_predict(optima_tsne_kmeans)\n\n\nsilhouette_score_before_pca = silhouette_score(x, optimal_kmeans_before)\nprint(f\"Silhouette Score before PCA: {silhouette_score_before_pca:.4f}\")\n\nsilhouette_score_after_pca = silhouette_score(optimal_pca_kmeans, labels_after_pca)\nprint(f\"Silhouette Score after PCA: {silhouette_score_after_pca:.4f}\")\n\nsilhouette_score_after_tsne = silhouette_score(optima_tsne_kmeans, labels_after_tsne)\nprint(f\"Silhouette Score after TSNE: {silhouette_score_after_tsne:.4f}\")\n\n\n\nSilhouette Score before PCA: 0.4454\nSilhouette Score after PCA: 0.4803\nSilhouette Score after TSNE: 0.2795\n\n\nThe silhouette score whilst doing the K-means clustering is better after PCA than before, thus capturing the dimensionality in the data and giving better clusters.\n\n\nCode\n\ncol = ('gdp_growth', 'ex_debt_shocks')\nindices = [x.columns.get_loc(c) for c in col]\nprint(f\"The indices of the columns {col} are: {indices}\")\n\n\nThe indices of the columns ('gdp_growth', 'ex_debt_shocks') are: [8, 6]\n\n\nI’m trying to find the indices so that I can compare the exact values for clustering before and after pca\n\n\nCode\nevr = pca.explained_variance_ratio_\ncev = np.cumsum(evr)\n\nprint(\"Explained Variance Ratio for Each Component:\")\nprint(evr*100)\n\n\nExplained Variance Ratio for Each Component:\n[37.66203489 22.03607405 14.10907775  9.93647105]\n\n\nWe see that explained variance ratio is better for PCA 1 and PCA 2 for the dataset.\n\n\nCode\n\n\n# Visualize clusters before PCA\nplt.figure(figsize=(18, 5))\nplt.subplot(1, 3, 1)\nplt.scatter(x['ex_debt_shocks'], x['gdp_growth'], c=optimal_kmeans_before, cmap='viridis', edgecolor='k')\nplt.title('Clusters Before PCA')\nplt.xlabel('External Debt Shocks')\nplt.ylabel('GDP Growth')\n\n# Visualize clusters after PCA\nplt.subplot(1, 3, 2)\nplt.scatter(optimal_pca_kmeans[:, 0], optimal_pca_kmeans[:, 1], c=labels_after_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters After PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# Visualise clusters after t-SNE\nplt.subplot(1, 3, 3)\nplt.scatter(optima_tsne_kmeans[:, 0], optima_tsne_kmeans[:, 1], c=labels_after_tsne, cmap='viridis', edgecolor='k')\nplt.title('DBSCAN Clustering after t-SNE')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.show()\n\n\n\n\n\n\n\n\nCode\n# Scale Data \nx_scaled = StandardScaler().fit_transform(x)\n\n# Perform PCA on Scaled Data\npca = PCA(n_components=2)\npca_features = pca.fit_transform(x_scaled)\n\n# Principal components correlation coefficients\nloadings = pca.components_\n\n# Number of features before PCA\nn_features = pca.n_features_in_\n\n# Feature names before PCA\nfeature_names = x.columns\n\n# PC names\npc_list = [f'PC{i}' for i in list(range(1, n_features + 1))]\n\n# Match PC names to loadings\npc_loadings = dict(zip(pc_list, loadings))\n\n# Matrix of corr coefs between feature names and PCs\nloadings_df = pd.DataFrame.from_dict(pc_loadings)\nloadings_df['feature_names'] = feature_names\nloadings_df = loadings_df.set_index('feature_names')\n\n# Plot the scatter plot of the loadings\nsns.set()\nplt.figure(figsize=(15, 8))\n\n# Plot the loading plot\nplt.subplot(1, 2, 1)\nxs = loadings[0]\nys = loadings[1]\nfor i, varnames in enumerate(feature_names):\n    plt.scatter(xs[i], ys[i], s=200)\n    plt.arrow(\n        0, 0, xs[i], ys[i],\n        color='r', head_width=0.02, alpha=0.75\n    )\n    plt.text(xs[i], ys[i], varnames)\nxticks = np.linspace(-0.8, 0.8, num=5)\nyticks = np.linspace(-0.8, 0.8, num=5)\nplt.xticks(xticks)\nplt.yticks(yticks)\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.title('2D Loading plot with vectors')\n\n# Visualize clusters after PCA\nplt.subplot(1, 2, 2)\nplt.scatter(optimal_pca_kmeans[:, 0], optimal_pca_kmeans[:, 1], c=labels_after_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters After PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# Show the combined plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nCode\n# Scale Data \nx_scaled = StandardScaler().fit_transform(x)\n\n# Perform PCA on Scaled Data\npca = PCA(n_components=2)\npca_features = pca.fit_transform(x_scaled)\n\n# Principal components correlation coefficients\nloadings = pca.components_\n\n# Number of features before PCA\nn_features = pca.n_features_in_\n\n# Feature names before PCA\nfeature_names = x.columns\n\n# PC names\npc_list = [f'PC{i}' for i in list(range(1, n_features + 1))]\n\n# Match PC names to loadings\npc_loadings = dict(zip(pc_list, loadings))\n\n# Matrix of corr coefs between feature names and PCs\nloadings_df = pd.DataFrame.from_dict(pc_loadings)\nloadings_df['feature_names'] = feature_names\nloadings_df = loadings_df.set_index('feature_names')\n\n# Plot the scatter plot of the loadings\nsns.set()\nplt.figure(figsize=(10, 8))\n\n# Get the loadings of x and y axes\nxs = loadings[0]\nys = loadings[1]\n\n# Plot the loadings on a scatterplot\nfor i, varnames in enumerate(feature_names):\n    plt.scatter(xs[i], ys[i], s=200)\n    plt.arrow(\n        0, 0, xs[i], ys[i],\n        color='r', head_width=0.02, alpha=0.75\n    )\n    plt.text(xs[i], ys[i], varnames)\n\n# Define the axes\nxticks = np.linspace(-0.8, 0.8, num=5)\nyticks = np.linspace(-0.8, 0.8, num=5)\nplt.xticks(xticks)\nplt.yticks(yticks)\nplt.xlabel('PC1')\nplt.ylabel('PC2')\n\n# Show the loading plot\nplt.title('2D Loading plot with vectors')\nplt.show()\n\n\n\n\n\nHere, you can see that using PCA as a feature extraction method has made the clusters more pronounced. You can also see that there now, I can see the association between the GDP growth vs the external debt shocks."
  },
  {
    "objectID": "codes/clustering.html#dbscan",
    "href": "codes/clustering.html#dbscan",
    "title": "Clustering",
    "section": "DBSCAN",
    "text": "DBSCAN\n\nOptimal Parameter Tuning\n\n\nCode\n#for eps in [i/10 for i in range(4, 14)]:\n    #for min_samples in range(4, 12):\n        #print(\"\\neps={}\".format(eps))\n        #print(\"min_samples={}\".format(min_samples))\n        \n        # Apply DBSCAN\n        #dbscan = DBSCAN(eps=eps, min_samples=min_samples)\n        #labels = dbscan.fit_predict(x)\n        \n        # Check if there is only one unique label\n        #if len(np.unique(labels)) == 1:\n            #print(\"Only one cluster found.\")\n        #else:\n            # Calculate Silhouette Score\n            #silh = silhouette_score(x, labels)\n\n            # Print cluster information\n            #print(\"Clusters present: {}\".format(np.unique(labels)))\n            #print(\"Cluster sizes: {}\".format(np.bincount(labels + 1)))\n            #print(\"Silhouette Score: {}\".format(silh*100))\n\n\nThis is the code I had worked on during one of the customer segmentation projects from real life KPMG dataset that tries to segment customers on basis of their consumption patterns during the RFM analysis. Within a defined range of parameters (eps and minimum samples), it find the optimal values that give the best solution. In this, we see that, with eps of 1.2 and minimum samples of 4, the silhouette score is around 53%.\n\n\nOptimal DBSCAN Clustering\n\n\nCode\ndbscan_optimal = DBSCAN(eps=1.2, min_samples=4)\nlabels_optimal_dbscan = dbscan_optimal.fit_predict(x)\n\n\n\n\nCode\nplt.scatter(x['ex_debt_shocks'], x['gdp_growth'], c=labels_optimal_dbscan, cmap='viridis')\nplt.title('DBSCAN Clustering (Optimal Parameters)')\nplt.xlabel('External Debt Shocks')\nplt.ylabel('GDP Growth')\nplt.show()\n\n\n\n\n\n\n\nWith Feature Extraction\n\n\nCode\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D  # Importing this for 3D scatter plot\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.metrics import silhouette_score\n\n# Before PCA\ndbscan_optimal = DBSCAN(eps=1.2, min_samples=4)\nlabels_optimal_dbscan = dbscan_optimal.fit_predict(x)\n\n# After PCA\npca1 = PCA(n_components=4)\noptimal_pca_kmeans1 = pca1.fit_transform(x)\n\ndbscan_optimal_after_pca = DBSCAN(eps=1.2, min_samples=4)\nlabels_optimal_dbscan_pca = dbscan_optimal_after_pca.fit_predict(optimal_pca_kmeans1)\n\n# After t-SNE\ntsne = TSNE(n_components=3, perplexity=2, random_state=42)\noptima_tsne_kmeans2 = tsne.fit_transform(x)\n\ndbscan_optimal_after_tsne = DBSCAN(eps=1.2, min_samples=4)\nlabels_optimal_dbscan_tsne = dbscan_optimal_after_tsne.fit_predict(optima_tsne_kmeans2)\n\n\n\n\nCode\n\n# Silhouette scores\nsilhouette_score_before_pca = silhouette_score(x, labels_optimal_dbscan)\nprint(f\"Silhouette Score before PCA: {silhouette_score_before_pca:.4f}\") \n\nsilhouette_score_after_pca = silhouette_score(optimal_pca_kmeans1, labels_optimal_dbscan_pca)\nprint(f\"Silhouette Score after PCA: {silhouette_score_after_pca:.4f}\")\n\nsilhouette_score_after_tsne = silhouette_score(optima_tsne_kmeans2, labels_optimal_dbscan_tsne)\nprint(f\"Silhouette Score after TSNE: {silhouette_score_after_tsne:.4f}\")\n\n\n\nSilhouette Score before PCA: 0.5856\nSilhouette Score after PCA: 0.5121\nSilhouette Score after TSNE: 0.6255\n\n\n\n\nCode\nevr1 = pca1.explained_variance_ratio_\nprint(\"Explained Variance Ratio for Each Component:\")\nprint(evr1*100)\n\nx.columns\n\n\nExplained Variance Ratio for Each Component:\n[37.66203489 22.03607405 14.10907775  9.93647105]\n\n\nIndex(['year', 'adj_NNI_g', 'adj_savings_fix_cap_GNI', 'adj_savings_edu_GNI',\n       'adj_NNS_GNI', 'ex_imp_growth', 'ex_debt_shocks', 'fdi_net_outflows',\n       'gdp_growth', 'short_term_debt_tot_reserves', 'lending_interest_rate',\n       'life_exp_birth', 'expense_gdp', 'military expenditure', 'Cluster'],\n      dtype='object')\n\n\nAgain PCA1 and PCA2 attempt to capture the maximum variance of the dataset in comparison\n\n\nCode\n# Visualization\nplt.figure(figsize=(15, 5))\n\n# Before PCA\nplt.subplot(1, 3, 1)\nplt.scatter(x['ex_debt_shocks'], x['gdp_growth'], c=labels_optimal_dbscan, cmap='viridis', edgecolor='k')\nplt.title('DBSCAN Clustering before PCA')\nplt.xlabel('ex_debt_shocks')\nplt.ylabel('gdp_growth')\n\n# After PCA\nplt.subplot(1, 3, 2)\nplt.scatter(optimal_pca_kmeans1[:, 0], optimal_pca_kmeans1[:, 1], c=labels_optimal_dbscan_pca, cmap='viridis', edgecolor='k')\nplt.title('DBSCAN Clustering after PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# After t-SNE\nplt.subplot(1, 3, 3)\nplt.scatter(optima_tsne_kmeans2[:, 0], optima_tsne_kmeans2[:, 1], c=labels_optimal_dbscan_tsne, cmap='viridis', edgecolor='k')\nplt.title('DBSCAN Clustering after t-SNE')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nIf we try to look at the dataset, although the silhouette scores is more for TSNE but if you look at the clusters, you see the clustering is better for DBSCAN after PCA but in terms of Silhouette scores, the answer is different."
  },
  {
    "objectID": "codes/clustering.html#hierarchial-clustering-1",
    "href": "codes/clustering.html#hierarchial-clustering-1",
    "title": "Clustering",
    "section": "Hierarchial Clustering",
    "text": "Hierarchial Clustering\n\nFinding optimal clusters\n\n\nCode\n# for agglomerative clustering \n\nlinkage_matrix = linkage(x, method='ward')\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Dendrogram \ndendrogram(linkage_matrix, ax=ax)\nax.set_title('Hierarchical Clustering Dendrogram')\nax.set_xlabel('Data Points')\nax.set_ylabel('Distance')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, fontsize=3)\n\n\nplt.show()\n\n\n\n\n\n\n\nCode\n# Silhouette Score\nmax_clusters = 9\nsilhouette_scores = []\n\nfor n_clusters in range(2, max_clusters + 1):\n    agglomerative = AgglomerativeClustering(n_clusters=n_clusters)\n    labels = agglomerative.fit_predict(x)\n    silhouette_scores.append(silhouette_score(x, labels))\n\n# Plot the silhouette scores\nplt.plot(range(2, max_clusters + 1), silhouette_scores, marker='o')\nplt.title('Silhouette Score vs. Number of Clusters')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Silhouette Score')\nplt.show()\n\n\n\n\n\nWe know that the agglomerative clusters is around 6, when the silhouette score is around 0.44. Now we try to do clustering on basis of before and after both the feature extraction methods of t-SNE and PCA.\n\n\nCode\n\n# Before PCA\nhierarchial_optimal = AgglomerativeClustering(n_clusters=6)\nlabels_optimal_hierarcial = hierarchial_optimal.fit_predict(x)\n\n# After PCA\npca2 = PCA(n_components=4)\noptimal_pca_kmeans2 = pca2.fit_transform(x)\n\nhierarchal_optimal_after_pca = AgglomerativeClustering(n_clusters=6)\nlabels_optimal_hierarchal_pca = hierarchal_optimal_after_pca.fit_predict(optimal_pca_kmeans2)\n\n# After t-SNE\ntsne2 = TSNE(n_components=3, perplexity=2, random_state=42)\noptima_tsne_hierarchial = tsne.fit_transform(x)\n\nhierarchal_optimal_after_tsne = AgglomerativeClustering(n_clusters=6)\nlabels_optimal_hierarchal_tsne = hierarchal_optimal_after_pca.fit_predict(optima_tsne_hierarchial)\n\n\n\n\nCode\n# Silhouette scores\nsilhouette_score_before_pca1 = silhouette_score(x, labels_optimal_hierarcial)\nprint(f\"Silhouette Score before PCA: {silhouette_score_before_pca:.4f}\")\n\nsilhouette_score_after_pca1 = silhouette_score(optimal_pca_kmeans2, labels_optimal_hierarchal_pca)\nprint(f\"Silhouette Score after PCA: {silhouette_score_after_pca:.4f}\")\n\nsilhouette_score_after_tsne1 = silhouette_score(optima_tsne_hierarchial, labels_optimal_hierarchal_tsne)\nprint(f\"Silhouette Score after TSNE: {silhouette_score_after_tsne:.4f}\")\n\n\nSilhouette Score before PCA: 0.5856\nSilhouette Score after PCA: 0.5121\nSilhouette Score after TSNE: 0.6255\n\n\nHere again, we see that Silhouette Score after t-SNE performs better. We shall have to check it through visualization.\n\n\nCode\n# Visualize clusters before hierarchical clustering\nplt.figure(figsize=(18, 5))\n\n# Before Hierarchical Clustering\nplt.subplot(1, 3, 1)\nplt.scatter(x.values[:, 0], x.values[:, 1], c=labels_optimal_hierarcial, cmap='viridis', edgecolor='k')\nplt.title('Clusters Before Hierarchical Clustering')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\n\n# After Hierarchical Clustering with PCA\nplt.subplot(1, 3, 2)\nplt.scatter(optimal_pca_kmeans2[:, 0], optimal_pca_kmeans2[:, 1], c=labels_optimal_hierarchal_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters After Hierarchical Clustering (PCA)')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# After Hierarchical Clustering with t-SNE\nplt.subplot(1, 3, 3)\nplt.scatter(optima_tsne_hierarchial[:, 0], optima_tsne_hierarchial[:, 1], c=labels_optimal_hierarchal_tsne, cmap='viridis', edgecolor='k')\nplt.title('Clusters After Hierarchical Clustering (t-SNE)')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nWhen you look at hierarchial clustering, using the agglomerative clustering technique, we see that the clustering after PCA is better as you can see well-defined clusters that are not overlapping one another. You see that the clustering is better after the PCA as the best feature set is used to compare the dataset.\n\n\nCode\n# Create subplots for before and after PCA\nfig, axes = plt.subplots(1, 3, figsize=(12, 6))\n\n# Dendrogram before PCA\ndendrogram(linkage(x, method='ward'), ax=axes[0])\naxes[0].set_title('Hierarchical Clustering Dendrogram (Before PCA)')\naxes[0].set_xlabel('Data Points')\naxes[0].set_ylabel('Distance')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, fontsize=3)\n\n\n# Dendrogram after PCA\ndendrogram(linkage(optimal_pca_kmeans2, method='ward'), ax=axes[1])\naxes[1].set_title('Hierarchical Clustering Dendrogram (After PCA)')\naxes[1].set_xlabel('Data Points')\naxes[1].set_ylabel('Distance')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, fontsize=3)\n\n\n# Dendrogram after t-SNE\ndendrogram(linkage(optima_tsne_hierarchial, method='ward'), ax=axes[2])\naxes[2].set_title('Hierarchical Clustering Dendrogram (After t-SNE)')\naxes[2].set_xlabel('Data Points')\naxes[2].set_ylabel('Distance')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, fontsize=2)\n\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "codes/countries_code/china.html",
    "href": "codes/countries_code/china.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n#pip install xlrd\ndf=pd.read_excel('../data/china.xlsx')\ndf\n\n\n\n\n\n\n\n\nSeries Name\nSeries Code\nCountry Name\nCountry Code\n1989 [YR1989]\n1990 [YR1990]\n1991 [YR1991]\n1992 [YR1992]\n1993 [YR1993]\n1994 [YR1994]\n...\n2013 [YR2013]\n2014 [YR2014]\n2015 [YR2015]\n2016 [YR2016]\n2017 [YR2017]\n2018 [YR2018]\n2019 [YR2019]\n2020 [YR2020]\n2021 [YR2021]\n2022 [YR2022]\n\n\n\n\n0\nAdjusted net national income (annual % growth)\nNY.ADJ.NNTY.KD.ZG\nChina\nCHN\n..\n..\n..\n..\n..\n..\n...\n5.951001\n8.665463\n6.970742\n8.207387\n6.839527\n4.001474\n4.695245\n0.04303\n..\n..\n\n\n1\nAdjusted net national income (constant 2015 US$)\nNY.ADJ.NNTY.KD\nChina\nCHN\n..\n..\n..\n..\n..\n..\n...\n7169842562616.428711\n7791142593670.500977\n8334243004919.240234\n9018266574819.265625\n9635073326670.451172\n10020618290151.082031\n10491110855724.185547\n10495625160109.277344\n..\n..\n\n\n2\nAdjusted savings: consumption of fixed capital...\nNY.ADJ.DKAP.GN.ZS\nChina\nCHN\n9.410207\n9.758755\n9.935973\n9.402707\n10.529876\n11.131854\n...\n22.366368\n22.799193\n23.524725\n23.245603\n23.051969\n24.132246\n24.535371\n26.143102\n..\n..\n\n\n3\nAdjusted savings: consumption of fixed capital...\nNY.ADJ.DKAP.CD\nChina\nCHN\n32747520363.167801\n35326694769.442497\n38154137334.102699\n40149557817.641502\n46752651147.986801\n62672340433.209198\n...\n2122568302790.290039\n2393915292362.180176\n2587719804459.140137\n2603507524161.830078\n2835392168026.049805\n3330249981440\n3484022656400\n3816892893942.959961\n..\n..\n\n\n4\nAdjusted savings: education expenditure (% of ...\nNY.ADJ.AEDU.GN.ZS\nChina\nCHN\n1.6\n1.78618\n1.78618\n1.5\n1.5\n1.8\n...\n1.79\n1.79\n1.79\n1.79\n1.79\n1.79\n1.79\n1.79\n..\n..\n\n\n5\nAdjusted savings: gross savings (% of GNI)\nNY.ADJ.ICTR.GN.ZS\nChina\nCHN\n35.858594\n36.596338\n38.423094\n40.585142\n41.793913\n41.773415\n...\n47.766834\n47.555443\n45.635344\n44.601823\n44.963965\n44.682003\n43.896015\n44.851126\n..\n..\n\n\n6\nAdjusted savings: net national savings (% of GNI)\nNY.ADJ.NNAT.GN.ZS\nChina\nCHN\n26.509333\n26.705333\n28.605693\n31.112516\n31.13679\n30.608821\n...\n25.36809\n24.724616\n22.111638\n21.307969\n21.907381\n20.650362\n19.478714\n18.788405\n..\n..\n\n\n7\nCurrent account balance (% of GDP)\nBN.CAB.XOKA.GD.ZS\nChina\nCHN\n-1.241345\n3.324577\n3.4619\n1.499359\n-2.61034\n1.224124\n...\n1.548554\n2.253294\n2.649011\n1.7033\n1.532645\n0.173667\n0.720659\n1.694172\n1.980228\n2.237107\n\n\n8\nExports of goods and services (% of GDP)\nNE.EXP.GNFS.ZS\nChina\nCHN\n9.027345\n12.451603\n13.436371\n13.555544\n11.997883\n18.536749\n...\n24.599254\n23.510061\n21.35408\n19.58438\n19.692277\n19.112104\n18.409992\n18.586139\n19.943973\n20.677003\n\n\n9\nExports of goods and services (annual % growth)\nNE.EXP.GNFS.KD.ZG\nChina\nCHN\n..\n..\n..\n..\n..\n..\n...\n..\n..\n..\n..\n..\n..\n..\n..\n..\n..\n\n\n10\nExternal debt stocks (% of GNI)\nDT.DOD.DECT.GN.ZS\nChina\nCHN\n12.91376\n15.284115\n15.686274\n16.982845\n19.398607\n17.871362\n...\n15.596148\n16.954748\n12.115512\n12.649471\n13.864936\n14.179503\n14.846718\n15.954919\n15.375541\n..\n\n\n11\nFinal consumption expenditure (% of GDP)\nNE.CON.TOTL.ZS\nChina\nCHN\n64.283152\n63.649123\n61.918792\n59.715283\n58.348901\n58.179054\n...\n51.717147\n52.524943\n53.99089\n55.038738\n54.867608\n55.057689\n56.018573\n55.330446\n53.921703\n..\n\n\n12\nFinal consumption expenditure (annual % growth)\nNE.CON.TOTL.KD.ZG\nChina\nCHN\n..\n..\n..\n..\n..\n..\n...\n7.366823\n7.937629\n9.175463\n8.368207\n7.087901\n7.87667\n6.289108\n-0.275557\n9.0832\n1.798733\n\n\n13\nForeign direct investment, net inflows (% of GDP)\nBX.KLT.DINV.WD.GD.ZS\nChina\nCHN\n0.97565\n0.966308\n1.138838\n2.613162\n6.186882\n5.987186\n...\n3.039855\n2.559248\n2.192178\n1.555637\n1.349124\n1.693894\n1.310716\n1.723176\n1.930786\n1.002979\n\n\n14\nForeign direct investment, net outflows (% of ...\nBM.KLT.DINV.WD.GD.ZS\nChina\nCHN\n0.224287\n0.230007\n0.238149\n0.936953\n0.989361\n0.354408\n...\n0.762459\n1.175391\n1.576545\n1.926631\n1.123373\n1.029345\n0.958756\n1.046592\n1.003328\n0.833329\n\n\n15\nGDP growth (annual %)\nNY.GDP.MKTP.KD.ZG\nChina\nCHN\n4.206334\n3.920251\n9.262786\n14.22453\n13.883729\n13.036807\n...\n7.76615\n7.425764\n7.041329\n6.848762\n6.947201\n6.749774\n5.950501\n2.238638\n8.447478\n2.990805\n\n\n16\nGDP per capita growth (annual %)\nNY.GDP.PCAP.KD.ZG\nChina\nCHN\n2.620859\n2.406559\n7.782092\n12.83321\n12.581997\n11.766389\n...\n7.050734\n6.75076\n6.420736\n6.238215\n6.301863\n6.251701\n5.575317\n1.995558\n8.35073\n3.004297\n\n\n17\nGeneral government final consumption expenditu...\nNE.CON.GOVT.ZS\nChina\nCHN\n13.188262\n13.656521\n14.001634\n14.440663\n14.35274\n14.091236\n...\n15.884016\n15.817045\n16.217887\n16.363756\n16.324862\n16.535808\n16.770511\n17.130133\n15.808138\n..\n\n\n18\nGeneral government final consumption expenditu...\nNE.CON.GOVT.KD.ZG\nChina\nCHN\n..\n..\n..\n..\n..\n..\n...\n..\n..\n..\n..\n..\n..\n..\n..\n..\n..\n\n\n19\nGNI growth (annual %)\nNY.GNP.MKTP.KD.ZG\nChina\nCHN\n..\n..\n..\n..\n..\n..\n...\n7.144256\n8.436093\n6.396482\n6.826078\n7.341817\n6.421901\n6.122362\n1.711734\n8.331083\n..\n\n\n20\nGoods exports (BoP, current US$)\nBX.GSR.MRCH.CD\nChina\nCHN\n43220000000\n51519000000\n58919000000\n69568000000\n75659000000\n102561000000\n...\n2148588935109.429932\n2243761278997.209961\n2142753416452.300049\n1989518638921.97998\n2216213798034.649902\n2417442805605.759766\n2386640081644.25\n2510014622024.189941\n3215838267844.580078\n3346875045582.919922\n\n\n21\nGoods imports (BoP, current US$)\nBM.GSR.MRCH.CD\nChina\nCHN\n48840000000\n42354000000\n50176000000\n64385000000\n86313000000\n95271000000\n...\n1789607637369.560059\n1808719657195.090088\n1566562344086.590088\n1500635639562.879883\n1740272384900.77002\n2037369286973.76001\n1993646753421.340088\n1998911642462.169922\n2653132321663.279785\n2678242314720.089844\n\n\n22\nImports of goods and services (% of GDP)\nNE.IMP.GNFS.ZS\nChina\nCHN\n10.107362\n9.747871\n10.629964\n12.542033\n13.902547\n17.233066\n...\n22.145121\n21.395155\n18.110089\n17.310035\n17.940136\n18.453681\n17.480104\n16.168157\n17.358017\n17.466817\n\n\n23\nImports of goods and services (annual % growth)\nNE.IMP.GNFS.KD.ZG\nChina\nCHN\n..\n..\n..\n..\n..\n..\n...\n..\n..\n..\n..\n..\n..\n..\n..\n..\n..\n\n\n24\nServices, value added (% of GDP)\nNV.SRV.TOTL.ZS\nChina\nCHN\n32.892431\n32.382773\n34.478537\n35.555806\n34.515996\n34.362656\n...\n46.880402\n48.27094\n50.771645\n52.362091\n52.684737\n53.269968\n54.268904\n54.458536\n53.468205\n52.775888\n\n\n25\nServices, value added (annual % growth)\nNV.SRV.TOTL.KD.ZG\nChina\nCHN\n5.838089\n2.668735\n9.204204\n12.600329\n12.169955\n11.36838\n...\n8.299168\n8.341817\n8.77671\n8.09608\n8.269773\n7.98351\n7.1811\n1.947122\n8.486297\n2.293775\n\n\n26\nShort-term debt (% of total reserves)\nDT.DOD.DSTC.IR.ZS\nChina\nCHN\n29.961957\n27.024862\n22.381388\n55.386477\n55.930751\n30.257174\n...\n27.755897\n31.780502\n24.146341\n25.871028\n31.852117\n38.472786\n37.398433\n36.822859\n42.189441\n..\n\n\n27\nTrade (% of GDP)\nNE.TRD.GNFS.ZS\nChina\nCHN\n19.134707\n22.199473\n24.066335\n26.097577\n25.90043\n35.769815\n...\n46.744376\n44.905216\n39.464169\n36.894415\n37.632413\n37.565784\n35.890096\n34.754296\n37.30199\n38.143819\n\n\n28\nConsumer price index (2010 = 100)\nFP.CPI.TOTL\nChina\nCHN\n39.242469\n40.440263\n41.878596\n44.539554\n51.046818\n63.42924\n...\n111.158002\n113.29406\n114.922123\n117.220567\n119.08805\n121.558878\n125.083154\n128.109444\n129.366217\n131.919357\n\n\n29\nInflation, consumer prices (annual %)\nFP.CPI.TOTL.ZG\nChina\nCHN\n18.245638\n3.05229\n3.556686\n6.353981\n14.610079\n24.25699\n...\n2.62105\n1.921642\n1.437024\n2.000002\n1.593136\n2.07479\n2.899234\n2.419422\n0.981015\n1.973576\n\n\n30\nReal interest rate (%)\nFR.INR.RINR\nChina\nCHN\n2.520693\n3.451645\n1.804312\n0.415635\n-3.651372\n-7.989744\n...\n3.755387\n4.522308\n4.353072\n2.901815\n0.112554\n0.821502\n3.024385\n3.838601\n-0.194431\n2.056524\n\n\n31\nLife expectancy at birth, total (years)\nSP.DYN.LE00.IN\nChina\nCHN\n67.838\n68.005\n68.169\n68.734\n69.216\n69.52\n...\n76.452\n76.717\n76.977\n77.218\n77.248\n77.744\n77.968\n78.077\n78.211\n..\n\n\n32\nMilitary expenditure (% of general government ...\nMS.MIL.XPND.ZS\nChina\nCHN\n13.20634\n13.747362\n14.253641\n16.867626\n14.796105\n14.088385\n...\n5.967633\n5.989543\n5.604891\n5.476726\n5.262867\n5.048502\n4.906764\n4.77226\n4.959253\n4.792102\n\n\n\n\n33 rows × 38 columns\n\n\n\n\ndf = df.T\ndf.columns = df.iloc[0]\ndf.head(5)\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: consumption of fixed capital (current US$)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of general government expenditure)\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital...\nAdjusted savings: consumption of fixed capital...\nAdjusted savings: education expenditure (% of ...\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of general government ...\n\n\nSeries Code\nNY.ADJ.NNTY.KD.ZG\nNY.ADJ.NNTY.KD\nNY.ADJ.DKAP.GN.ZS\nNY.ADJ.DKAP.CD\nNY.ADJ.AEDU.GN.ZS\nNY.ADJ.ICTR.GN.ZS\nNY.ADJ.NNAT.GN.ZS\nBN.CAB.XOKA.GD.ZS\nNE.EXP.GNFS.ZS\nNE.EXP.GNFS.KD.ZG\n...\nNE.IMP.GNFS.KD.ZG\nNV.SRV.TOTL.ZS\nNV.SRV.TOTL.KD.ZG\nDT.DOD.DSTC.IR.ZS\nNE.TRD.GNFS.ZS\nFP.CPI.TOTL\nFP.CPI.TOTL.ZG\nFR.INR.RINR\nSP.DYN.LE00.IN\nMS.MIL.XPND.ZS\n\n\nCountry Name\nChina\nChina\nChina\nChina\nChina\nChina\nChina\nChina\nChina\nChina\n...\nChina\nChina\nChina\nChina\nChina\nChina\nChina\nChina\nChina\nChina\n\n\nCountry Code\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\n...\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\n\n\n1989 [YR1989]\n..\n..\n9.410207\n32747520363.167801\n1.6\n35.858594\n26.509333\n-1.241345\n9.027345\n..\n...\n..\n32.892431\n5.838089\n29.961957\n19.134707\n39.242469\n18.245638\n2.520693\n67.838\n13.20634\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[4:]\ndf\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: consumption of fixed capital (current US$)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of general government expenditure)\n\n\n\n\n1989 [YR1989]\n..\n..\n9.410207\n32747520363.167801\n1.6\n35.858594\n26.509333\n-1.241345\n9.027345\n..\n...\n..\n32.892431\n5.838089\n29.961957\n19.134707\n39.242469\n18.245638\n2.520693\n67.838\n13.20634\n\n\n1990 [YR1990]\n..\n..\n9.758755\n35326694769.442497\n1.78618\n36.596338\n26.705333\n3.324577\n12.451603\n..\n...\n..\n32.382773\n2.668735\n27.024862\n22.199473\n40.440263\n3.05229\n3.451645\n68.005\n13.747362\n\n\n1991 [YR1991]\n..\n..\n9.935973\n38154137334.102699\n1.78618\n38.423094\n28.605693\n3.4619\n13.436371\n..\n...\n..\n34.478537\n9.204204\n22.381388\n24.066335\n41.878596\n3.556686\n1.804312\n68.169\n14.253641\n\n\n1992 [YR1992]\n..\n..\n9.402707\n40149557817.641502\n1.5\n40.585142\n31.112516\n1.499359\n13.555544\n..\n...\n..\n35.555806\n12.600329\n55.386477\n26.097577\n44.539554\n6.353981\n0.415635\n68.734\n16.867626\n\n\n1993 [YR1993]\n..\n..\n10.529876\n46752651147.986801\n1.5\n41.793913\n31.13679\n-2.61034\n11.997883\n..\n...\n..\n34.515996\n12.169955\n55.930751\n25.90043\n51.046818\n14.610079\n-3.651372\n69.216\n14.796105\n\n\n1994 [YR1994]\n..\n..\n11.131854\n62672340433.209198\n1.8\n41.773415\n30.608821\n1.224124\n18.536749\n..\n...\n..\n34.362656\n11.36838\n30.257174\n35.769815\n63.42924\n24.25699\n-7.989744\n69.52\n14.088385\n\n\n1995 [YR1995]\n..\n1227477616761.793945\n11.529146\n83355725625.839294\n1.7\n40.174052\n28.581504\n0.220344\n17.952523\n..\n...\n..\n33.652938\n10.082792\n27.80656\n34.276969\n74.079786\n16.791225\n-1.412648\n70.008\n15.157922\n\n\n1996 [YR1996]\n12.486562\n1380747364631.361816\n11.885279\n101143723277.903\n1.7\n39.325367\n27.480174\n0.838553\n17.923296\n..\n...\n..\n33.570271\n9.215581\n22.739936\n33.814745\n80.238158\n8.31316\n3.35497\n70.266\n14.952756\n\n\n1997 [YR1997]\n9.50929\n1512046638645.220215\n12.47275\n118615853608.167999\n2.035901\n40.202277\n27.695494\n3.843898\n19.493164\n..\n...\n..\n35.005677\n10.431251\n21.484758\n34.533017\n82.473966\n2.786465\n6.911699\n70.672\n14.09497\n\n\n1998 [YR1998]\n7.869479\n1631036838613.571289\n13.609162\n137452534380.806\n2.003015\n38.977513\n25.499749\n3.058323\n18.3421\n..\n...\n..\n37.043329\n8.402165\n11.344978\n32.424305\n81.836289\n-0.773186\n7.356478\n71.172\n13.058259\n\n\n1999 [YR1999]\n9.055274\n1778731686286.483887\n13.923086\n150369327337.859009\n1.79\n37.047947\n23.113951\n1.930055\n18.162477\n..\n...\n..\n38.575348\n9.249145\n9.404386\n33.524162\n80.689376\n-1.401473\n7.20405\n71.419\n12.520671\n\n\n2000 [YR2000]\n9.475855\n1947281729610.611328\n13.97168\n167660154603.875\n1.79\n36.177541\n22.111654\n1.69387\n20.893697\n..\n...\n..\n39.787655\n9.776352\n7.61514\n39.411015\n80.970022\n0.347811\n3.710664\n71.881\n11.338743\n\n\n2001 [YR2001]\n10.972157\n2160940529055.069824\n13.923446\n183789491134.252991\n1.79\n37.810546\n23.879584\n1.299163\n20.312146\n..\n...\n..\n41.223126\n10.259388\n25.584306\n38.527359\n81.552298\n0.719126\n3.726664\n72.606\n11.419898\n\n\n2002 [YR2002]\n12.555756\n2432262955029.822266\n13.71457\n200232727004.694\n1.79\n39.282452\n25.463512\n2.408746\n22.644746\n..\n...\n..\n42.247945\n10.485636\n22.059554\n42.747404\n80.955359\n-0.731971\n4.679724\n72.985\n11.189127\n\n\n2003 [YR2003]\n11.560102\n2713435021734.423828\n13.890917\n229200123275.174988\n1.79\n42.676156\n28.77575\n2.593031\n26.980757\n..\n...\n..\n42.028216\n9.539808\n21.166056\n51.803988\n81.868215\n1.127603\n2.638147\n73.371\n10.97383\n\n\n2004 [YR2004]\n10.880833\n3008679348397.580078\n14.084508\n274647909439.104004\n1.79\n45.792545\n31.710364\n3.525766\n31.061338\n..\n...\n..\n41.18314\n10.120036\n18.584199\n59.505524\n84.999377\n3.824637\n-1.282812\n73.748\n10.879795\n\n\n2005 [YR2005]\n12.926897\n3397608231795.796875\n14.342117\n325566066140.86499\n1.79\n46.280913\n31.913389\n5.790933\n33.829858\n..\n...\n..\n41.335926\n12.357949\n17.833207\n62.207893\n86.509318\n1.776414\n1.613278\n74.111\n10.228761\n\n\n2006 [YR2006]\n14.607645\n3893918787722.875977\n14.787631\n406659863311.312012\n1.79\n48.350844\n33.576005\n8.424166\n36.035026\n..\n...\n..\n41.816842\n14.134209\n16.042201\n64.478884\n87.93623\n1.649431\n2.110578\n74.504\n10.187305\n\n\n2007 [YR2007]\n15.198015\n4485717147211.160156\n15.266498\n543487336437.452026\n1.79\n50.161618\n34.733502\n9.94789\n35.434799\n..\n...\n..\n42.869665\n16.071495\n13.172701\n62.193363\n92.171913\n4.816768\n-0.259571\n74.762\n9.627737\n\n\n2008 [YR2008]\n6.338576\n4770047746587.043945\n16.326624\n754290022947.256958\n1.79\n51.467592\n35.188528\n9.154064\n32.602714\n..\n...\n..\n42.85978\n10.475841\n9.52108\n57.612715\n97.633331\n5.925251\n-2.305615\n74.872\n7.646509\n\n\n2009 [YR2009]\n12.902063\n5385482323764.141602\n17.663124\n899053019566.602051\n1.79\n50.457426\n32.828035\n4.768156\n24.749856\n..\n...\n..\n44.406667\n9.586586\n9.805092\n45.18487\n96.922399\n-0.728165\n5.531123\n75.343\n7.399288\n\n\n2010 [YR2010]\n8.715012\n5854827764983.147461\n18.585914\n1126306400657.879883\n1.79\n51.547499\n32.899234\n3.906734\n27.185333\n..\n...\n..\n44.176992\n9.668982\n17.583174\n50.717078\n100\n3.175325\n-1.002401\n75.599\n6.969116\n\n\n2011 [YR2011]\n4.835567\n6137941888296.601562\n20.246716\n1514454342651.47998\n1.79\n49.696479\n29.485905\n1.802237\n26.568189\n..\n...\n..\n44.293057\n9.488129\n23.7001\n50.740905\n105.553899\n5.553899\n-1.402429\n75.903\n6.166181\n\n\n2012 [YR2012]\n10.250809\n6767130567454.841797\n21.106646\n1796175611355.649902\n1.79\n48.77866\n27.659511\n2.524462\n25.492522\n..\n...\n..\n45.463305\n8.0141\n23.383172\n48.267522\n108.318909\n2.619524\n3.585204\n76.192\n6.035396\n\n\n2013 [YR2013]\n5.951001\n7169842562616.428711\n22.366368\n2122568302790.290039\n1.79\n47.766834\n25.36809\n1.548554\n24.599254\n..\n...\n..\n46.880402\n8.299168\n27.755897\n46.744376\n111.158002\n2.62105\n3.755387\n76.452\n5.967633\n\n\n2014 [YR2014]\n8.665463\n7791142593670.500977\n22.799193\n2393915292362.180176\n1.79\n47.555443\n24.724616\n2.253294\n23.510061\n..\n...\n..\n48.27094\n8.341817\n31.780502\n44.905216\n113.29406\n1.921642\n4.522308\n76.717\n5.989543\n\n\n2015 [YR2015]\n6.970742\n8334243004919.240234\n23.524725\n2587719804459.140137\n1.79\n45.635344\n22.111638\n2.649011\n21.35408\n..\n...\n..\n50.771645\n8.77671\n24.146341\n39.464169\n114.922123\n1.437024\n4.353072\n76.977\n5.604891\n\n\n2016 [YR2016]\n8.207387\n9018266574819.265625\n23.245603\n2603507524161.830078\n1.79\n44.601823\n21.307969\n1.7033\n19.58438\n..\n...\n..\n52.362091\n8.09608\n25.871028\n36.894415\n117.220567\n2.000002\n2.901815\n77.218\n5.476726\n\n\n2017 [YR2017]\n6.839527\n9635073326670.451172\n23.051969\n2835392168026.049805\n1.79\n44.963965\n21.907381\n1.532645\n19.692277\n..\n...\n..\n52.684737\n8.269773\n31.852117\n37.632413\n119.08805\n1.593136\n0.112554\n77.248\n5.262867\n\n\n2018 [YR2018]\n4.001474\n10020618290151.082031\n24.132246\n3330249981440\n1.79\n44.682003\n20.650362\n0.173667\n19.112104\n..\n...\n..\n53.269968\n7.98351\n38.472786\n37.565784\n121.558878\n2.07479\n0.821502\n77.744\n5.048502\n\n\n2019 [YR2019]\n4.695245\n10491110855724.185547\n24.535371\n3484022656400\n1.79\n43.896015\n19.478714\n0.720659\n18.409992\n..\n...\n..\n54.268904\n7.1811\n37.398433\n35.890096\n125.083154\n2.899234\n3.024385\n77.968\n4.906764\n\n\n2020 [YR2020]\n0.04303\n10495625160109.277344\n26.143102\n3816892893942.959961\n1.79\n44.851126\n18.788405\n1.694172\n18.586139\n..\n...\n..\n54.458536\n1.947122\n36.822859\n34.754296\n128.109444\n2.419422\n3.838601\n78.077\n4.77226\n\n\n2021 [YR2021]\n..\n..\n..\n..\n..\n..\n..\n1.980228\n19.943973\n..\n...\n..\n53.468205\n8.486297\n42.189441\n37.30199\n129.366217\n0.981015\n-0.194431\n78.211\n4.959253\n\n\n2022 [YR2022]\n..\n..\n..\n..\n..\n..\n..\n2.237107\n20.677003\n..\n...\n..\n52.775888\n2.293775\n..\n38.143819\n131.919357\n1.973576\n2.056524\n..\n4.792102\n\n\n\n\n34 rows × 33 columns\n\n\n\n\nprint(df.isnull().sum())\n\nSeries Name\nAdjusted net national income (annual % growth)                        0\nAdjusted net national income (constant 2015 US$)                      0\nAdjusted savings: consumption of fixed capital (% of GNI)             0\nAdjusted savings: consumption of fixed capital (current US$)          0\nAdjusted savings: education expenditure (% of GNI)                    0\nAdjusted savings: gross savings (% of GNI)                            0\nAdjusted savings: net national savings (% of GNI)                     0\nCurrent account balance (% of GDP)                                    0\nExports of goods and services (% of GDP)                              0\nExports of goods and services (annual % growth)                       0\nExternal debt stocks (% of GNI)                                       0\nFinal consumption expenditure (% of GDP)                              0\nFinal consumption expenditure (annual % growth)                       0\nForeign direct investment, net inflows (% of GDP)                     0\nForeign direct investment, net outflows (% of GDP)                    0\nGDP growth (annual %)                                                 0\nGDP per capita growth (annual %)                                      0\nGeneral government final consumption expenditure (% of GDP)           0\nGeneral government final consumption expenditure (annual % growth)    0\nGNI growth (annual %)                                                 0\nGoods exports (BoP, current US$)                                      0\nGoods imports (BoP, current US$)                                      0\nImports of goods and services (% of GDP)                              0\nImports of goods and services (annual % growth)                       0\nServices, value added (% of GDP)                                      0\nServices, value added (annual % growth)                               0\nShort-term debt (% of total reserves)                                 0\nTrade (% of GDP)                                                      0\nConsumer price index (2010 = 100)                                     0\nInflation, consumer prices (annual %)                                 0\nReal interest rate (%)                                                0\nLife expectancy at birth, total (years)                               0\nMilitary expenditure (% of general government expenditure)            0\ndtype: int64\n\n\n\n# creating a new index rather than treating it\nnew_index = range(1989, 2023)\n\n# Reset the index with the new range\ndf = df.reset_index(drop=True)\ndf.index = new_index\ndf.index.name = \"year\"\n\ndf.shape\n\n(34, 33)\n\n\n\ncols= ['adj_NNI_g', 'adj_NNI_c', 'adj_savings_fix_cap_GNI', 'adj_savings_edu_GNI', 'adj_NNS_GNI',\n                    'curr_acc_bal', 'ex_imp_gdp', 'ex_imp_growth', 'ex_debt_shocks', 'final_consump_exp_gdp',\n                    'final_consump_exp_growth', 'fdi_net_inflows', 'fdi_net_outflows', 'gdp_growth', 'gdp_per_capita_growth',\n                    'gener_govt_fin_consump_exp', 'gni_growth', 'goods_exp_bop','goods_imp_bop', 'imports_goods_services_gdp', 'imports_goods_services_growth','services_gdp', 'services_growth', \n                       'short_term_debt_tot_reserves','trade_gdp', 'cpi', 'inflation','real_interest_rate','lending_interest_rate','life_exp_birth','expense_gdp','interest_payments', 'military expenditure']\n\ndf.columns = cols\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\nshort_term_debt_tot_reserves\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1989\n..\n..\n9.410207\n32747520363.167801\n1.6\n35.858594\n26.509333\n-1.241345\n9.027345\n..\n...\n..\n32.892431\n5.838089\n29.961957\n19.134707\n39.242469\n18.245638\n2.520693\n67.838\n13.20634\n\n\n1990\n..\n..\n9.758755\n35326694769.442497\n1.78618\n36.596338\n26.705333\n3.324577\n12.451603\n..\n...\n..\n32.382773\n2.668735\n27.024862\n22.199473\n40.440263\n3.05229\n3.451645\n68.005\n13.747362\n\n\n1991\n..\n..\n9.935973\n38154137334.102699\n1.78618\n38.423094\n28.605693\n3.4619\n13.436371\n..\n...\n..\n34.478537\n9.204204\n22.381388\n24.066335\n41.878596\n3.556686\n1.804312\n68.169\n14.253641\n\n\n1992\n..\n..\n9.402707\n40149557817.641502\n1.5\n40.585142\n31.112516\n1.499359\n13.555544\n..\n...\n..\n35.555806\n12.600329\n55.386477\n26.097577\n44.539554\n6.353981\n0.415635\n68.734\n16.867626\n\n\n1993\n..\n..\n10.529876\n46752651147.986801\n1.5\n41.793913\n31.13679\n-2.61034\n11.997883\n..\n...\n..\n34.515996\n12.169955\n55.930751\n25.90043\n51.046818\n14.610079\n-3.651372\n69.216\n14.796105\n\n\n1994\n..\n..\n11.131854\n62672340433.209198\n1.8\n41.773415\n30.608821\n1.224124\n18.536749\n..\n...\n..\n34.362656\n11.36838\n30.257174\n35.769815\n63.42924\n24.25699\n-7.989744\n69.52\n14.088385\n\n\n1995\n..\n1227477616761.793945\n11.529146\n83355725625.839294\n1.7\n40.174052\n28.581504\n0.220344\n17.952523\n..\n...\n..\n33.652938\n10.082792\n27.80656\n34.276969\n74.079786\n16.791225\n-1.412648\n70.008\n15.157922\n\n\n1996\n12.486562\n1380747364631.361816\n11.885279\n101143723277.903\n1.7\n39.325367\n27.480174\n0.838553\n17.923296\n..\n...\n..\n33.570271\n9.215581\n22.739936\n33.814745\n80.238158\n8.31316\n3.35497\n70.266\n14.952756\n\n\n1997\n9.50929\n1512046638645.220215\n12.47275\n118615853608.167999\n2.035901\n40.202277\n27.695494\n3.843898\n19.493164\n..\n...\n..\n35.005677\n10.431251\n21.484758\n34.533017\n82.473966\n2.786465\n6.911699\n70.672\n14.09497\n\n\n1998\n7.869479\n1631036838613.571289\n13.609162\n137452534380.806\n2.003015\n38.977513\n25.499749\n3.058323\n18.3421\n..\n...\n..\n37.043329\n8.402165\n11.344978\n32.424305\n81.836289\n-0.773186\n7.356478\n71.172\n13.058259\n\n\n1999\n9.055274\n1778731686286.483887\n13.923086\n150369327337.859009\n1.79\n37.047947\n23.113951\n1.930055\n18.162477\n..\n...\n..\n38.575348\n9.249145\n9.404386\n33.524162\n80.689376\n-1.401473\n7.20405\n71.419\n12.520671\n\n\n2000\n9.475855\n1947281729610.611328\n13.97168\n167660154603.875\n1.79\n36.177541\n22.111654\n1.69387\n20.893697\n..\n...\n..\n39.787655\n9.776352\n7.61514\n39.411015\n80.970022\n0.347811\n3.710664\n71.881\n11.338743\n\n\n2001\n10.972157\n2160940529055.069824\n13.923446\n183789491134.252991\n1.79\n37.810546\n23.879584\n1.299163\n20.312146\n..\n...\n..\n41.223126\n10.259388\n25.584306\n38.527359\n81.552298\n0.719126\n3.726664\n72.606\n11.419898\n\n\n2002\n12.555756\n2432262955029.822266\n13.71457\n200232727004.694\n1.79\n39.282452\n25.463512\n2.408746\n22.644746\n..\n...\n..\n42.247945\n10.485636\n22.059554\n42.747404\n80.955359\n-0.731971\n4.679724\n72.985\n11.189127\n\n\n2003\n11.560102\n2713435021734.423828\n13.890917\n229200123275.174988\n1.79\n42.676156\n28.77575\n2.593031\n26.980757\n..\n...\n..\n42.028216\n9.539808\n21.166056\n51.803988\n81.868215\n1.127603\n2.638147\n73.371\n10.97383\n\n\n2004\n10.880833\n3008679348397.580078\n14.084508\n274647909439.104004\n1.79\n45.792545\n31.710364\n3.525766\n31.061338\n..\n...\n..\n41.18314\n10.120036\n18.584199\n59.505524\n84.999377\n3.824637\n-1.282812\n73.748\n10.879795\n\n\n2005\n12.926897\n3397608231795.796875\n14.342117\n325566066140.86499\n1.79\n46.280913\n31.913389\n5.790933\n33.829858\n..\n...\n..\n41.335926\n12.357949\n17.833207\n62.207893\n86.509318\n1.776414\n1.613278\n74.111\n10.228761\n\n\n2006\n14.607645\n3893918787722.875977\n14.787631\n406659863311.312012\n1.79\n48.350844\n33.576005\n8.424166\n36.035026\n..\n...\n..\n41.816842\n14.134209\n16.042201\n64.478884\n87.93623\n1.649431\n2.110578\n74.504\n10.187305\n\n\n2007\n15.198015\n4485717147211.160156\n15.266498\n543487336437.452026\n1.79\n50.161618\n34.733502\n9.94789\n35.434799\n..\n...\n..\n42.869665\n16.071495\n13.172701\n62.193363\n92.171913\n4.816768\n-0.259571\n74.762\n9.627737\n\n\n2008\n6.338576\n4770047746587.043945\n16.326624\n754290022947.256958\n1.79\n51.467592\n35.188528\n9.154064\n32.602714\n..\n...\n..\n42.85978\n10.475841\n9.52108\n57.612715\n97.633331\n5.925251\n-2.305615\n74.872\n7.646509\n\n\n2009\n12.902063\n5385482323764.141602\n17.663124\n899053019566.602051\n1.79\n50.457426\n32.828035\n4.768156\n24.749856\n..\n...\n..\n44.406667\n9.586586\n9.805092\n45.18487\n96.922399\n-0.728165\n5.531123\n75.343\n7.399288\n\n\n2010\n8.715012\n5854827764983.147461\n18.585914\n1126306400657.879883\n1.79\n51.547499\n32.899234\n3.906734\n27.185333\n..\n...\n..\n44.176992\n9.668982\n17.583174\n50.717078\n100\n3.175325\n-1.002401\n75.599\n6.969116\n\n\n2011\n4.835567\n6137941888296.601562\n20.246716\n1514454342651.47998\n1.79\n49.696479\n29.485905\n1.802237\n26.568189\n..\n...\n..\n44.293057\n9.488129\n23.7001\n50.740905\n105.553899\n5.553899\n-1.402429\n75.903\n6.166181\n\n\n2012\n10.250809\n6767130567454.841797\n21.106646\n1796175611355.649902\n1.79\n48.77866\n27.659511\n2.524462\n25.492522\n..\n...\n..\n45.463305\n8.0141\n23.383172\n48.267522\n108.318909\n2.619524\n3.585204\n76.192\n6.035396\n\n\n2013\n5.951001\n7169842562616.428711\n22.366368\n2122568302790.290039\n1.79\n47.766834\n25.36809\n1.548554\n24.599254\n..\n...\n..\n46.880402\n8.299168\n27.755897\n46.744376\n111.158002\n2.62105\n3.755387\n76.452\n5.967633\n\n\n2014\n8.665463\n7791142593670.500977\n22.799193\n2393915292362.180176\n1.79\n47.555443\n24.724616\n2.253294\n23.510061\n..\n...\n..\n48.27094\n8.341817\n31.780502\n44.905216\n113.29406\n1.921642\n4.522308\n76.717\n5.989543\n\n\n2015\n6.970742\n8334243004919.240234\n23.524725\n2587719804459.140137\n1.79\n45.635344\n22.111638\n2.649011\n21.35408\n..\n...\n..\n50.771645\n8.77671\n24.146341\n39.464169\n114.922123\n1.437024\n4.353072\n76.977\n5.604891\n\n\n2016\n8.207387\n9018266574819.265625\n23.245603\n2603507524161.830078\n1.79\n44.601823\n21.307969\n1.7033\n19.58438\n..\n...\n..\n52.362091\n8.09608\n25.871028\n36.894415\n117.220567\n2.000002\n2.901815\n77.218\n5.476726\n\n\n2017\n6.839527\n9635073326670.451172\n23.051969\n2835392168026.049805\n1.79\n44.963965\n21.907381\n1.532645\n19.692277\n..\n...\n..\n52.684737\n8.269773\n31.852117\n37.632413\n119.08805\n1.593136\n0.112554\n77.248\n5.262867\n\n\n2018\n4.001474\n10020618290151.082031\n24.132246\n3330249981440\n1.79\n44.682003\n20.650362\n0.173667\n19.112104\n..\n...\n..\n53.269968\n7.98351\n38.472786\n37.565784\n121.558878\n2.07479\n0.821502\n77.744\n5.048502\n\n\n2019\n4.695245\n10491110855724.185547\n24.535371\n3484022656400\n1.79\n43.896015\n19.478714\n0.720659\n18.409992\n..\n...\n..\n54.268904\n7.1811\n37.398433\n35.890096\n125.083154\n2.899234\n3.024385\n77.968\n4.906764\n\n\n2020\n0.04303\n10495625160109.277344\n26.143102\n3816892893942.959961\n1.79\n44.851126\n18.788405\n1.694172\n18.586139\n..\n...\n..\n54.458536\n1.947122\n36.822859\n34.754296\n128.109444\n2.419422\n3.838601\n78.077\n4.77226\n\n\n2021\n..\n..\n..\n..\n..\n..\n..\n1.980228\n19.943973\n..\n...\n..\n53.468205\n8.486297\n42.189441\n37.30199\n129.366217\n0.981015\n-0.194431\n78.211\n4.959253\n\n\n2022\n..\n..\n..\n..\n..\n..\n..\n2.237107\n20.677003\n..\n...\n..\n52.775888\n2.293775\n..\n38.143819\n131.919357\n1.973576\n2.056524\n..\n4.792102\n\n\n\n\n34 rows × 33 columns\n\n\n\n\nvalue_to_replace = \"..\"\nfor col in df.columns:\n    df[col] = df[col].replace(value_to_replace, np.nan)\n\nmissing= df.isnull().sum()\n\n\nmissing_vals = pd.DataFrame({'Missing Values': missing.index, 'Missing Values Sum': missing.values})\nmissing_vals = missing_vals.sort_values(by='Missing Values Sum', ascending=False)\n\nprint(missing_vals)\n\n                   Missing Values  Missing Values Sum\n9           final_consump_exp_gdp                  34\n18                  goods_imp_bop                  34\n23   short_term_debt_tot_reserves                  34\n0                       adj_NNI_g                   9\n1                       adj_NNI_c                   8\n19     imports_goods_services_gdp                   8\n12               fdi_net_outflows                   7\n2         adj_savings_fix_cap_GNI                   2\n3             adj_savings_edu_GNI                   2\n4                     adj_NNS_GNI                   2\n5                    curr_acc_bal                   2\n6                      ex_imp_gdp                   2\n26                      inflation                   1\n17                  goods_exp_bop                   1\n11                fdi_net_inflows                   1\n10       final_consump_exp_growth                   1\n31              interest_payments                   1\n27             real_interest_rate                   0\n28          lending_interest_rate                   0\n29                 life_exp_birth                   0\n30                    expense_gdp                   0\n25                            cpi                   0\n24                      trade_gdp                   0\n16                     gni_growth                   0\n22                services_growth                   0\n21                   services_gdp                   0\n20  imports_goods_services_growth                   0\n15     gener_govt_fin_consump_exp                   0\n14          gdp_per_capita_growth                   0\n13                     gdp_growth                   0\n8                  ex_debt_shocks                   0\n7                   ex_imp_growth                   0\n32           military expenditure                   0\n\n\n\nfor cols in df.columns:\n    mean = df[cols].mean()\n    df[cols] = df[cols].fillna(mean)\n\n\nprint(df.isnull().sum())\n\nadj_NNI_g                         0\nadj_NNI_c                         0\nadj_savings_fix_cap_GNI           0\nadj_savings_edu_GNI               0\nadj_NNS_GNI                       0\ncurr_acc_bal                      0\nex_imp_gdp                        0\nex_imp_growth                     0\nex_debt_shocks                    0\nfinal_consump_exp_gdp            34\nfinal_consump_exp_growth          0\nfdi_net_inflows                   0\nfdi_net_outflows                  0\ngdp_growth                        0\ngdp_per_capita_growth             0\ngener_govt_fin_consump_exp        0\ngni_growth                        0\ngoods_exp_bop                     0\ngoods_imp_bop                    34\nimports_goods_services_gdp        0\nimports_goods_services_growth     0\nservices_gdp                      0\nservices_growth                   0\nshort_term_debt_tot_reserves     34\ntrade_gdp                         0\ncpi                               0\ninflation                         0\nreal_interest_rate                0\nlending_interest_rate             0\nlife_exp_birth                    0\nexpense_gdp                       0\ninterest_payments                 0\nmilitary expenditure              0\ndtype: int64\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 34 entries, 1989 to 2022\nData columns (total 33 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   adj_NNI_g                      34 non-null     float64\n 1   adj_NNI_c                      34 non-null     float64\n 2   adj_savings_fix_cap_GNI        34 non-null     float64\n 3   adj_savings_edu_GNI            34 non-null     float64\n 4   adj_NNS_GNI                    34 non-null     float64\n 5   curr_acc_bal                   34 non-null     float64\n 6   ex_imp_gdp                     34 non-null     float64\n 7   ex_imp_growth                  34 non-null     float64\n 8   ex_debt_shocks                 34 non-null     float64\n 9   final_consump_exp_gdp          0 non-null      float64\n 10  final_consump_exp_growth       34 non-null     float64\n 11  fdi_net_inflows                34 non-null     float64\n 12  fdi_net_outflows               34 non-null     float64\n 13  gdp_growth                     34 non-null     float64\n 14  gdp_per_capita_growth          34 non-null     float64\n 15  gener_govt_fin_consump_exp     34 non-null     float64\n 16  gni_growth                     34 non-null     float64\n 17  goods_exp_bop                  34 non-null     float64\n 18  goods_imp_bop                  0 non-null      float64\n 19  imports_goods_services_gdp     34 non-null     float64\n 20  imports_goods_services_growth  34 non-null     float64\n 21  services_gdp                   34 non-null     float64\n 22  services_growth                34 non-null     float64\n 23  short_term_debt_tot_reserves   0 non-null      float64\n 24  trade_gdp                      34 non-null     float64\n 25  cpi                            34 non-null     float64\n 26  inflation                      34 non-null     float64\n 27  real_interest_rate             34 non-null     float64\n 28  lending_interest_rate          34 non-null     float64\n 29  life_exp_birth                 34 non-null     float64\n 30  expense_gdp                    34 non-null     float64\n 31  interest_payments              34 non-null     float64\n 32  military expenditure           34 non-null     float64\ndtypes: float64(33)\nmemory usage: 8.9 KB\n\n\n\ndf['year'] = df.index\n\n\ndf[\"gdp_growth\"].min()\n\n0.9663083109927842\n\n\n\ndf[\"gdp_growth\"].max()\n\n6.186882076142144\n\n\n\nbins = [0, 2, 5, 7, float('inf')]\n\n\nlabels = ['Low Growth', 'Moderate Growth', 'High Growth', 'Very High Growth']\n\n\ndf['labels'] = pd.cut(df['gdp_growth'], bins=bins, labels=labels)\n\n\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear\nlabels\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1989\n9.020550\n5.132355e+12\n9.410207\n3.274752e+10\n1.600000\n35.858594\n26.509333\n-1.241345\n9.027345\nNaN\n...\n5.838089\n29.961957\n19.134707\n39.242469\n18.245638\n2.520693\n67.838000\n13.206340\n1989\nLow Growth\n\n\n1990\n9.020550\n5.132355e+12\n9.758755\n3.532669e+10\n1.786180\n36.596338\n26.705333\n3.324577\n12.451603\nNaN\n...\n2.668735\n27.024862\n22.199473\n40.440263\n3.052290\n3.451645\n68.005000\n13.747362\n1990\nLow Growth\n\n\n1991\n9.020550\n5.132355e+12\n9.935973\n3.815414e+10\n1.786180\n38.423094\n28.605693\n3.461900\n13.436371\nNaN\n...\n9.204204\n22.381388\n24.066335\n41.878596\n3.556686\n1.804312\n68.169000\n14.253641\n1991\nLow Growth\n\n\n1992\n9.020550\n5.132355e+12\n9.402707\n4.014956e+10\n1.500000\n40.585142\n31.112516\n1.499359\n13.555544\nNaN\n...\n12.600329\n55.386477\n26.097577\n44.539554\n6.353981\n0.415635\n68.734000\n16.867626\n1992\nModerate Growth\n\n\n1993\n9.020550\n5.132355e+12\n10.529876\n4.675265e+10\n1.500000\n41.793913\n31.136790\n-2.610340\n11.997883\nNaN\n...\n12.169955\n55.930751\n25.900430\n51.046818\n14.610079\n-3.651372\n69.216000\n14.796105\n1993\nHigh Growth\n\n\n1994\n9.020550\n5.132355e+12\n11.131854\n6.267234e+10\n1.800000\n41.773415\n30.608821\n1.224124\n18.536749\nNaN\n...\n11.368380\n30.257174\n35.769815\n63.429240\n24.256990\n-7.989744\n69.520000\n14.088385\n1994\nHigh Growth\n\n\n1995\n9.020550\n1.227478e+12\n11.529146\n8.335573e+10\n1.700000\n40.174052\n28.581504\n0.220344\n17.952523\nNaN\n...\n10.082792\n27.806560\n34.276969\n74.079786\n16.791225\n-1.412648\n70.008000\n15.157922\n1995\nModerate Growth\n\n\n1996\n12.486562\n1.380747e+12\n11.885279\n1.011437e+11\n1.700000\n39.325367\n27.480174\n0.838553\n17.923296\nNaN\n...\n9.215581\n22.739936\n33.814745\n80.238158\n8.313160\n3.354970\n70.266000\n14.952756\n1996\nModerate Growth\n\n\n1997\n9.509290\n1.512047e+12\n12.472750\n1.186159e+11\n2.035901\n40.202277\n27.695494\n3.843898\n19.493164\nNaN\n...\n10.431251\n21.484758\n34.533017\n82.473966\n2.786465\n6.911699\n70.672000\n14.094970\n1997\nModerate Growth\n\n\n1998\n7.869479\n1.631037e+12\n13.609162\n1.374525e+11\n2.003015\n38.977513\n25.499749\n3.058323\n18.342100\nNaN\n...\n8.402165\n11.344978\n32.424305\n81.836289\n-0.773186\n7.356478\n71.172000\n13.058259\n1998\nModerate Growth\n\n\n1999\n9.055274\n1.778732e+12\n13.923086\n1.503693e+11\n1.790000\n37.047947\n23.113951\n1.930055\n18.162477\nNaN\n...\n9.249145\n9.404386\n33.524162\n80.689376\n-1.401473\n7.204050\n71.419000\n12.520671\n1999\nModerate Growth\n\n\n2000\n9.475855\n1.947282e+12\n13.971680\n1.676602e+11\n1.790000\n36.177541\n22.111654\n1.693870\n20.893697\nNaN\n...\n9.776352\n7.615140\n39.411015\n80.970022\n0.347811\n3.710664\n71.881000\n11.338743\n2000\nModerate Growth\n\n\n2001\n10.972157\n2.160941e+12\n13.923446\n1.837895e+11\n1.790000\n37.810546\n23.879584\n1.299163\n20.312146\nNaN\n...\n10.259388\n25.584306\n38.527359\n81.552298\n0.719126\n3.726664\n72.606000\n11.419898\n2001\nModerate Growth\n\n\n2002\n12.555756\n2.432263e+12\n13.714570\n2.002327e+11\n1.790000\n39.282452\n25.463512\n2.408746\n22.644746\nNaN\n...\n10.485636\n22.059554\n42.747404\n80.955359\n-0.731971\n4.679724\n72.985000\n11.189127\n2002\nModerate Growth\n\n\n2003\n11.560102\n2.713435e+12\n13.890917\n2.292001e+11\n1.790000\n42.676156\n28.775750\n2.593031\n26.980757\nNaN\n...\n9.539808\n21.166056\n51.803988\n81.868215\n1.127603\n2.638147\n73.371000\n10.973830\n2003\nModerate Growth\n\n\n2004\n10.880833\n3.008679e+12\n14.084508\n2.746479e+11\n1.790000\n45.792545\n31.710364\n3.525766\n31.061338\nNaN\n...\n10.120036\n18.584199\n59.505524\n84.999377\n3.824637\n-1.282812\n73.748000\n10.879795\n2004\nModerate Growth\n\n\n2005\n12.926897\n3.397608e+12\n14.342117\n3.255661e+11\n1.790000\n46.280913\n31.913389\n5.790933\n33.829858\nNaN\n...\n12.357949\n17.833207\n62.207893\n86.509318\n1.776414\n1.613278\n74.111000\n10.228761\n2005\nModerate Growth\n\n\n2006\n14.607645\n3.893919e+12\n14.787631\n4.066599e+11\n1.790000\n48.350844\n33.576005\n8.424166\n36.035026\nNaN\n...\n14.134209\n16.042201\n64.478884\n87.936230\n1.649431\n2.110578\n74.504000\n10.187305\n2006\nModerate Growth\n\n\n2007\n15.198015\n4.485717e+12\n15.266498\n5.434873e+11\n1.790000\n50.161618\n34.733502\n9.947890\n35.434799\nNaN\n...\n16.071495\n13.172701\n62.193363\n92.171913\n4.816768\n-0.259571\n74.762000\n9.627737\n2007\nModerate Growth\n\n\n2008\n6.338576\n4.770048e+12\n16.326624\n7.542900e+11\n1.790000\n51.467592\n35.188528\n9.154064\n32.602714\nNaN\n...\n10.475841\n9.521080\n57.612715\n97.633331\n5.925251\n-2.305615\n74.872000\n7.646509\n2008\nModerate Growth\n\n\n2009\n12.902063\n5.385482e+12\n17.663124\n8.990530e+11\n1.790000\n50.457426\n32.828035\n4.768156\n24.749856\nNaN\n...\n9.586586\n9.805092\n45.184870\n96.922399\n-0.728165\n5.531123\n75.343000\n7.399288\n2009\nModerate Growth\n\n\n2010\n8.715012\n5.854828e+12\n18.585914\n1.126306e+12\n1.790000\n51.547499\n32.899234\n3.906734\n27.185333\nNaN\n...\n9.668982\n17.583174\n50.717078\n100.000000\n3.175325\n-1.002401\n75.599000\n6.969116\n2010\nModerate Growth\n\n\n2011\n4.835567\n6.137942e+12\n20.246716\n1.514454e+12\n1.790000\n49.696479\n29.485905\n1.802237\n26.568189\nNaN\n...\n9.488129\n23.700100\n50.740905\n105.553899\n5.553899\n-1.402429\n75.903000\n6.166181\n2011\nModerate Growth\n\n\n2012\n10.250809\n6.767131e+12\n21.106646\n1.796176e+12\n1.790000\n48.778660\n27.659511\n2.524462\n25.492522\nNaN\n...\n8.014100\n23.383172\n48.267522\n108.318909\n2.619524\n3.585204\n76.192000\n6.035396\n2012\nModerate Growth\n\n\n2013\n5.951001\n7.169843e+12\n22.366368\n2.122568e+12\n1.790000\n47.766834\n25.368090\n1.548554\n24.599254\nNaN\n...\n8.299168\n27.755897\n46.744376\n111.158002\n2.621050\n3.755387\n76.452000\n5.967633\n2013\nModerate Growth\n\n\n2014\n8.665463\n7.791143e+12\n22.799193\n2.393915e+12\n1.790000\n47.555443\n24.724616\n2.253294\n23.510061\nNaN\n...\n8.341817\n31.780502\n44.905216\n113.294060\n1.921642\n4.522308\n76.717000\n5.989543\n2014\nModerate Growth\n\n\n2015\n6.970742\n8.334243e+12\n23.524725\n2.587720e+12\n1.790000\n45.635344\n22.111638\n2.649011\n21.354080\nNaN\n...\n8.776710\n24.146341\n39.464169\n114.922123\n1.437024\n4.353072\n76.977000\n5.604891\n2015\nModerate Growth\n\n\n2016\n8.207387\n9.018267e+12\n23.245603\n2.603508e+12\n1.790000\n44.601823\n21.307969\n1.703300\n19.584380\nNaN\n...\n8.096080\n25.871028\n36.894415\n117.220567\n2.000002\n2.901815\n77.218000\n5.476726\n2016\nLow Growth\n\n\n2017\n6.839527\n9.635073e+12\n23.051969\n2.835392e+12\n1.790000\n44.963965\n21.907381\n1.532645\n19.692277\nNaN\n...\n8.269773\n31.852117\n37.632413\n119.088050\n1.593136\n0.112554\n77.248000\n5.262867\n2017\nLow Growth\n\n\n2018\n4.001474\n1.002062e+13\n24.132246\n3.330250e+12\n1.790000\n44.682003\n20.650362\n0.173667\n19.112104\nNaN\n...\n7.983510\n38.472786\n37.565784\n121.558878\n2.074790\n0.821502\n77.744000\n5.048502\n2018\nLow Growth\n\n\n2019\n4.695245\n1.049111e+13\n24.535371\n3.484023e+12\n1.790000\n43.896015\n19.478714\n0.720659\n18.409992\nNaN\n...\n7.181100\n37.398433\n35.890096\n125.083154\n2.899234\n3.024385\n77.968000\n4.906764\n2019\nLow Growth\n\n\n2020\n0.043030\n1.049563e+13\n26.143102\n3.816893e+12\n1.790000\n44.851126\n18.788405\n1.694172\n18.586139\nNaN\n...\n1.947122\n36.822859\n34.754296\n128.109444\n2.419422\n3.838601\n78.077000\n4.772260\n2020\nLow Growth\n\n\n2021\n9.020550\n5.132355e+12\n16.290555\n1.013829e+12\n1.774727\n43.537202\n27.237859\n1.980228\n19.943973\nNaN\n...\n8.486297\n42.189441\n37.301990\n129.366217\n0.981015\n-0.194431\n78.211000\n4.959253\n2021\nLow Growth\n\n\n2022\n9.020550\n5.132355e+12\n16.290555\n1.013829e+12\n1.774727\n43.537202\n27.237859\n2.237107\n20.677003\nNaN\n...\n2.293775\n25.335231\n38.143819\n131.919357\n1.973576\n2.056524\n73.560848\n4.792102\n2022\nLow Growth\n\n\n\n\n34 rows × 35 columns\n\n\n\n\ncsv_file='../data/china.csv'\n\n\ndf.to_csv(csv_file, index=True)"
  },
  {
    "objectID": "codes/countries_code/brazil.html",
    "href": "codes/countries_code/brazil.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n#pip install xlrd\ndf=pd.read_excel('../data/brazil.xlsx')\ndf\n\n\n\n\n\n\n\n\nSeries Name\nSeries Code\nCountry Name\nCountry Code\n1973 [YR1973]\n1974 [YR1974]\n1975 [YR1975]\n1976 [YR1976]\n1977 [YR1977]\n1978 [YR1978]\n...\n2013 [YR2013]\n2014 [YR2014]\n2015 [YR2015]\n2016 [YR2016]\n2017 [YR2017]\n2018 [YR2018]\n2019 [YR2019]\n2020 [YR2020]\n2021 [YR2021]\n2022 [YR2022]\n\n\n\n\n0\nAdjusted net national income (annual % growth)\nNY.ADJ.NNTY.KD.ZG\nBrazil\nBRA\n13.768581\n6.001818\n4.354146\n10.848967\n5.797912\n2.918624\n...\n4.555718e+00\n-3.093646e-01\n-3.754106e+00\n-3.184861e+00\n1.233663e+00\n2.868586e-01\n2.046424e+00\n-5.484743e+00\n..\n..\n\n\n1\nAdjusted net national income (constant 2015 US$)\nNY.ADJ.NNTY.KD\nBrazil\nBRA\n467846269164.406311\n495925550202.552917\n517518872431.296814\n573664323409.741943\n606924875688.783447\n624638732409.052734\n...\n1.629388e+12\n1.624347e+12\n1.563367e+12\n1.513576e+12\n1.532248e+12\n1.536644e+12\n1.568090e+12\n1.482084e+12\n..\n..\n\n\n2\nAdjusted net national income per capita (annua...\nNY.ADJ.NNTY.PC.KD.ZG\nBrazil\nBRA\n11.055141\n3.505249\n1.92229\n8.273145\n3.334137\n0.515137\n...\n3.651743e+00\n-1.160888e+00\n-4.564905e+00\n-3.967103e+00\n4.347945e-01\n-5.060355e-01\n1.267626e+00\n-6.111350e+00\n..\n..\n\n\n3\nAdjusted savings: consumption of fixed capital...\nNY.ADJ.DKAP.GN.ZS\nBrazil\nBRA\n10.011622\n10.094172\n10.601618\n10.379426\n10.187242\n10.449378\n...\n1.064177e+01\n1.067030e+01\n1.058052e+01\n1.052608e+01\n1.043414e+01\n1.052732e+01\n1.044730e+01\n1.121510e+01\n..\n..\n\n\n4\nAdjusted savings: education expenditure (% of ...\nNY.ADJ.AEDU.GN.ZS\nBrazil\nBRA\n3\n3.599282\n3.599282\n2.9\n3\n3.2\n...\n5.541951e+00\n5.673230e+00\n6.096220e+00\n6.240050e+00\n6.285939e+00\n6.285939e+00\n6.285939e+00\n6.285939e+00\n..\n..\n\n\n5\nAdjusted savings: gross savings (% of GNI)\nNY.ADJ.ICTR.GN.ZS\nBrazil\nBRA\n..\n..\n21.837114\n19.521246\n20.116438\n19.958701\n...\n1.840747e+01\n1.644077e+01\n1.480799e+01\n1.371267e+01\n1.383644e+01\n1.307087e+01\n1.288752e+01\n1.533327e+01\n..\n..\n\n\n6\nAdjusted savings: net national savings (% of GNI)\nNY.ADJ.NNAT.GN.ZS\nBrazil\nBRA\n..\n..\n11.238476\n9.188402\n9.958663\n9.51755\n...\n7.759866e+00\n5.761231e+00\n4.221738e+00\n3.167103e+00\n3.427247e+00\n2.590960e+00\n2.448877e+00\n4.066587e+00\n..\n..\n\n\n7\nCurrent account balance (% of GDP)\nBN.CAB.XOKA.GD.ZS\nBrazil\nBRA\n..\n..\n-5.39304\n-4.256737\n-2.863152\n-3.493133\n...\n-3.574221e+00\n-4.498830e+00\n-3.518392e+00\n-1.700144e+00\n-1.227876e+00\n-2.858416e+00\n-3.631138e+00\n-1.910942e+00\n-2.810205\n-2.968467\n\n\n8\nExports of goods and services (% of GDP)\nNE.EXP.GNFS.ZS\nBrazil\nBRA\n7.844873\n7.673128\n7.218007\n7.013163\n7.245261\n6.692986\n...\n1.174223e+01\n1.101194e+01\n1.290019e+01\n1.246668e+01\n1.251897e+01\n1.463500e+01\n1.412292e+01\n1.645355e+01\n19.561676\n20.045538\n\n\n9\nExports of goods and services (annual % growth)\nNE.EXP.GNFS.KD.ZG\nBrazil\nBRA\n14.25471\n2.333569\n11.572719\n-0.293096\n-0.381964\n13.251767\n...\n1.830295e+00\n-1.569680e+00\n6.819564e+00\n8.631256e-01\n4.908793e+00\n4.053084e+00\n-2.561421e+00\n-2.290906e+00\n5.867547\n5.544349\n\n\n10\nExternal debt stocks (% of GNI)\nDT.DOD.DECT.GN.ZS\nBrazil\nBRA\n19.221542\n21.533507\n22.768666\n22.480568\n24.530643\n28.06603\n...\n1.986317e+01\n2.314118e+01\n3.080001e+01\n3.096982e+01\n2.687661e+01\n3.001666e+01\n3.131525e+01\n3.894649e+01\n38.914374\n..\n\n\n11\nFinal consumption expenditure (% of GDP)\nNE.CON.TOTL.ZS\nBrazil\nBRA\n73.961884\n77.067124\n73.848382\n79.026587\n78.519212\n78.419549\n...\n8.060773e+01\n8.211311e+01\n8.374162e+01\n8.463078e+01\n8.465621e+01\n8.451116e+01\n8.512763e+01\n8.327915e+01\n79.632862\n81.105581\n\n\n12\nFinal consumption expenditure (annual % growth)\nNE.CON.TOTL.KD.ZG\nBrazil\nBRA\n12.066139\n9.716642\n0.979804\n12.575069\n4.85827\n4.691065\n...\n3.019444e+00\n1.907036e+00\n-2.790951e+00\n-2.858736e+00\n1.332575e+00\n1.982067e+00\n1.854726e+00\n-4.350421e+00\n3.196235\n3.651724\n\n\n13\nForeign direct investment, net inflows (% of GDP)\nBX.KLT.DINV.WD.GD.ZS\nBrazil\nBRA\n1.412451\n1.100146\n1.007712\n1.015219\n1.039445\n1.001605\n...\n3.041509e+00\n3.571353e+00\n3.592150e+00\n4.137379e+00\n3.338260e+00\n4.077487e+00\n3.692673e+00\n2.559860e+00\n2.815132\n4.765497\n\n\n14\nForeign direct investment, net outflows (% of ...\nBM.KLT.DINV.WD.GD.ZS\nBrazil\nBRA\n0.039597\n0.049001\n0.086685\n0.119476\n0.082793\n0.061914\n...\n6.326181e-01\n8.390263e-01\n1.738961e-01\n8.182624e-01\n1.034183e+00\n1.056150e-01\n1.218158e+00\n-2.348917e-01\n0.984427\n1.59857\n\n\n15\nGDP growth (annual %)\nNY.GDP.MKTP.KD.ZG\nBrazil\nBRA\n13.968722\n8.153939\n5.166649\n10.25713\n4.934328\n4.969898\n...\n3.004823e+00\n5.039557e-01\n-3.545763e+00\n-3.275917e+00\n1.322869e+00\n1.783667e+00\n1.220778e+00\n-3.276759e+00\n4.98885\n2.900531\n\n\n16\nGDP per capita growth (annual %)\nNY.GDP.PCAP.KD.ZG\nBrazil\nBRA\n11.250508\n5.606683\n2.715859\n7.69506\n2.490664\n2.518506\n...\n2.114256e+00\n-3.545148e-01\n-4.358317e+00\n-4.057423e+00\n5.232966e-01\n9.789385e-01\n4.482804e-01\n-3.918004e+00\n4.435353\n2.428702\n\n\n17\nGeneral government final consumption expenditu...\nNE.CON.GOVT.ZS\nBrazil\nBRA\n9.90643\n9.329839\n10.18518\n10.487095\n9.426307\n9.680529\n...\n1.889248e+01\n1.915354e+01\n1.977682e+01\n2.037930e+01\n2.016190e+01\n1.989509e+01\n1.998358e+01\n2.013515e+01\n18.617815\n18.03374\n\n\n18\nGeneral government final consumption expenditu...\nNE.CON.GOVT.KD.ZG\nBrazil\nBRA\n12.274876\n0.181793\n15.157875\n7.700533\n-5.483936\n5.467964\n...\n1.510121e+00\n8.130848e-01\n-1.436568e+00\n2.110011e-01\n-6.706871e-01\n7.868904e-01\n-4.861928e-01\n-3.688983e+00\n3.455217\n1.527166\n\n\n19\nGNI growth (annual %)\nNY.GNP.MKTP.KD.ZG\nBrazil\nBRA\n13.538417\n8.591898\n4.498897\n10.066765\n4.77114\n4.20975\n...\n4.183874e+00\n2.594718e-02\n-3.542095e+00\n-3.511363e+00\n1.573971e+00\n8.370890e-01\n1.320322e+00\n-2.685760e+00\n4.368633\n2.378447\n\n\n20\nGoods exports (BoP, current US$)\nBX.GSR.MRCH.CD\nBrazil\nBRA\n..\n..\n8492000000\n9961000000\n11923000000\n12473000000\n...\n2.415111e+11\n2.239713e+11\n1.899140e+11\n1.842668e+11\n2.180005e+11\n2.395196e+11\n2.257996e+11\n2.107070e+11\n284011796746.51001\n340327963993.450012\n\n\n21\nGoods imports (BoP, current US$)\nBM.GSR.MRCH.CD\nBrazil\nBRA\n..\n..\n12042000000\n12347000000\n12023000000\n13631000000\n...\n2.411421e+11\n2.307102e+11\n1.724690e+11\n1.397232e+11\n1.606755e+11\n1.961468e+11\n1.992528e+11\n1.783374e+11\n247648424912.279999\n296174697625.330017\n\n\n22\nImports of goods and services (% of GDP)\nNE.IMP.GNFS.ZS\nBrazil\nBRA\n9.011316\n13.29465\n11.016324\n9.402385\n7.909988\n7.884902\n...\n1.404373e+01\n1.367346e+01\n1.405343e+01\n1.206700e+01\n1.180077e+01\n1.424120e+01\n1.476734e+01\n1.584853e+01\n18.61975\n19.294456\n\n\n23\nImports of goods and services (annual % growth)\nNE.IMP.GNFS.KD.ZG\nBrazil\nBRA\n20.411407\n28.242083\n-4.423988\n-1.162956\n-7.722505\n4.402968\n...\n6.669679e+00\n-2.271896e+00\n-1.419064e+01\n-1.034293e+01\n6.716941e+00\n7.742779e+00\n1.332566e+00\n-9.476639e+00\n12.028849\n0.808071\n\n\n24\nServices, value added (% of GDP)\nNV.SRV.TOTL.ZS\nBrazil\nBRA\n38.714484\n39.128857\n40.348724\n41.515167\n41.092072\n42.819387\n...\n5.967876e+01\n6.125097e+01\n6.230787e+01\n6.320370e+01\n6.333867e+01\n6.265335e+01\n6.306785e+01\n6.144844e+01\n57.755609\n58.909987\n\n\n25\nServices, value added (annual % growth)\nNV.SRV.TOTL.KD.ZG\nBrazil\nBRA\n15.641424\n10.575694\n5.035089\n11.565964\n5.016698\n6.164438\n...\n2.753828e+00\n9.854034e-01\n-2.733762e+00\n-2.221344e+00\n7.656632e-01\n2.087144e+00\n1.512102e+00\n-3.738107e+00\n5.223914\n4.158663\n\n\n26\nShort-term debt (% of total reserves)\nDT.DOD.DSTC.IR.ZS\nBrazil\nBRA\n27.67079\n49.458973\n79.349955\n60.666442\n80.637467\n58.060904\n...\n9.338065e+00\n1.600157e+01\n1.468347e+01\n1.567240e+01\n1.401461e+01\n1.783885e+01\n2.218616e+01\n1.939829e+01\n21.742344\n..\n\n\n27\nTrade (% of GDP)\nNE.TRD.GNFS.ZS\nBrazil\nBRA\n16.856189\n20.967778\n18.23433\n16.415548\n15.155249\n14.577888\n...\n2.578596e+01\n2.468541e+01\n2.695363e+01\n2.453368e+01\n2.431973e+01\n2.887620e+01\n2.889026e+01\n3.230208e+01\n38.181427\n39.339994\n\n\n28\nConsumer price index (2010 = 100)\nFP.CPI.TOTL\nBrazil\nBRA\n..\n..\n..\n..\n..\n..\n...\n1.193721e+02\n1.269272e+02\n1.383886e+02\n1.504826e+02\n1.556688e+02\n1.613738e+02\n1.673979e+02\n1.727743e+02\n187.117425\n204.482121\n\n\n29\nInflation, consumer prices (annual %)\nFP.CPI.TOTL.ZG\nBrazil\nBRA\n..\n..\n..\n..\n..\n..\n...\n6.204311e+00\n6.329040e+00\n9.029901e+00\n8.739144e+00\n3.446373e+00\n3.664850e+00\n3.732976e+00\n3.211768e+00\n8.30166\n9.280106\n\n\n30\nReal interest rate (%)\nFR.INR.RINR\nBrazil\nBRA\n..\n..\n..\n..\n..\n..\n...\n1.849884e+01\n2.240367e+01\n3.383234e+01\n4.069836e+01\n4.171381e+01\n3.310233e+01\n3.190307e+01\n2.119718e+01\n16.728245\n28.736505\n\n\n31\nLife expectancy at birth, total (years)\nSP.DYN.LE00.IN\nBrazil\nBRA\n58.472\n58.881\n59.353\n59.792\n60.24\n60.72\n...\n7.391800e+01\n7.430600e+01\n7.433200e+01\n7.444200e+01\n7.482700e+01\n7.510900e+01\n7.533800e+01\n7.400900e+01\n72.75\n..\n\n\n32\nMilitary expenditure (% of GDP)\nMS.MIL.XPND.GD.ZS\nBrazil\nBRA\n2.154651\n1.941353\n1.972144\n2.002753\n1.687726\n1.599672\n...\n1.329446e+00\n1.330244e+00\n1.365517e+00\n1.347975e+00\n1.414022e+00\n1.469678e+00\n1.382797e+00\n1.326660e+00\n1.163682\n1.053422\n\n\n\n\n33 rows × 54 columns\n\n\n\n\ndf = df.T\ndf.columns = df.iloc[0]\ndf.head(5)\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annual % growth)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annua...\nAdjusted savings: consumption of fixed capital...\nAdjusted savings: education expenditure (% of ...\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\nSeries Code\nNY.ADJ.NNTY.KD.ZG\nNY.ADJ.NNTY.KD\nNY.ADJ.NNTY.PC.KD.ZG\nNY.ADJ.DKAP.GN.ZS\nNY.ADJ.AEDU.GN.ZS\nNY.ADJ.ICTR.GN.ZS\nNY.ADJ.NNAT.GN.ZS\nBN.CAB.XOKA.GD.ZS\nNE.EXP.GNFS.ZS\nNE.EXP.GNFS.KD.ZG\n...\nNE.IMP.GNFS.KD.ZG\nNV.SRV.TOTL.ZS\nNV.SRV.TOTL.KD.ZG\nDT.DOD.DSTC.IR.ZS\nNE.TRD.GNFS.ZS\nFP.CPI.TOTL\nFP.CPI.TOTL.ZG\nFR.INR.RINR\nSP.DYN.LE00.IN\nMS.MIL.XPND.GD.ZS\n\n\nCountry Name\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\n...\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\nBrazil\n\n\nCountry Code\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\n...\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\nBRA\n\n\n1973 [YR1973]\n13.768581\n467846269164.406311\n11.055141\n10.011622\n3\n..\n..\n..\n7.844873\n14.25471\n...\n20.411407\n38.714484\n15.641424\n27.67079\n16.856189\n..\n..\n..\n58.472\n2.154651\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[4:]\ndf\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annual % growth)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\n\n\n1973 [YR1973]\n13.768581\n467846269164.406311\n11.055141\n10.011622\n3\n..\n..\n..\n7.844873\n14.25471\n...\n20.411407\n38.714484\n15.641424\n27.67079\n16.856189\n..\n..\n..\n58.472\n2.154651\n\n\n1974 [YR1974]\n6.001818\n495925550202.552917\n3.505249\n10.094172\n3.599282\n..\n..\n..\n7.673128\n2.333569\n...\n28.242083\n39.128857\n10.575694\n49.458973\n20.967778\n..\n..\n..\n58.881\n1.941353\n\n\n1975 [YR1975]\n4.354146\n517518872431.296814\n1.92229\n10.601618\n3.599282\n21.837114\n11.238476\n-5.39304\n7.218007\n11.572719\n...\n-4.423988\n40.348724\n5.035089\n79.349955\n18.23433\n..\n..\n..\n59.353\n1.972144\n\n\n1976 [YR1976]\n10.848967\n573664323409.741943\n8.273145\n10.379426\n2.9\n19.521246\n9.188402\n-4.256737\n7.013163\n-0.293096\n...\n-1.162956\n41.515167\n11.565964\n60.666442\n16.415548\n..\n..\n..\n59.792\n2.002753\n\n\n1977 [YR1977]\n5.797912\n606924875688.783447\n3.334137\n10.187242\n3\n20.116438\n9.958663\n-2.863152\n7.245261\n-0.381964\n...\n-7.722505\n41.092072\n5.016698\n80.637467\n15.155249\n..\n..\n..\n60.24\n1.687726\n\n\n1978 [YR1978]\n2.918624\n624638732409.052734\n0.515137\n10.449378\n3.2\n19.958701\n9.51755\n-3.493133\n6.692986\n13.251767\n...\n4.402968\n42.819387\n6.164438\n58.060904\n14.577888\n..\n..\n..\n60.72\n1.599672\n\n\n1979 [YR1979]\n5.111081\n656564523644.556396\n2.66217\n10.504763\n3.2\n18.521608\n8.012211\n-4.7511\n7.24078\n9.299891\n...\n8.397001\n44.160915\n7.747477\n87.845074\n16.566883\n..\n..\n..\n61.253\n1.521932\n\n\n1980 [YR1980]\n4.620195\n686899082972.884888\n2.189593\n11.660693\n3.5\n18.475111\n6.838826\n-5.40495\n8.962395\n22.614292\n...\n0.686537\n40.392161\n9.15\n196.931891\n20.155407\n0.0\n..\n..\n61.781\n1.138434\n\n\n1981 [YR1981]\n-5.833894\n646826116981.289062\n-8.000325\n11.306024\n4\n19.443428\n8.111203\n-4.559422\n9.62284\n21.352797\n...\n-12.361319\n41.759968\n-2.48\n205.256486\n19.632924\n0.0\n101.725073\n..\n62.333\n1.143149\n\n\n1982 [YR1982]\n-0.480225\n643719893121.052856\n-2.73152\n11.473882\n4.3\n16.120515\n4.660475\n-6.014062\n7.900485\n-9.191872\n...\n-6.004329\n42.419026\n2.11\n437.374535\n16.49117\n0.0\n100.543359\n..\n62.856\n1.303534\n\n\n1983 [YR1983]\n-4.255332\n616327473273.99231\n-6.38421\n10.887567\n3.1\n14.142343\n3.287834\n-3.603356\n12.243756\n14.271464\n...\n-17.447496\n43.44155\n-0.53\n312.665288\n21.900353\n0.0\n135.027682\n..\n63.331\n1.25458\n\n\n1984 [YR1984]\n6.50245\n656403861422.018921\n4.18656\n10.496707\n2.8\n16.707611\n6.223178\n0.017522\n15.035413\n21.983003\n...\n-2.983772\n43.328506\n5.35\n92.116004\n23.830075\n0.0\n192.121733\n..\n63.773\n1.199541\n\n\n1985 [YR1985]\n5.710086\n693885084853.629028\n3.473204\n11.855392\n3.4\n20.166035\n8.316746\n-0.132777\n12.948579\n7.041871\n...\n0.053822\n41.515391\n6.94\n80.723745\n20.449767\n0.0\n225.989665\n..\n64.198\n1.429523\n\n\n1986 [YR1986]\n10.457555\n766448499642.991577\n8.195164\n12.111642\n4.1\n17.922968\n5.823499\n-2.07072\n9.217279\n-10.574251\n...\n28.623922\n40.644701\n8.1\n115.215203\n15.860654\n0.0\n147.142826\n..\n64.64\n1.220389\n\n\n1987 [YR1987]\n3.102682\n790228961641.504883\n1.059746\n11.600919\n4.228605\n22.668719\n11.064235\n-0.512971\n9.828482\n19.240199\n...\n-2.942933\n41.246413\n3.14\n164.398175\n16.262397\n0.0\n228.336163\n..\n65.08\n1.743994\n\n\n1988 [YR1988]\n0.45584\n793831144009.251221\n-1.472105\n11.288813\n4.2\n24.938344\n13.663485\n1.349868\n11.667359\n13.066131\n...\n-1.110276\n44.780318\n2.33\n115.115561\n17.767245\n0.000002\n629.114509\n..\n65.454\n2.118072\n\n\n1989 [YR1989]\n-5.855128\n747351312328.606812\n-7.604044\n10.584996\n4.549878\n33.988799\n23.294785\n0.24262\n8.92961\n5.060902\n...\n8.976805\n48.367309\n3.54\n186.125145\n14.390878\n0.000029\n1430.723725\n..\n65.868\n2.68625\n\n\n1990 [YR1990]\n-13.45707\n646779722899.373413\n-15.009283\n11.372507\n4.63426\n19.470369\n8.115233\n-0.82217\n8.197238\n-4.917222\n...\n10.944542\n60.496606\n-0.76\n237.208689\n15.155603\n0.000893\n2947.732772\n..\n65.985\n2.363841\n\n\n1991 [YR1991]\n2.850678\n665217330601.04541\n1.086602\n10.995749\n4.63426\n19.162232\n8.16256\n-0.355628\n8.677637\n-4.828384\n...\n11.096782\n60.549713\n1.96\n280.16399\n16.592078\n0.004756\n432.786662\n..\n66.31\n1.963333\n\n\n1992 [YR1992]\n1.344214\n674159278342.075928\n-0.322753\n10.261218\n4.63426\n20.586744\n10.325337\n1.559017\n10.868312\n16.539064\n...\n4.523364\n68.357451\n1.52\n101.425079\n19.253375\n0.050033\n951.962053\n..\n66.708\n1.521529\n\n\n1993 [YR1993]\n3.942972\n700741188106.189697\n2.276584\n10.46492\n4.63426\n20.759746\n10.313894\n0.004563\n10.503272\n11.684367\n...\n26.777385\n73.33788\n3.21\n97.131579\n19.599321\n1.014369\n1927.38079\n..\n67.109\n1.927923\n\n\n1994 [YR1994]\n22.343467\n857311065625.008423\n20.4134\n10.856697\n4.63426\n21.651462\n10.806746\n-0.211083\n9.513076\n4.006498\n...\n20.346224\n56.894342\n1.802522\n82.903345\n18.67476\n22.071544\n2075.888398\n..\n67.568\n2.016008\n\n\n1995 [YR1995]\n10.234972\n945056611637.28772\n8.526081\n10.072729\n4.3\n14.565137\n4.439145\n-2.357366\n7.528875\n-2.031661\n...\n30.684877\n58.121416\n1.29812\n60.237623\n16.98446\n36.640316\n66.007034\n..\n67.919\n1.862137\n\n\n1996 [YR1996]\n-1.841515\n927653254616.671265\n-3.332359\n9.925297\n4.226346\n13.036097\n3.118181\n-2.733687\n6.73021\n-0.419864\n...\n5.594315\n60.31888\n2.299138\n59.717639\n15.635591\n42.413974\n15.757666\n..\n68.409\n1.654843\n\n\n1997 [YR1997]\n2.602276\n951793349347.319824\n1.074574\n10.101266\n4.226346\n12.571894\n2.413354\n-3.638262\n6.98365\n11.019289\n...\n14.595077\n60.605713\n2.534234\n66.749705\n16.576209\n45.351868\n6.926713\n65.408845\n68.813\n1.577688\n\n\n1998 [YR1998]\n0.069725\n952456983222.324829\n-1.388904\n10.140675\n4.737338\n12.068306\n1.920681\n-4.051457\n7.0305\n4.908205\n...\n-0.056661\n61.118593\n1.421482\n67.166626\n16.438585\n46.800895\n3.195076\n77.616838\n69.189\n1.662292\n\n\n1999 [YR1999]\n-1.431744\n938820233736.090088\n-2.821739\n10.235938\n3.81\n11.179231\n0.949568\n-4.466605\n9.564898\n5.70629\n...\n-15.094145\n60.203657\n1.820315\n80.430831\n20.982166\n49.074692\n4.858447\n67.060917\n69.524\n1.645475\n\n\n2000 [YR2000]\n4.988207\n985650532531.96582\n3.56302\n10.576328\n3.88\n14.406587\n3.82059\n-4.047742\n10.188048\n12.860549\n...\n10.798587\n58.251861\n3.846752\n93.81461\n22.639761\n52.531583\n7.044141\n48.504728\n69.737\n1.730726\n\n\n2001 [YR2001]\n0.627269\n991833209374.473877\n-0.692973\n10.590223\n3.82\n14.050802\n3.455447\n-4.444786\n12.371711\n9.230527\n...\n3.331403\n57.713692\n2.063714\n78.8293\n26.936285\n56.124932\n6.840359\n45.637819\n70.195\n1.951882\n\n\n2002 [YR2002]\n3.063534\n1022218356852.27124\n1.770189\n10.520852\n3.71\n15.940651\n5.409859\n-1.845259\n14.23059\n6.476822\n...\n-13.307269\n57.348145\n3.12235\n61.838965\n27.618357\n60.867581\n8.450164\n48.340437\n70.41\n1.895771\n\n\n2003 [YR2003]\n1.502985\n1037582148869.364014\n0.306602\n10.606714\n3.805\n16.956031\n6.334227\n0.392877\n15.180784\n11.015939\n...\n-0.483497\n56.357828\n0.99132\n49.88965\n28.140385\n69.824196\n14.71492\n46.447399\n70.72\n1.503478\n\n\n2004 [YR2004]\n5.552885\n1095197889219.615356\n4.357048\n11.377591\n3.9\n19.429024\n8.007024\n1.338631\n16.545762\n14.47378\n...\n10.364045\n54.920471\n5.009556\n47.732291\n29.678252\n74.430628\n6.597185\n43.779153\n71.131\n1.461268\n\n\n2005 [YR2005]\n2.979986\n1127834634196.470947\n1.835894\n10.939681\n4.39\n18.653301\n7.767017\n1.309885\n15.243829\n9.644174\n...\n7.461333\n56.075892\n3.660628\n44.597247\n27.086795\n79.543667\n6.869537\n44.635169\n71.753\n1.524013\n\n\n2006 [YR2006]\n5.511656\n1189997001521.183105\n4.381024\n10.694232\n4.79\n18.882324\n8.194657\n0.97271\n14.374316\n4.837428\n...\n17.762585\n57.138127\n4.331245\n23.674668\n26.0417\n82.871431\n4.183568\n41.240326\n72.037\n1.481085\n\n\n2007 [YR2007]\n7.336246\n1277298110841.113525\n6.234203\n10.787366\n4.85\n19.766211\n8.920663\n-0.197097\n13.327675\n6.176102\n...\n19.557599\n57.726236\n5.826511\n21.76305\n25.292611\n85.889006\n3.641273\n35.022515\n72.365\n1.466292\n\n\n2008 [YR2008]\n3.967407\n1327973724852.464111\n2.946004\n10.934593\n5.16\n19.710147\n8.822983\n-2.099337\n13.534001\n0.409251\n...\n17.02571\n56.804862\n4.824019\n18.909826\n27.257569\n90.766294\n5.678594\n35.366758\n72.715\n1.441924\n\n\n2009 [YR2009]\n2.614918\n1362699152991.031738\n1.641493\n10.713263\n5.4\n16.751023\n6.035203\n-1.759358\n10.851371\n-9.247066\n...\n-7.601967\n59.145059\n2.066824\n16.679035\n22.105976\n95.202982\n4.888035\n34.79201\n72.948\n1.538626\n\n\n2010 [YR2010]\n6.591607\n1452522924201.781006\n5.594955\n11.304381\n5.39\n18.369848\n7.060105\n-3.925945\n10.865585\n11.721722\n...\n33.639025\n57.612922\n5.803653\n22.695113\n22.772178\n100.0\n5.038727\n29.115806\n73.182\n1.539407\n\n\n2011 [YR2011]\n5.268298\n1529046157645.46875\n4.295312\n11.092797\n5.49\n19.09187\n8.005242\n-3.194618\n11.582513\n4.811946\n...\n9.393263\n57.568169\n3.457822\n11.971338\n23.934405\n106.63645\n6.63645\n32.83346\n73.343\n1.411851\n\n\n2012 [YR2012]\n1.919199\n1558391590396.876709\n1.005694\n10.909943\n5.54\n18.130471\n7.256724\n-3.759415\n11.877539\n0.707642\n...\n1.130852\n58.733603\n2.90291\n8.731629\n25.114274\n112.398549\n5.403499\n26.582091\n73.552\n1.378656\n\n\n2013 [YR2013]\n4.555718\n1629387512468.469971\n3.651743\n10.641773\n5.541951\n18.407466\n7.759866\n-3.574221\n11.742231\n1.830295\n...\n6.669679\n59.678758\n2.753828\n9.338065\n25.785957\n119.372104\n6.204311\n18.498844\n73.918\n1.329446\n\n\n2014 [YR2014]\n-0.309365\n1624346764590.701172\n-1.160888\n10.670304\n5.67323\n16.440768\n5.761231\n-4.49883\n11.011943\n-1.56968\n...\n-2.271896\n61.250974\n0.985403\n16.001568\n24.685406\n126.927213\n6.32904\n22.403672\n74.306\n1.330244\n\n\n2015 [YR2015]\n-3.754106\n1563367061772.040039\n-4.564905\n10.580522\n6.09622\n14.807988\n4.221738\n-3.518392\n12.900191\n6.819564\n...\n-14.190637\n62.307867\n-2.733762\n14.683473\n26.953626\n138.388615\n9.029901\n33.832344\n74.332\n1.365517\n\n\n2016 [YR2016]\n-3.184861\n1513575990224.013184\n-3.967103\n10.526079\n6.24005\n13.712673\n3.167103\n-1.700144\n12.466679\n0.863126\n...\n-10.342933\n63.203696\n-2.221344\n15.672398\n24.533682\n150.482594\n8.739144\n40.698361\n74.442\n1.347975\n\n\n2017 [YR2017]\n1.233663\n1532248417516.406494\n0.434795\n10.434139\n6.285939\n13.836443\n3.427247\n-1.227876\n12.518968\n4.908793\n...\n6.716941\n63.338673\n0.765663\n14.014606\n24.319734\n155.668786\n3.446373\n41.713808\n74.827\n1.414022\n\n\n2018 [YR2018]\n0.286859\n1536643803926.11792\n-0.506036\n10.52732\n6.285939\n13.070873\n2.59096\n-2.858416\n14.634999\n4.053084\n...\n7.742779\n62.65335\n2.087144\n17.838849\n28.876203\n161.373814\n3.66485\n33.102334\n75.109\n1.469678\n\n\n2019 [YR2019]\n2.046424\n1568090053916.5625\n1.267626\n10.447298\n6.285939\n12.887523\n2.448877\n-3.631138\n14.122919\n-2.561421\n...\n1.332566\n63.067849\n1.512102\n22.186156\n28.890258\n167.39786\n3.732976\n31.903073\n75.338\n1.382797\n\n\n2020 [YR2020]\n-5.484743\n1482084349590.028809\n-6.11135\n11.215103\n6.285939\n15.333269\n4.066587\n-1.910942\n16.453552\n-2.290906\n...\n-9.476639\n61.448445\n-3.738107\n19.398287\n32.302079\n172.774291\n3.211768\n21.19718\n74.009\n1.32666\n\n\n2021 [YR2021]\n..\n..\n..\n..\n..\n..\n..\n-2.810205\n19.561676\n5.867547\n...\n12.028849\n57.755609\n5.223914\n21.742344\n38.181427\n187.117425\n8.30166\n16.728245\n72.75\n1.163682\n\n\n2022 [YR2022]\n..\n..\n..\n..\n..\n..\n..\n-2.968467\n20.045538\n5.544349\n...\n0.808071\n58.909987\n4.158663\n..\n39.339994\n204.482121\n9.280106\n28.736505\n..\n1.053422\n\n\n\n\n50 rows × 33 columns\n\n\n\n\nprint(df.isnull().sum())\n\nSeries Name\nAdjusted net national income (annual % growth)                        0\nAdjusted net national income (constant 2015 US$)                      0\nAdjusted net national income per capita (annual % growth)             0\nAdjusted savings: consumption of fixed capital (% of GNI)             0\nAdjusted savings: education expenditure (% of GNI)                    0\nAdjusted savings: gross savings (% of GNI)                            0\nAdjusted savings: net national savings (% of GNI)                     0\nCurrent account balance (% of GDP)                                    0\nExports of goods and services (% of GDP)                              0\nExports of goods and services (annual % growth)                       0\nExternal debt stocks (% of GNI)                                       0\nFinal consumption expenditure (% of GDP)                              0\nFinal consumption expenditure (annual % growth)                       0\nForeign direct investment, net inflows (% of GDP)                     0\nForeign direct investment, net outflows (% of GDP)                    0\nGDP growth (annual %)                                                 0\nGDP per capita growth (annual %)                                      0\nGeneral government final consumption expenditure (% of GDP)           0\nGeneral government final consumption expenditure (annual % growth)    0\nGNI growth (annual %)                                                 0\nGoods exports (BoP, current US$)                                      0\nGoods imports (BoP, current US$)                                      0\nImports of goods and services (% of GDP)                              0\nImports of goods and services (annual % growth)                       0\nServices, value added (% of GDP)                                      0\nServices, value added (annual % growth)                               0\nShort-term debt (% of total reserves)                                 0\nTrade (% of GDP)                                                      0\nConsumer price index (2010 = 100)                                     0\nInflation, consumer prices (annual %)                                 0\nReal interest rate (%)                                                0\nLife expectancy at birth, total (years)                               0\nMilitary expenditure (% of GDP)                                       0\ndtype: int64\n\n\n\n# creating a new index rather than treating it\nnew_index = range(1973, 2023)\n\n# Reset the index with the new range\ndf = df.reset_index(drop=True)\ndf.index = new_index\ndf.index.name = \"year\"\n\ndf.shape\n\n(50, 33)\n\n\n\ncols= ['adj_NNI_g', 'adj_NNI_c', 'adj_savings_fix_cap_GNI', 'adj_savings_edu_GNI', 'adj_NNS_GNI',\n                    'curr_acc_bal', 'ex_imp_gdp', 'ex_imp_growth', 'ex_debt_shocks', 'final_consump_exp_gdp',\n                    'final_consump_exp_growth', 'fdi_net_inflows', 'fdi_net_outflows', 'gdp_growth', 'gdp_per_capita_growth',\n                    'gener_govt_fin_consump_exp', 'gni_growth', 'goods_exp_bop','goods_imp_bop', 'imports_goods_services_gdp', 'imports_goods_services_growth','services_gdp', 'services_growth', \n                       'short_term_debt_tot_reserves','trade_gdp', 'cpi', 'inflation','real_interest_rate','lending_interest_rate','life_exp_birth','expense_gdp','interest_payments', 'military expenditure']\n\ndf.columns = cols\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\nshort_term_debt_tot_reserves\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1973\n13.768581\n467846269164.406311\n11.055141\n10.011622\n3\n..\n..\n..\n7.844873\n14.25471\n...\n20.411407\n38.714484\n15.641424\n27.67079\n16.856189\n..\n..\n..\n58.472\n2.154651\n\n\n1974\n6.001818\n495925550202.552917\n3.505249\n10.094172\n3.599282\n..\n..\n..\n7.673128\n2.333569\n...\n28.242083\n39.128857\n10.575694\n49.458973\n20.967778\n..\n..\n..\n58.881\n1.941353\n\n\n1975\n4.354146\n517518872431.296814\n1.92229\n10.601618\n3.599282\n21.837114\n11.238476\n-5.39304\n7.218007\n11.572719\n...\n-4.423988\n40.348724\n5.035089\n79.349955\n18.23433\n..\n..\n..\n59.353\n1.972144\n\n\n1976\n10.848967\n573664323409.741943\n8.273145\n10.379426\n2.9\n19.521246\n9.188402\n-4.256737\n7.013163\n-0.293096\n...\n-1.162956\n41.515167\n11.565964\n60.666442\n16.415548\n..\n..\n..\n59.792\n2.002753\n\n\n1977\n5.797912\n606924875688.783447\n3.334137\n10.187242\n3\n20.116438\n9.958663\n-2.863152\n7.245261\n-0.381964\n...\n-7.722505\n41.092072\n5.016698\n80.637467\n15.155249\n..\n..\n..\n60.24\n1.687726\n\n\n1978\n2.918624\n624638732409.052734\n0.515137\n10.449378\n3.2\n19.958701\n9.51755\n-3.493133\n6.692986\n13.251767\n...\n4.402968\n42.819387\n6.164438\n58.060904\n14.577888\n..\n..\n..\n60.72\n1.599672\n\n\n1979\n5.111081\n656564523644.556396\n2.66217\n10.504763\n3.2\n18.521608\n8.012211\n-4.7511\n7.24078\n9.299891\n...\n8.397001\n44.160915\n7.747477\n87.845074\n16.566883\n..\n..\n..\n61.253\n1.521932\n\n\n1980\n4.620195\n686899082972.884888\n2.189593\n11.660693\n3.5\n18.475111\n6.838826\n-5.40495\n8.962395\n22.614292\n...\n0.686537\n40.392161\n9.15\n196.931891\n20.155407\n0.0\n..\n..\n61.781\n1.138434\n\n\n1981\n-5.833894\n646826116981.289062\n-8.000325\n11.306024\n4\n19.443428\n8.111203\n-4.559422\n9.62284\n21.352797\n...\n-12.361319\n41.759968\n-2.48\n205.256486\n19.632924\n0.0\n101.725073\n..\n62.333\n1.143149\n\n\n1982\n-0.480225\n643719893121.052856\n-2.73152\n11.473882\n4.3\n16.120515\n4.660475\n-6.014062\n7.900485\n-9.191872\n...\n-6.004329\n42.419026\n2.11\n437.374535\n16.49117\n0.0\n100.543359\n..\n62.856\n1.303534\n\n\n1983\n-4.255332\n616327473273.99231\n-6.38421\n10.887567\n3.1\n14.142343\n3.287834\n-3.603356\n12.243756\n14.271464\n...\n-17.447496\n43.44155\n-0.53\n312.665288\n21.900353\n0.0\n135.027682\n..\n63.331\n1.25458\n\n\n1984\n6.50245\n656403861422.018921\n4.18656\n10.496707\n2.8\n16.707611\n6.223178\n0.017522\n15.035413\n21.983003\n...\n-2.983772\n43.328506\n5.35\n92.116004\n23.830075\n0.0\n192.121733\n..\n63.773\n1.199541\n\n\n1985\n5.710086\n693885084853.629028\n3.473204\n11.855392\n3.4\n20.166035\n8.316746\n-0.132777\n12.948579\n7.041871\n...\n0.053822\n41.515391\n6.94\n80.723745\n20.449767\n0.0\n225.989665\n..\n64.198\n1.429523\n\n\n1986\n10.457555\n766448499642.991577\n8.195164\n12.111642\n4.1\n17.922968\n5.823499\n-2.07072\n9.217279\n-10.574251\n...\n28.623922\n40.644701\n8.1\n115.215203\n15.860654\n0.0\n147.142826\n..\n64.64\n1.220389\n\n\n1987\n3.102682\n790228961641.504883\n1.059746\n11.600919\n4.228605\n22.668719\n11.064235\n-0.512971\n9.828482\n19.240199\n...\n-2.942933\n41.246413\n3.14\n164.398175\n16.262397\n0.0\n228.336163\n..\n65.08\n1.743994\n\n\n1988\n0.45584\n793831144009.251221\n-1.472105\n11.288813\n4.2\n24.938344\n13.663485\n1.349868\n11.667359\n13.066131\n...\n-1.110276\n44.780318\n2.33\n115.115561\n17.767245\n0.000002\n629.114509\n..\n65.454\n2.118072\n\n\n1989\n-5.855128\n747351312328.606812\n-7.604044\n10.584996\n4.549878\n33.988799\n23.294785\n0.24262\n8.92961\n5.060902\n...\n8.976805\n48.367309\n3.54\n186.125145\n14.390878\n0.000029\n1430.723725\n..\n65.868\n2.68625\n\n\n1990\n-13.45707\n646779722899.373413\n-15.009283\n11.372507\n4.63426\n19.470369\n8.115233\n-0.82217\n8.197238\n-4.917222\n...\n10.944542\n60.496606\n-0.76\n237.208689\n15.155603\n0.000893\n2947.732772\n..\n65.985\n2.363841\n\n\n1991\n2.850678\n665217330601.04541\n1.086602\n10.995749\n4.63426\n19.162232\n8.16256\n-0.355628\n8.677637\n-4.828384\n...\n11.096782\n60.549713\n1.96\n280.16399\n16.592078\n0.004756\n432.786662\n..\n66.31\n1.963333\n\n\n1992\n1.344214\n674159278342.075928\n-0.322753\n10.261218\n4.63426\n20.586744\n10.325337\n1.559017\n10.868312\n16.539064\n...\n4.523364\n68.357451\n1.52\n101.425079\n19.253375\n0.050033\n951.962053\n..\n66.708\n1.521529\n\n\n1993\n3.942972\n700741188106.189697\n2.276584\n10.46492\n4.63426\n20.759746\n10.313894\n0.004563\n10.503272\n11.684367\n...\n26.777385\n73.33788\n3.21\n97.131579\n19.599321\n1.014369\n1927.38079\n..\n67.109\n1.927923\n\n\n1994\n22.343467\n857311065625.008423\n20.4134\n10.856697\n4.63426\n21.651462\n10.806746\n-0.211083\n9.513076\n4.006498\n...\n20.346224\n56.894342\n1.802522\n82.903345\n18.67476\n22.071544\n2075.888398\n..\n67.568\n2.016008\n\n\n1995\n10.234972\n945056611637.28772\n8.526081\n10.072729\n4.3\n14.565137\n4.439145\n-2.357366\n7.528875\n-2.031661\n...\n30.684877\n58.121416\n1.29812\n60.237623\n16.98446\n36.640316\n66.007034\n..\n67.919\n1.862137\n\n\n1996\n-1.841515\n927653254616.671265\n-3.332359\n9.925297\n4.226346\n13.036097\n3.118181\n-2.733687\n6.73021\n-0.419864\n...\n5.594315\n60.31888\n2.299138\n59.717639\n15.635591\n42.413974\n15.757666\n..\n68.409\n1.654843\n\n\n1997\n2.602276\n951793349347.319824\n1.074574\n10.101266\n4.226346\n12.571894\n2.413354\n-3.638262\n6.98365\n11.019289\n...\n14.595077\n60.605713\n2.534234\n66.749705\n16.576209\n45.351868\n6.926713\n65.408845\n68.813\n1.577688\n\n\n1998\n0.069725\n952456983222.324829\n-1.388904\n10.140675\n4.737338\n12.068306\n1.920681\n-4.051457\n7.0305\n4.908205\n...\n-0.056661\n61.118593\n1.421482\n67.166626\n16.438585\n46.800895\n3.195076\n77.616838\n69.189\n1.662292\n\n\n1999\n-1.431744\n938820233736.090088\n-2.821739\n10.235938\n3.81\n11.179231\n0.949568\n-4.466605\n9.564898\n5.70629\n...\n-15.094145\n60.203657\n1.820315\n80.430831\n20.982166\n49.074692\n4.858447\n67.060917\n69.524\n1.645475\n\n\n2000\n4.988207\n985650532531.96582\n3.56302\n10.576328\n3.88\n14.406587\n3.82059\n-4.047742\n10.188048\n12.860549\n...\n10.798587\n58.251861\n3.846752\n93.81461\n22.639761\n52.531583\n7.044141\n48.504728\n69.737\n1.730726\n\n\n2001\n0.627269\n991833209374.473877\n-0.692973\n10.590223\n3.82\n14.050802\n3.455447\n-4.444786\n12.371711\n9.230527\n...\n3.331403\n57.713692\n2.063714\n78.8293\n26.936285\n56.124932\n6.840359\n45.637819\n70.195\n1.951882\n\n\n2002\n3.063534\n1022218356852.27124\n1.770189\n10.520852\n3.71\n15.940651\n5.409859\n-1.845259\n14.23059\n6.476822\n...\n-13.307269\n57.348145\n3.12235\n61.838965\n27.618357\n60.867581\n8.450164\n48.340437\n70.41\n1.895771\n\n\n2003\n1.502985\n1037582148869.364014\n0.306602\n10.606714\n3.805\n16.956031\n6.334227\n0.392877\n15.180784\n11.015939\n...\n-0.483497\n56.357828\n0.99132\n49.88965\n28.140385\n69.824196\n14.71492\n46.447399\n70.72\n1.503478\n\n\n2004\n5.552885\n1095197889219.615356\n4.357048\n11.377591\n3.9\n19.429024\n8.007024\n1.338631\n16.545762\n14.47378\n...\n10.364045\n54.920471\n5.009556\n47.732291\n29.678252\n74.430628\n6.597185\n43.779153\n71.131\n1.461268\n\n\n2005\n2.979986\n1127834634196.470947\n1.835894\n10.939681\n4.39\n18.653301\n7.767017\n1.309885\n15.243829\n9.644174\n...\n7.461333\n56.075892\n3.660628\n44.597247\n27.086795\n79.543667\n6.869537\n44.635169\n71.753\n1.524013\n\n\n2006\n5.511656\n1189997001521.183105\n4.381024\n10.694232\n4.79\n18.882324\n8.194657\n0.97271\n14.374316\n4.837428\n...\n17.762585\n57.138127\n4.331245\n23.674668\n26.0417\n82.871431\n4.183568\n41.240326\n72.037\n1.481085\n\n\n2007\n7.336246\n1277298110841.113525\n6.234203\n10.787366\n4.85\n19.766211\n8.920663\n-0.197097\n13.327675\n6.176102\n...\n19.557599\n57.726236\n5.826511\n21.76305\n25.292611\n85.889006\n3.641273\n35.022515\n72.365\n1.466292\n\n\n2008\n3.967407\n1327973724852.464111\n2.946004\n10.934593\n5.16\n19.710147\n8.822983\n-2.099337\n13.534001\n0.409251\n...\n17.02571\n56.804862\n4.824019\n18.909826\n27.257569\n90.766294\n5.678594\n35.366758\n72.715\n1.441924\n\n\n2009\n2.614918\n1362699152991.031738\n1.641493\n10.713263\n5.4\n16.751023\n6.035203\n-1.759358\n10.851371\n-9.247066\n...\n-7.601967\n59.145059\n2.066824\n16.679035\n22.105976\n95.202982\n4.888035\n34.79201\n72.948\n1.538626\n\n\n2010\n6.591607\n1452522924201.781006\n5.594955\n11.304381\n5.39\n18.369848\n7.060105\n-3.925945\n10.865585\n11.721722\n...\n33.639025\n57.612922\n5.803653\n22.695113\n22.772178\n100.0\n5.038727\n29.115806\n73.182\n1.539407\n\n\n2011\n5.268298\n1529046157645.46875\n4.295312\n11.092797\n5.49\n19.09187\n8.005242\n-3.194618\n11.582513\n4.811946\n...\n9.393263\n57.568169\n3.457822\n11.971338\n23.934405\n106.63645\n6.63645\n32.83346\n73.343\n1.411851\n\n\n2012\n1.919199\n1558391590396.876709\n1.005694\n10.909943\n5.54\n18.130471\n7.256724\n-3.759415\n11.877539\n0.707642\n...\n1.130852\n58.733603\n2.90291\n8.731629\n25.114274\n112.398549\n5.403499\n26.582091\n73.552\n1.378656\n\n\n2013\n4.555718\n1629387512468.469971\n3.651743\n10.641773\n5.541951\n18.407466\n7.759866\n-3.574221\n11.742231\n1.830295\n...\n6.669679\n59.678758\n2.753828\n9.338065\n25.785957\n119.372104\n6.204311\n18.498844\n73.918\n1.329446\n\n\n2014\n-0.309365\n1624346764590.701172\n-1.160888\n10.670304\n5.67323\n16.440768\n5.761231\n-4.49883\n11.011943\n-1.56968\n...\n-2.271896\n61.250974\n0.985403\n16.001568\n24.685406\n126.927213\n6.32904\n22.403672\n74.306\n1.330244\n\n\n2015\n-3.754106\n1563367061772.040039\n-4.564905\n10.580522\n6.09622\n14.807988\n4.221738\n-3.518392\n12.900191\n6.819564\n...\n-14.190637\n62.307867\n-2.733762\n14.683473\n26.953626\n138.388615\n9.029901\n33.832344\n74.332\n1.365517\n\n\n2016\n-3.184861\n1513575990224.013184\n-3.967103\n10.526079\n6.24005\n13.712673\n3.167103\n-1.700144\n12.466679\n0.863126\n...\n-10.342933\n63.203696\n-2.221344\n15.672398\n24.533682\n150.482594\n8.739144\n40.698361\n74.442\n1.347975\n\n\n2017\n1.233663\n1532248417516.406494\n0.434795\n10.434139\n6.285939\n13.836443\n3.427247\n-1.227876\n12.518968\n4.908793\n...\n6.716941\n63.338673\n0.765663\n14.014606\n24.319734\n155.668786\n3.446373\n41.713808\n74.827\n1.414022\n\n\n2018\n0.286859\n1536643803926.11792\n-0.506036\n10.52732\n6.285939\n13.070873\n2.59096\n-2.858416\n14.634999\n4.053084\n...\n7.742779\n62.65335\n2.087144\n17.838849\n28.876203\n161.373814\n3.66485\n33.102334\n75.109\n1.469678\n\n\n2019\n2.046424\n1568090053916.5625\n1.267626\n10.447298\n6.285939\n12.887523\n2.448877\n-3.631138\n14.122919\n-2.561421\n...\n1.332566\n63.067849\n1.512102\n22.186156\n28.890258\n167.39786\n3.732976\n31.903073\n75.338\n1.382797\n\n\n2020\n-5.484743\n1482084349590.028809\n-6.11135\n11.215103\n6.285939\n15.333269\n4.066587\n-1.910942\n16.453552\n-2.290906\n...\n-9.476639\n61.448445\n-3.738107\n19.398287\n32.302079\n172.774291\n3.211768\n21.19718\n74.009\n1.32666\n\n\n2021\n..\n..\n..\n..\n..\n..\n..\n-2.810205\n19.561676\n5.867547\n...\n12.028849\n57.755609\n5.223914\n21.742344\n38.181427\n187.117425\n8.30166\n16.728245\n72.75\n1.163682\n\n\n2022\n..\n..\n..\n..\n..\n..\n..\n-2.968467\n20.045538\n5.544349\n...\n0.808071\n58.909987\n4.158663\n..\n39.339994\n204.482121\n9.280106\n28.736505\n..\n1.053422\n\n\n\n\n50 rows × 33 columns\n\n\n\n\nvalue_to_replace = \"..\"\nfor col in df.columns:\n    df[col] = df[col].replace(value_to_replace, np.nan)\n\nmissing= df.isnull().sum()\n\n\nmissing_vals = pd.DataFrame({'Missing Values': missing.index, 'Missing Values Sum': missing.values})\nmissing_vals = missing_vals.sort_values(by='Missing Values Sum', ascending=False)\n\nprint(missing_vals)\n\n                   Missing Values  Missing Values Sum\n30                    expense_gdp                  24\n29                 life_exp_birth                   8\n28          lending_interest_rate                   7\n5                    curr_acc_bal                   4\n6                      ex_imp_gdp                   4\n0                       adj_NNI_g                   2\n1                       adj_NNI_c                   2\n21                   services_gdp                   2\n20  imports_goods_services_growth                   2\n7                   ex_imp_growth                   2\n4                     adj_NNS_GNI                   2\n3             adj_savings_edu_GNI                   2\n2         adj_savings_fix_cap_GNI                   2\n31              interest_payments                   1\n26                      inflation                   1\n10       final_consump_exp_growth                   1\n27             real_interest_rate                   0\n25                            cpi                   0\n24                      trade_gdp                   0\n23   short_term_debt_tot_reserves                   0\n22                services_growth                   0\n16                     gni_growth                   0\n19     imports_goods_services_gdp                   0\n18                  goods_imp_bop                   0\n17                  goods_exp_bop                   0\n15     gener_govt_fin_consump_exp                   0\n14          gdp_per_capita_growth                   0\n13                     gdp_growth                   0\n12               fdi_net_outflows                   0\n11                fdi_net_inflows                   0\n9           final_consump_exp_gdp                   0\n8                  ex_debt_shocks                   0\n32           military expenditure                   0\n\n\n\nfor cols in df.columns:\n    mean = df[cols].mean()\n    df[cols] = df[cols].fillna(mean)\n\n\nprint(df.isnull().sum())\n\nadj_NNI_g                        0\nadj_NNI_c                        0\nadj_savings_fix_cap_GNI          0\nadj_savings_edu_GNI              0\nadj_NNS_GNI                      0\ncurr_acc_bal                     0\nex_imp_gdp                       0\nex_imp_growth                    0\nex_debt_shocks                   0\nfinal_consump_exp_gdp            0\nfinal_consump_exp_growth         0\nfdi_net_inflows                  0\nfdi_net_outflows                 0\ngdp_growth                       0\ngdp_per_capita_growth            0\ngener_govt_fin_consump_exp       0\ngni_growth                       0\ngoods_exp_bop                    0\ngoods_imp_bop                    0\nimports_goods_services_gdp       0\nimports_goods_services_growth    0\nservices_gdp                     0\nservices_growth                  0\nshort_term_debt_tot_reserves     0\ntrade_gdp                        0\ncpi                              0\ninflation                        0\nreal_interest_rate               0\nlending_interest_rate            0\nlife_exp_birth                   0\nexpense_gdp                      0\ninterest_payments                0\nmilitary expenditure             0\ndtype: int64\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 1973 to 2022\nData columns (total 33 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   adj_NNI_g                      50 non-null     float64\n 1   adj_NNI_c                      50 non-null     float64\n 2   adj_savings_fix_cap_GNI        50 non-null     float64\n 3   adj_savings_edu_GNI            50 non-null     float64\n 4   adj_NNS_GNI                    50 non-null     float64\n 5   curr_acc_bal                   50 non-null     float64\n 6   ex_imp_gdp                     50 non-null     float64\n 7   ex_imp_growth                  50 non-null     float64\n 8   ex_debt_shocks                 50 non-null     float64\n 9   final_consump_exp_gdp          50 non-null     float64\n 10  final_consump_exp_growth       50 non-null     float64\n 11  fdi_net_inflows                50 non-null     float64\n 12  fdi_net_outflows               50 non-null     float64\n 13  gdp_growth                     50 non-null     float64\n 14  gdp_per_capita_growth          50 non-null     float64\n 15  gener_govt_fin_consump_exp     50 non-null     float64\n 16  gni_growth                     50 non-null     float64\n 17  goods_exp_bop                  50 non-null     float64\n 18  goods_imp_bop                  50 non-null     float64\n 19  imports_goods_services_gdp     50 non-null     float64\n 20  imports_goods_services_growth  50 non-null     float64\n 21  services_gdp                   50 non-null     float64\n 22  services_growth                50 non-null     float64\n 23  short_term_debt_tot_reserves   50 non-null     float64\n 24  trade_gdp                      50 non-null     float64\n 25  cpi                            50 non-null     float64\n 26  inflation                      50 non-null     float64\n 27  real_interest_rate             50 non-null     float64\n 28  lending_interest_rate          50 non-null     float64\n 29  life_exp_birth                 50 non-null     float64\n 30  expense_gdp                    50 non-null     float64\n 31  interest_payments              50 non-null     float64\n 32  military expenditure           50 non-null     float64\ndtypes: float64(33)\nmemory usage: 13.0 KB\n\n\n\ndf['year'] = df.index\n\n\ndf[\"gdp_growth\"].min()\n\n0.13451296526661213\n\n\n\ndf[\"gdp_growth\"].max()\n\n5.033917141191494\n\n\n\nbins = [0, 2, 5, 7, float('inf')]\n\n\nlabels = ['Low Growth', 'Moderate Growth', 'High Growth', 'Very High Growth']\n\n\ndf['labels'] = pd.cut(df['gdp_growth'], bins=bins, labels=labels)\n\n\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear\nlabels\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1973\n13.768581\n4.678463e+11\n11.055141\n10.011622\n3.000000\n17.787293\n7.006470\n-2.259920\n7.844873\n14.254710\n...\n15.641424\n27.670790\n16.856189\n6.731385e+01\n280.265403\n38.892255\n58.472000\n2.154651\n1973\nLow Growth\n\n\n1974\n6.001818\n4.959256e+11\n3.505249\n10.094172\n3.599282\n17.787293\n7.006470\n-2.259920\n7.673128\n2.333569\n...\n10.575694\n49.458973\n20.967778\n6.731385e+01\n280.265403\n38.892255\n58.881000\n1.941353\n1974\nLow Growth\n\n\n1975\n4.354146\n5.175189e+11\n1.922290\n10.601618\n3.599282\n21.837114\n11.238476\n-5.393040\n7.218007\n11.572719\n...\n5.035089\n79.349955\n18.234330\n6.731385e+01\n280.265403\n38.892255\n59.353000\n1.972144\n1975\nLow Growth\n\n\n1976\n10.848967\n5.736643e+11\n8.273145\n10.379426\n2.900000\n19.521246\n9.188402\n-4.256737\n7.013163\n-0.293096\n...\n11.565964\n60.666442\n16.415548\n6.731385e+01\n280.265403\n38.892255\n59.792000\n2.002753\n1976\nLow Growth\n\n\n1977\n5.797912\n6.069249e+11\n3.334137\n10.187242\n3.000000\n20.116438\n9.958663\n-2.863152\n7.245261\n-0.381964\n...\n5.016698\n80.637467\n15.155249\n6.731385e+01\n280.265403\n38.892255\n60.240000\n1.687726\n1977\nLow Growth\n\n\n1978\n2.918624\n6.246387e+11\n0.515137\n10.449378\n3.200000\n19.958701\n9.517550\n-3.493133\n6.692986\n13.251767\n...\n6.164438\n58.060904\n14.577888\n6.731385e+01\n280.265403\n38.892255\n60.720000\n1.599672\n1978\nLow Growth\n\n\n1979\n5.111081\n6.565645e+11\n2.662170\n10.504763\n3.200000\n18.521608\n8.012211\n-4.751100\n7.240780\n9.299891\n...\n7.747477\n87.845074\n16.566883\n6.731385e+01\n280.265403\n38.892255\n61.253000\n1.521932\n1979\nLow Growth\n\n\n1980\n4.620195\n6.868991e+11\n2.189593\n11.660693\n3.500000\n18.475111\n6.838826\n-5.404950\n8.962395\n22.614292\n...\n9.150000\n196.931891\n20.155407\n3.572040e-10\n280.265403\n38.892255\n61.781000\n1.138434\n1980\nLow Growth\n\n\n1981\n-5.833894\n6.468261e+11\n-8.000325\n11.306024\n4.000000\n19.443428\n8.111203\n-4.559422\n9.622840\n21.352797\n...\n-2.480000\n205.256486\n19.632924\n7.205700e-10\n101.725073\n38.892255\n62.333000\n1.143149\n1981\nLow Growth\n\n\n1982\n-0.480225\n6.437199e+11\n-2.731520\n11.473882\n4.300000\n16.120515\n4.660475\n-6.014062\n7.900485\n-9.191872\n...\n2.110000\n437.374535\n16.491170\n1.445055e-09\n100.543359\n38.892255\n62.856000\n1.303534\n1982\nLow Growth\n\n\n1983\n-4.255332\n6.163275e+11\n-6.384210\n10.887567\n3.100000\n14.142343\n3.287834\n-3.603356\n12.243756\n14.271464\n...\n-0.530000\n312.665288\n21.900353\n3.396280e-09\n135.027682\n38.892255\n63.331000\n1.254580\n1983\nLow Growth\n\n\n1984\n6.502450\n6.564039e+11\n4.186560\n10.496707\n2.800000\n16.707611\n6.223178\n0.017522\n15.035413\n21.983003\n...\n5.350000\n92.116004\n23.830075\n9.921272e-09\n192.121733\n38.892255\n63.773000\n1.199541\n1984\nLow Growth\n\n\n1985\n5.710086\n6.938851e+11\n3.473204\n11.855392\n3.400000\n20.166035\n8.316746\n-0.132777\n12.948579\n7.041871\n...\n6.940000\n80.723745\n20.449767\n3.234232e-08\n225.989665\n38.892255\n64.198000\n1.429523\n1985\nLow Growth\n\n\n1986\n10.457555\n7.664485e+11\n8.195164\n12.111642\n4.100000\n17.922968\n5.823499\n-2.070720\n9.217279\n-10.574251\n...\n8.100000\n115.215203\n15.860654\n7.993173e-08\n147.142826\n38.892255\n64.640000\n1.220389\n1986\nLow Growth\n\n\n1987\n3.102682\n7.902290e+11\n1.059746\n11.600919\n4.228605\n22.668719\n11.064235\n-0.512971\n9.828482\n19.240199\n...\n3.140000\n164.398175\n16.262397\n2.624448e-07\n228.336163\n38.892255\n65.080000\n1.743994\n1987\nLow Growth\n\n\n1988\n0.455840\n7.938311e+11\n-1.472105\n11.288813\n4.200000\n24.938344\n13.663485\n1.349868\n11.667359\n13.066131\n...\n2.330000\n115.115561\n17.767245\n1.913523e-06\n629.114509\n38.892255\n65.454000\n2.118072\n1988\nLow Growth\n\n\n1989\n-5.855128\n7.473513e+11\n-7.604044\n10.584996\n4.549878\n33.988799\n23.294785\n0.242620\n8.929610\n5.060902\n...\n3.540000\n186.125145\n14.390878\n2.929075e-05\n1430.723725\n38.892255\n65.868000\n2.686250\n1989\nLow Growth\n\n\n1990\n-13.457070\n6.467797e+11\n-15.009283\n11.372507\n4.634260\n19.470369\n8.115233\n-0.822170\n8.197238\n-4.917222\n...\n-0.760000\n237.208689\n15.155603\n8.927038e-04\n2947.732772\n38.892255\n65.985000\n2.363841\n1990\nLow Growth\n\n\n1991\n2.850678\n6.652173e+11\n1.086602\n10.995749\n4.634260\n19.162232\n8.162560\n-0.355628\n8.677637\n-4.828384\n...\n1.960000\n280.163990\n16.592078\n4.756207e-03\n432.786662\n38.892255\n66.310000\n1.963333\n1991\nLow Growth\n\n\n1992\n1.344214\n6.741593e+11\n-0.322753\n10.261218\n4.634260\n20.586744\n10.325337\n1.559017\n10.868312\n16.539064\n...\n1.520000\n101.425079\n19.253375\n5.003349e-02\n951.962053\n38.892255\n66.708000\n1.521529\n1992\nLow Growth\n\n\n1993\n3.942972\n7.007412e+11\n2.276584\n10.464920\n4.634260\n20.759746\n10.313894\n0.004563\n10.503272\n11.684367\n...\n3.210000\n97.131579\n19.599321\n1.014369e+00\n1927.380790\n38.892255\n67.109000\n1.927923\n1993\nLow Growth\n\n\n1994\n22.343467\n8.573111e+11\n20.413400\n10.856697\n4.634260\n21.651462\n10.806746\n-0.211083\n9.513076\n4.006498\n...\n1.802522\n82.903345\n18.674760\n2.207154e+01\n2075.888398\n38.892255\n67.568000\n2.016008\n1994\nLow Growth\n\n\n1995\n10.234972\n9.450566e+11\n8.526081\n10.072729\n4.300000\n14.565137\n4.439145\n-2.357366\n7.528875\n-2.031661\n...\n1.298120\n60.237623\n16.984460\n3.664032e+01\n66.007034\n38.892255\n67.919000\n1.862137\n1995\nLow Growth\n\n\n1996\n-1.841515\n9.276533e+11\n-3.332359\n9.925297\n4.226346\n13.036097\n3.118181\n-2.733687\n6.730210\n-0.419864\n...\n2.299138\n59.717639\n15.635591\n4.241397e+01\n15.757666\n38.892255\n68.409000\n1.654843\n1996\nLow Growth\n\n\n1997\n2.602276\n9.517933e+11\n1.074574\n10.101266\n4.226346\n12.571894\n2.413354\n-3.638262\n6.983650\n11.019289\n...\n2.534234\n66.749705\n16.576209\n4.535187e+01\n6.926713\n65.408845\n68.813000\n1.577688\n1997\nModerate Growth\n\n\n1998\n0.069725\n9.524570e+11\n-1.388904\n10.140675\n4.737338\n12.068306\n1.920681\n-4.051457\n7.030500\n4.908205\n...\n1.421482\n67.166626\n16.438585\n4.680090e+01\n3.195076\n77.616838\n69.189000\n1.662292\n1998\nModerate Growth\n\n\n1999\n-1.431744\n9.388202e+11\n-2.821739\n10.235938\n3.810000\n11.179231\n0.949568\n-4.466605\n9.564898\n5.706290\n...\n1.820315\n80.430831\n20.982166\n4.907469e+01\n4.858447\n67.060917\n69.524000\n1.645475\n1999\nModerate Growth\n\n\n2000\n4.988207\n9.856505e+11\n3.563020\n10.576328\n3.880000\n14.406587\n3.820590\n-4.047742\n10.188048\n12.860549\n...\n3.846752\n93.814610\n22.639761\n5.253158e+01\n7.044141\n48.504728\n69.737000\n1.730726\n2000\nHigh Growth\n\n\n2001\n0.627269\n9.918332e+11\n-0.692973\n10.590223\n3.820000\n14.050802\n3.455447\n-4.444786\n12.371711\n9.230527\n...\n2.063714\n78.829300\n26.936285\n5.612493e+01\n6.840359\n45.637819\n70.195000\n1.951882\n2001\nModerate Growth\n\n\n2002\n3.063534\n1.022218e+12\n1.770189\n10.520852\n3.710000\n15.940651\n5.409859\n-1.845259\n14.230590\n6.476822\n...\n3.122350\n61.838965\n27.618357\n6.086758e+01\n8.450164\n48.340437\n70.410000\n1.895771\n2002\nModerate Growth\n\n\n2003\n1.502985\n1.037582e+12\n0.306602\n10.606714\n3.805000\n16.956031\n6.334227\n0.392877\n15.180784\n11.015939\n...\n0.991320\n49.889650\n28.140385\n6.982420e+01\n14.714920\n46.447399\n70.720000\n1.503478\n2003\nLow Growth\n\n\n2004\n5.552885\n1.095198e+12\n4.357048\n11.377591\n3.900000\n19.429024\n8.007024\n1.338631\n16.545762\n14.473780\n...\n5.009556\n47.732291\n29.678252\n7.443063e+01\n6.597185\n43.779153\n71.131000\n1.461268\n2004\nModerate Growth\n\n\n2005\n2.979986\n1.127835e+12\n1.835894\n10.939681\n4.390000\n18.653301\n7.767017\n1.309885\n15.243829\n9.644174\n...\n3.660628\n44.597247\n27.086795\n7.954367e+01\n6.869537\n44.635169\n71.753000\n1.524013\n2005\nLow Growth\n\n\n2006\n5.511656\n1.189997e+12\n4.381024\n10.694232\n4.790000\n18.882324\n8.194657\n0.972710\n14.374316\n4.837428\n...\n4.331245\n23.674668\n26.041700\n8.287143e+01\n4.183568\n41.240326\n72.037000\n1.481085\n2006\nLow Growth\n\n\n2007\n7.336246\n1.277298e+12\n6.234203\n10.787366\n4.850000\n19.766211\n8.920663\n-0.197097\n13.327675\n6.176102\n...\n5.826511\n21.763050\n25.292611\n8.588901e+01\n3.641273\n35.022515\n72.365000\n1.466292\n2007\nModerate Growth\n\n\n2008\n3.967407\n1.327974e+12\n2.946004\n10.934593\n5.160000\n19.710147\n8.822983\n-2.099337\n13.534001\n0.409251\n...\n4.824019\n18.909826\n27.257569\n9.076629e+01\n5.678594\n35.366758\n72.715000\n1.441924\n2008\nModerate Growth\n\n\n2009\n2.614918\n1.362699e+12\n1.641493\n10.713263\n5.400000\n16.751023\n6.035203\n-1.759358\n10.851371\n-9.247066\n...\n2.066824\n16.679035\n22.105976\n9.520298e+01\n4.888035\n34.792010\n72.948000\n1.538626\n2009\nLow Growth\n\n\n2010\n6.591607\n1.452523e+12\n5.594955\n11.304381\n5.390000\n18.369848\n7.060105\n-3.925945\n10.865585\n11.721722\n...\n5.803653\n22.695113\n22.772178\n1.000000e+02\n5.038727\n29.115806\n73.182000\n1.539407\n2010\nModerate Growth\n\n\n2011\n5.268298\n1.529046e+12\n4.295312\n11.092797\n5.490000\n19.091870\n8.005242\n-3.194618\n11.582513\n4.811946\n...\n3.457822\n11.971338\n23.934405\n1.066364e+02\n6.636450\n32.833460\n73.343000\n1.411851\n2011\nModerate Growth\n\n\n2012\n1.919199\n1.558392e+12\n1.005694\n10.909943\n5.540000\n18.130471\n7.256724\n-3.759415\n11.877539\n0.707642\n...\n2.902910\n8.731629\n25.114274\n1.123985e+02\n5.403499\n26.582091\n73.552000\n1.378656\n2012\nModerate Growth\n\n\n2013\n4.555718\n1.629388e+12\n3.651743\n10.641773\n5.541951\n18.407466\n7.759866\n-3.574221\n11.742231\n1.830295\n...\n2.753828\n9.338065\n25.785957\n1.193721e+02\n6.204311\n18.498844\n73.918000\n1.329446\n2013\nModerate Growth\n\n\n2014\n-0.309365\n1.624347e+12\n-1.160888\n10.670304\n5.673230\n16.440768\n5.761231\n-4.498830\n11.011943\n-1.569680\n...\n0.985403\n16.001568\n24.685406\n1.269272e+02\n6.329040\n22.403672\n74.306000\n1.330244\n2014\nModerate Growth\n\n\n2015\n-3.754106\n1.563367e+12\n-4.564905\n10.580522\n6.096220\n14.807988\n4.221738\n-3.518392\n12.900191\n6.819564\n...\n-2.733762\n14.683473\n26.953626\n1.383886e+02\n9.029901\n33.832344\n74.332000\n1.365517\n2015\nModerate Growth\n\n\n2016\n-3.184861\n1.513576e+12\n-3.967103\n10.526079\n6.240050\n13.712673\n3.167103\n-1.700144\n12.466679\n0.863126\n...\n-2.221344\n15.672398\n24.533682\n1.504826e+02\n8.739144\n40.698361\n74.442000\n1.347975\n2016\nModerate Growth\n\n\n2017\n1.233663\n1.532248e+12\n0.434795\n10.434139\n6.285939\n13.836443\n3.427247\n-1.227876\n12.518968\n4.908793\n...\n0.765663\n14.014606\n24.319734\n1.556688e+02\n3.446373\n41.713808\n74.827000\n1.414022\n2017\nModerate Growth\n\n\n2018\n0.286859\n1.536644e+12\n-0.506036\n10.527320\n6.285939\n13.070873\n2.590960\n-2.858416\n14.634999\n4.053084\n...\n2.087144\n17.838849\n28.876203\n1.613738e+02\n3.664850\n33.102334\n75.109000\n1.469678\n2018\nModerate Growth\n\n\n2019\n2.046424\n1.568090e+12\n1.267626\n10.447298\n6.285939\n12.887523\n2.448877\n-3.631138\n14.122919\n-2.561421\n...\n1.512102\n22.186156\n28.890258\n1.673979e+02\n3.732976\n31.903073\n75.338000\n1.382797\n2019\nModerate Growth\n\n\n2020\n-5.484743\n1.482084e+12\n-6.111350\n11.215103\n6.285939\n15.333269\n4.066587\n-1.910942\n16.453552\n-2.290906\n...\n-3.738107\n19.398287\n32.302079\n1.727743e+02\n3.211768\n21.197180\n74.009000\n1.326660\n2020\nModerate Growth\n\n\n2021\n2.858273\n9.927705e+11\n1.270081\n10.750257\n4.457679\n17.787293\n7.006470\n-2.810205\n19.561676\n5.867547\n...\n5.223914\n21.742344\n38.181427\n1.871174e+02\n8.301660\n16.728245\n72.750000\n1.163682\n2021\nModerate Growth\n\n\n2022\n2.858273\n9.927705e+11\n1.270081\n10.750257\n4.457679\n17.787293\n7.006470\n-2.968467\n20.045538\n5.544349\n...\n4.158663\n84.382637\n39.339994\n2.044821e+02\n9.280106\n28.736505\n68.136286\n1.053422\n2022\nModerate Growth\n\n\n\n\n50 rows × 35 columns\n\n\n\n\ncsv_file='../data/brazil.csv'\ndf.to_csv(csv_file, index=False)"
  },
  {
    "objectID": "codes/reddit-api-v2.html",
    "href": "codes/reddit-api-v2.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "#!pip install spacy\n#!python -m spacy download en_core_web_sm\n#nltk.download('wordnet')\n#nltk.download('omw-1.4')\nfrom pprint import pprint\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport praw\nfrom praw.models import MoreComments\nfrom nltk.sentiment import SentimentIntensityAnalyzer as SIA\n\n\nuser_agent='Sheeba_Economic'\nreddit= praw.Reddit(\n    client_id=\"rszab0dBkcT7NdZr6MftpQ\",\n    client_secret=\"mBFjTSN3YXoSimkU7eZ1H0SoD-f2Yw\",\n    user_agent=user_agent)\n\n\nposts = []\nfor submission in reddit.subreddit(\"Brics\").top(\"all\"):\n    for top_level_comment in submission.comments:\n        if isinstance(top_level_comment, praw.models.MoreComments):\n            continue\n        posts.append(top_level_comment.body)\n     \n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_62175/138909273.py:2: DeprecationWarning: Positional arguments for 'BaseListingMixin.top' will no longer be supported in PRAW 8.\nCall this function with 'time_filter' as a keyword argument.\n  for submission in reddit.subreddit(\"Brics\").top(\"all\"):\n\n\n\ndf = pd.DataFrame(posts, columns=[\"body\"])\n\n\ndf\n\n\n\n\n\n\n\n\nbody\n\n\n\n\n0\nBurn him with his flag 🤬\n\n\n1\nThis plan is to kill the Petro Dollar run and ...\n\n\n2\nIt’s difficult to know what’s going to come ou...\n\n\n3\nThere is a lot to unpack as to what BRICS woul...\n\n\n4\nNice that you \"feel\" that way. That's what BRI...\n\n\n...\n...\n\n\n115\nWell. I see it’s now been 9 years. Here’s the ...\n\n\n116\nBITCHES!\\n\\nLOL\n\n\n117\nOK, not a trader. But I would think that if th...\n\n\n118\nLol the USA has the most gold reserves in th...\n\n\n119\nWhen Brics is generally accepted.....then othe...\n\n\n\n\n120 rows × 1 columns\n\n\n\n\nimport string\nimport re\nfrom nltk.corpus import stopwords\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\n\n# Download necessary NLTK resources\n#nltk.download('punkt')\n#nltk.download('stopwords')\n\ndef clean_string(text):\n    # Lowercase the text\n    text = text.lower()\n    \n    # Replace non-standard single quotation marks with regular single quotation marks\n    text = text.replace('’', \"'\")\n    \n    # Remove emojis\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n                           u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n                           u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n                           u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n                           u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n                           u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n                           u\"\\U0001F004-\\U0001F0CF\"  # Miscellaneous Symbols and Pictographs\n                           u\"\\U0001F0D0-\\U0001F0FF\"  # Emoticons\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # Regional Indicator Symbols\n                           u\"\\U0001F200-\\U0001F251\"  # Enclosed Ideographic Supplement\n                           \"]+\", flags=re.UNICODE)\n    text = emoji_pattern.sub(r'', text)  # Remove emojis\n    \n    # Remove line breaks\n    text = text.replace('\\n', ' ')\n    \n    # Remove punctuation\n    text = ''.join([char for char in text if char not in string.punctuation])\n    \n    # Tokenize the text\n    words = nltk.word_tokenize(text)\n    \n    # Remove stopwords\n    words = [word for word in words if word not in stopwords.words('english')]\n    \n    # Rejoin the words into a cleaned string\n    cleaned_text = ' '.join(words)\n    \n    return cleaned_text\n\n\n\ndf['cleaned_tweets'] = df['body'].apply(clean_string)\n\n\ndf\n\n\n\n\n\n\n\n\nbody\ncleaned_tweets\n\n\n\n\n0\nBurn him with his flag 🤬\nburn flag\n\n\n1\nThis plan is to kill the Petro Dollar run and ...\nplan kill petro dollar run manipulated western...\n\n\n2\nIt’s difficult to know what’s going to come ou...\ndifficult know whats going come summit next we...\n\n\n3\nThere is a lot to unpack as to what BRICS woul...\nlot unpack brics would bring table officially ...\n\n\n4\nNice that you \"feel\" that way. That's what BRI...\nnice feel way thats brics supped make feel lik...\n\n\n...\n...\n...\n\n\n115\nWell. I see it’s now been 9 years. Here’s the ...\nwell see 9 years heres latest subject httpswww...\n\n\n116\nBITCHES!\\n\\nLOL\nbitches lol\n\n\n117\nOK, not a trader. But I would think that if th...\nok trader would think new currency starts lot ...\n\n\n118\nLol the USA has the most gold reserves in th...\nlol usa gold reserves world brics silly happen...\n\n\n119\nWhen Brics is generally accepted.....then othe...\nbrics generally acceptedthen currency becomes ...\n\n\n\n\n120 rows × 2 columns\n\n\n\n\ndf2=df['cleaned_tweets']\ndf2\n\n0                                              burn flag\n1      plan kill petro dollar run manipulated western...\n2      difficult know whats going come summit next we...\n3      lot unpack brics would bring table officially ...\n4      nice feel way thats brics supped make feel lik...\n                             ...                        \n115    well see 9 years heres latest subject httpswww...\n116                                          bitches lol\n117    ok trader would think new currency starts lot ...\n118    lol usa gold reserves world brics silly happen...\n119    brics generally acceptedthen currency becomes ...\nName: cleaned_tweets, Length: 120, dtype: object\n\n\n\ndf2\n\n0                                              burn flag\n1      plan kill petro dollar run manipulated western...\n2      difficult know whats going come summit next we...\n3      lot unpack brics would bring table officially ...\n4      nice feel way thats brics supped make feel lik...\n                             ...                        \n115    well see 9 years heres latest subject httpswww...\n116                                          bitches lol\n117    ok trader would think new currency starts lot ...\n118    lol usa gold reserves world brics silly happen...\n119    brics generally acceptedthen currency becomes ...\nName: cleaned_tweets, Length: 120, dtype: object\n\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nvalue = [str(element) for element in df2]\nvectorizer=CountVectorizer()\nXs  =  vectorizer.fit_transform(value)   \nprint(type(Xs))\nprint(\"vocabulary = \",vectorizer.vocabulary_)   \nprint(\"stop words =\", vectorizer.stop_words)\ncol_names=vectorizer.get_feature_names_out()\nprint(\"col_names=\",col_names)\n\n&lt;class 'scipy.sparse._csr.csr_matrix'&gt;\nvocabulary =  {'burn': 357, 'flag': 905, 'plan': 1694, 'kill': 1284, 'petro': 1677, 'dollar': 693, 'run': 1974, 'manipulated': 1405, 'western': 2510, 'central': 395, 'banks': 249, 'controlled': 508, 'cabal': 364, 'brics': 335, 'replaced': 1896, 'fiat': 882, 'currency': 574, 'gold': 1011, 'tangible': 2261, 'asset': 205, 'value': 2446, 'supposedly': 2236, 'quantum': 1825, 'financial': 893, 'system': 2250, 'qfs': 1823, 'line': 1351, 'also': 133, 'backed': 232, 'banking': 248, 'setting': 2060, 'mankind': 1408, 'free': 944, 'slavery': 2116, 'control': 507, 'difficult': 669, 'know': 1293, 'whats': 2515, 'going': 1010, 'come': 453, 'summit': 2228, 'next': 1537, 'week': 2503, 'first': 902, 'announced': 152, 'introduction': 1222, 'goldback': 1012, 'intended': 1205, 'compete': 470, 'us': 2429, 'said': 1993, 'goldlinked': 1014, 'trade': 2339, 'settlement': 2062, 'course': 544, 'would': 2546, 'dedollarization': 613, 'effect': 733, 'theyre': 2298, 'saying': 2007, 'wont': 2534, 'discussion': 678, 'new': 1534, 'sort': 2141, 'wanting': 2479, 'conduct': 487, 'local': 1369, 'currencies': 573, 'trolling': 2369, 'west': 2508, 'talk': 2258, 'time': 2318, 'tell': 2273, 'saudi': 2002, 'arabia': 179, 'admitted': 85, 'begin': 271, 'selling': 2039, 'oil': 1587, 'yuan': 2569, 'depart': 641, 'petrodollar': 1680, 'discussed': 677, 'speculated': 2155, 'happens': 1051, 'that': 2287, 'speculation': 2156, 'lot': 1384, 'unpack': 2418, 'bring': 339, 'table': 2252, 'officially': 1584, 'declares': 609, 'trading': 2346, 'inducts': 1174, 'gamechanger': 974, 'countries': 539, 'big': 286, 'either': 740, 'resources': 1912, 'fast': 867, 'growing': 1034, 'economies': 729, 'world': 2540, 'order': 1608, 'talks': 2260, 'yet': 2562, 'core': 522, 'anything': 167, 'serious': 2052, 'credibly': 555, 'accomplishment': 64, 'date': 593, 'development': 662, 'bank': 246, 'funding': 964, 'projects': 1786, 'across': 68, 'global': 1004, 'south': 2145, 'see': 2030, 'like': 1347, 'eu': 793, 'nato': 1517, 'dont': 704, 'common': 462, 'hegemonic': 1065, 'design': 652, 'simply': 2101, 'bunch': 354, 'eager': 717, 'investors': 1228, 'utilize': 2441, 'newfound': 1535, 'wealth': 2499, 'capitalize': 380, 'lowbasehighgrowth': 1387, 'developing': 661, 'expand': 831, 'clout': 440, 'current': 576, 'member': 1446, 'list': 1358, 'four': 938, 'powers': 1734, 'unless': 2415, 'join': 1264, 'align': 121, 'seriously': 2053, 'vision': 2460, 'things': 2301, 'easy': 724, 'nice': 1539, 'feel': 878, 'way': 2495, 'thats': 2289, 'supped': 2231, 'make': 1399, 'another': 156, 'important': 1151, 'power': 1733, 'reality': 1847, 'doesnt': 691, 'even': 806, 'mechanism': 1436, 'formally': 926, 'decisions': 608, 'seems': 2034, 'well': 2506, 'ahead': 105, 'schedule': 2014, 'already': 132, '50': 41, 'percent': 1669, 'gdp': 982, 'members': 1447, '2023': 26, 'yeah': 2556, 'precisely': 1740, 'fully': 961, 'explained': 841, 'today': 2321, 'family': 865, 'people': 1665, 'acknowledge': 67, 'single': 2106, 'person': 1671, 'past': 1652, 'aware': 227, 'information': 1187, 'one': 1592, 'social': 2126, 'media': 1438, 'go': 1007, 'looking': 1377, 'extraordinarily': 850, 'significant': 2094, 'could': 530, 'everything': 812, 'feels': 879, '01': 0, 'qanon': 1822, 'weirdos': 2504, 'traders': 2345, 'actually': 76, 'watched': 2488, 'lecture': 1331, 'school': 2016, 'predicted': 1742, 'equal': 780, 'north': 1553, '2050': 28, 'forget': 924, 'dude': 710, 'speaking': 2151, 'incubator': 1165, 'meetings': 1440, 'happening': 1050, 'lets': 1340, 'encourage': 760, 'every': 811, 'country': 540, 'seat': 2023, 'think': 2302, 'hope': 1091, 'sooner': 2138, 'rather': 1840, 'later': 1312, 'live': 1362, 'fed': 875, 'affecting': 91, 'daily': 584, 'lives': 1363, 'weaponised': 2501, 'basically': 259, 'force': 918, 'bidding': 285, 'politicians': 1715, 'spend': 2161, 'brownnosing': 347, 'whitehouse': 2520, 'improving': 1157, 'living': 1364, 'supposed': 2235, 'happen': 1048, 'hold': 1084, 'boys': 320, 'cant': 374, 'agree': 101, 'manage': 1403, 'update': 2423, 'never': 1533, 'successfully': 2225, 'launched': 1317, 'august': 222, 'good': 1015, 'phase': 1682, 'public': 1807, 'project': 1785, 'pay': 1655, 'take': 2253, 'look': 1376, 'httpsyoutubelwx2igleskehttpsyoutubelwx2igleske': 1105, 'solution': 2133, 'exchange': 824, 'andor': 149, 'sale': 1994, 'commodities': 459, 'services': 2056, 'best': 281, 'forward': 932, 'concrete': 484, 'difference': 667, 'unlikely': 2416, 'probably': 1767, 'true': 2371, 'g7': 969, 'dedollarisation': 612, 'occur': 1575, 'thousand': 2308, 'cuts': 580, 'conversation': 511, 'peoples': 1666, 'heads': 1060, 'work': 2537, 'firm': 900, 'something': 2136, 'limited': 1350, 'tools': 2329, 'understand': 2399, 'economic': 725, 'degree': 628, 'max': 1427, 'keiser': 1274, 'gregory': 1029, 'mannarino': 1410, 'zerohedge': 2570, 'putin': 1820, 'david': 595, 'icke': 1122, 'understanding': 2400, 'rough': 1958, 'idea': 1124, 'competency': 471, 'intentions': 1208, 'actors': 75, 'within': 2530, 'additional': 80, 'fraudulent': 943, 'systems': 2251, 'add': 78, 'politics': 1717, 'de': 599, 'blow': 303, 'waiting': 2474, 'river': 1949, 'slowly': 2119, 'eroding': 783, 'starts': 2180, 'flowing': 907, 'process': 1770, 'happened': 1049, 'reflected': 1863, 'data': 592, 'tectonic': 2270, 'shift': 2075, 'side': 2088, 'china': 418, 'indonesia': 1173, 'thailand': 2286, 'india': 1168, 'uae': 2385, 'egypt': 739, 'malaysia': 1402, 'russia': 1980, 'etc': 791, 'brazil': 323, 'started': 2178, 'wants': 2480, 'argentina': 182, 'given': 1000, 'geopolitical': 987, 'storm': 2201, 'kicking': 1282, 'africa': 94, 'several': 2064, 'jump': 1270, 'bandwagon': 243, 'real': 1846, 'far': 866, 'credible': 554, 'say': 2006, 'currently': 577, 'runs': 1975, 'approved': 177, 'passing': 1651, 'loans': 1366, 'native': 1516, 'tanzania': 2263, 'loan': 1365, 'import': 1149, 'cargo': 384, 'trains': 2348, 'mind': 1466, 'taking': 2256, 'use': 2435, 'ask': 200, 'indians': 1170, 'send': 2041, 'goes': 1009, 'nigers': 1542, 'nuclear': 1560, 'plant': 1698, 'rosatom': 1955, 'easily': 722, 'give': 999, 'rubles': 1968, 'via': 2450, 'two': 2383, 'worth': 2545, '35billion': 38, 'combined': 451, 'imagine': 1135, 'replicating': 1897, '100x': 3, 'valuation': 2444, 'years': 2559, 'multiple': 1504, 'times': 2319, 'bro': 343, 'tldr': 2320, 'usa': 2430, 'making': 1401, 'noise': 1545, 'last': 1311, 'gasp': 978, 'fu': 955, 'emerging': 752, 'save': 2004, 'lost': 1383, 'america': 139, 'done': 703, 'gain': 970, 'wanted': 2478, 'admissions': 83, 'taken': 2254, 'leaders': 1323, 'inserted': 1194, 'favorable': 872, 'political': 1714, 'views': 2456, 'second': 2024, 'believe': 276, 'sit': 2109, 'back': 230, 'onto': 1593, 'long': 1374, 'possible': 1725, 'httpsatthewatersedgeorg20230917thedollardethroned': 1100, 'couldnt': 531, 'care': 382, 'less': 1338, 'delusional': 633, 'imports': 1152, '97': 48, 'lithium': 1360, 'trying': 2376, 'get': 994, 'ev': 805, 'cars': 387, 'market': 1418, 'spending': 2162, 'reduces': 1861, 'mean': 1430, 'vital': 2463, 'earth': 720, 'material': 1424, 'httpswwwstatistacomstatistics280129usrareearthimportdistributionbyproducttextthe20united20states20imports20of2doxide20reo20equivalent': 1103, 'buy': 361, 'convert': 513, 'dollars': 695, 'price': 1759, 'volatility': 2467, 'settled': 2061, 'euro': 796, 'yen': 2560, 'bitcoin': 297, 'im': 1131, 'scared': 2010, 'thing': 2300, 'imma': 1137, 'costco': 527, 'fill': 887, 'food': 915, 'pantry': 1632, 'months': 1490, 'nothing': 1556, 'nonwestern': 1550, 'might': 1463, 'choose': 426, 'still': 2193, 'major': 1398, 'dominant': 699, 'impact': 1145, 'americas': 141, 'ability': 52, 'print': 1763, 'endless': 763, 'meaning': 1431, 'defense': 620, 'budget': 348, 'deflate': 623, 'bit': 295, 'much': 1501, 'maybe': 1429, 'half': 1042, '800': 47, 'billion': 291, 'keep': 1272, 'sure': 2237, 'exactly': 818, 'want': 2477, 'changing': 408, 'commodity': 460, 'intl': 1221, 'reserve': 1907, 'instead': 1198, 'unstable': 2422, 'puts': 1821, 'circulation': 428, 'problem': 1768, 'drop': 709, 'coin': 443, 'monetary': 1486, 'policy': 1713, 'propers': 1792, 'artificially': 194, 'keeping': 1273, 'low': 1386, 'boost': 312, 'exports': 845, 'else': 748, 'based': 257, 'basket': 260, 'anyone': 166, 'participate': 1642, 'swapping': 2243, 'step': 2191, 'wait': 2473, 'least': 1328, 'comes': 454, 'apply': 172, 'become': 268, 'ndb': 1519, 'uruguay': 2428, 'bangladesh': 245, 'replace': 1895, 'renminbi': 1892, 'rupee': 1976, 'ruble': 1967, 'rand': 1836, 'supplement': 2232, 'international': 1215, 'likely': 1348, 'stable': 2168, 'hands': 1047, 'since': 2103, 'rivals': 1948, 'competitors': 473, 'sits': 2111, 'cartel': 388, 'euus': 804, 'mainstream': 1397, 'interests': 1211, 'threat': 2309, 'collective': 447, 'report': 1898, 'positive': 1722, 'developments': 663, 'organization': 1610, 'improve': 1156, 'view': 2455, 'create': 551, 'everworsening': 810, 'visit': 2461, 'zerohedgecom': 2571, 'rtcom': 1965, 'search': 2022, 'youll': 2565, 'plenty': 1703, 'info': 1186, 'tried': 2364, 'post': 1727, 'reddit': 1859, 'bot': 318, 'glad': 1002, 'someone': 2135, 'posting': 1728, 'due': 711, 'little': 1361, 'chance': 404, 'adopted': 86, 'high': 1075, 'hopes': 1092, 'struggling': 2216, 'yes': 2561, 'concerning': 483, 'agenda': 98, 'reporting': 1900, 'arrest': 189, 'trump': 2372, 'banning': 251, 'tik': 2316, 'tok': 2324, 'word': 2536, 'wise': 2529, 'silver': 2099, 'crypto': 567, 'xrpxlm': 2554, 'xdc': 2549, 'got': 1020, 'hand': 1045, 'bets': 282, 'losing': 1382, 'stop': 2196, 'using': 2438, 'ill': 1128, 'dispose': 681, 'properly': 1791, 'lack': 1306, 'news': 1536, 'coverage': 545, 'definitely': 622, 'clear': 434, 'sign': 2091, 'chaos': 411, 'ensue': 772, 'silence': 2095, 'defeaning': 619, 'proper': 1790, 'none': 1547, 'peerscolleaguesfamily': 1663, 'cause': 393, 'interested': 1210, 'topic': 2331, 'scary': 2011, 'phrasing': 1685, 'pushing': 1818, 'pursuing': 1815, 'safer': 1992, 'approach': 174, 'lulas': 1391, 'succeed': 2222, 'fucking': 958, 'broke': 345, 'corrupt': 525, 'ass': 202, 'backwards': 235, 'leadership': 1324, 'alao': 117, 'lights': 1346, 'heading': 1058, 'friends': 947, 'overtake': 1623, 'seeing': 2031, 'talking': 2259, 'devalue': 657, 'american': 140, 'money': 1487, 'products': 1777, '55': 43, 'dollarsi': 696, '100': 2, 'though': 2306, 'transition': 2354, 'peaceful': 1662, 'although': 135, 'history': 1083, 'tells': 2274, 'otherwise': 1616, 'uncharted': 2397, 'territory': 2282, 'knows': 1295, 'safe': 1988, 'stacking': 2169, 'lil': 1349, 'fail': 860, 'miserably': 1476, 'change': 405, 'often': 1586, 'healthy': 1061, 'called': 368, 'r5': 1828, 'isnt': 1241, 'implemented': 1147, 'brollar': 346, 'bric': 332, 'xrp': 2553, 'sarcastic': 1999, 'answer': 157, 'df': 664, 'fucker': 957, 'cc': 394, 'currencycents': 575, 'exists': 830, 'premium': 1749, 'mention': 1449, 'trademarked': 2343, 'brand': 321, 'name': 1510, 'imagehttpscdn11bigcommercecomsjube9x0sekimagesstencil1280x1280products235647newmasterbuilderpic177991635808019jpgc1': 1133, 'nonaffiliated': 1546, 'link': 1353, 'producthttpswwwmonarchpreciousmetalscom120oz999finesilverqty1201ozbuildingblockbarsthemasterbuilderutmsourcefindbullionpricescom': 1774, 'brick': 333, 'eg': 738, 'water': 2490, 'cashier': 391, 'thatll': 2288, 'bricks': 334, 'texas': 2285, 'try': 2375, 'standard': 2173, 'dump': 712, '20': 15, 'trillion': 2366, 'economy': 731, 'hyperinflation': 1120, 'fails': 862, 'war': 2481, 'expanded': 832, 'ties': 2314, 'resume': 1923, 'programs': 1782, 'venezuela': 2448, 'proven': 1798, 'reserves': 1908, 'cut': 579, 'sanctions': 1997, 'strength': 2209, 'relationship': 1877, 'coherent': 442, 'alliance': 122, 'indian': 1169, 'chinese': 423, 'soldiers': 2131, 'killing': 1285, 'border': 314, 'invading': 1224, 'sovereign': 2146, 'allies': 125, 'beat': 266, 'plus': 1707, 'always': 136, 'creating': 553, 'amero': 142, 'reaction': 1843, 'minehttpsyoutubecomwatchvbzfyripw3wyfeatureshare8': 1467, 'restated': 1917, 'fracture': 939, 'video': 2453, 'pramit': 1738, 'pal': 1629, 'chaudhuris': 414, 'piece': 1690, 'intelligence': 1204, 'gis': 998, 'france': 941, 'germany': 992, 'confirm': 489, 'joining': 1266, 'chinas': 422, 'aiib': 107, 'rival': 1947, 'usled': 2439, 'rothschild': 1956, 'march': 1415, '17': 10, '2015': 21, 'photo': 1684, 'president': 1754, 'xi': 2550, 'jinping': 1260, '3rd': 39, 'meets': 1441, 'guests': 1038, 'asian': 198, 'infrastructure': 1189, 'investment': 1226, 'launch': 1316, 'ceremony': 397, 'great': 1025, 'hall': 1043, 'beijing': 275, 'europeans': 800, 'defy': 624, 'chinaled': 421, 'finance': 890, 'ministries': 1472, 'confirmed': 490, 'theyll': 2297, 'italy': 1248, 'expected': 837, 'soon': 2137, 'seen': 2035, 'setback': 2059, 'obama': 1567, 'administration': 82, 'ministry': 1473, 'french': 946, 'le': 1321, 'figaro': 884, 'reported': 1899, 'tuesday': 2379, 'germanys': 993, 'bbc': 263, 'says': 2008, 'earlier': 718, 'ft': 954, 'move': 1497, 'imf': 1136, 'aims': 111, 'rewrite': 1932, 'rules': 1973, 'block': 301, 'rothschilds': 1957, 'computer': 480, 'generated': 985, 'ponzi': 1718, 'bailout': 238, 'scheme': 2015, 'issuances': 1244, 'decision': 607, 'britain': 341, 'became': 267, 'founding': 937, 'reports': 1901, 'uk': 2388, 'government': 1022, 'countrys': 541, 'national': 1513, 'interest': 1209, 'negative': 1526, 'united': 2408, 'states': 2185, 'challenge': 401, 'washingtonbased': 2485, 'aka': 116, 'increasing': 1163, 'pressure': 1757, 'institution': 1199, 'concern': 482, 'standards': 2174, 'governance': 1021, 'environmental': 778, 'safeguards': 1990, 'british': 342, 'operative': 1601, 'billionaire': 292, 'convicted': 515, 'felon': 880, 'george': 989, 'soros': 2139, 'warns': 2482, 'citizens': 431, 'resisting': 1910, 'nwo': 1564, 'nicknamed': 1540, 'open': 1594, 'society': 2128, 'httpswwwyoutubecomwatchvtojckjwqb0a': 1104, 'backdoor': 231, 'dominance': 698, 'experts': 840, 'competition': 472, 'messaging': 1454, 'consistently': 496, 'welcome': 2505, 'seek': 2032, 'unmistakable': 2417, 'evidence': 813, 'takes': 2255, 'starting': 2179, 'point': 1711, 'watermark': 2492, 'multilateral': 1502, 'terms': 2281, 'regional': 1874, 'assistant': 208, 'secretary': 2026, 'state': 2181, 'daniel': 589, 'russel': 1979, 'seoul': 2045, 'microsoft': 1461, 'google': 1018, 'dogs': 692, 'wall': 2475, 'street': 2208, 'nervous': 1529, 'coming': 455, 'iran': 1233, 'execute': 827, 'bankers': 247, 'fraud': 942, 'charges': 413, 'flushing': 910, 'old': 1590, 'flushed': 909, 'existence': 828, 'existing': 829, 'structures': 2215, 'un': 2393, 'security': 2029, 'council': 532, 'adb': 77, 'essentially': 786, 'established': 788, '1945': 13, 'europe': 798, 'predominant': 1743, 'recent': 1851, 'efforts': 737, 'remake': 1887, 'worlds': 2541, 'institutions': 1201, 'image': 1132, 'partnership': 1649, 'set': 2058, 'known': 1294, 'year': 2557, 'led': 1332, 'shanghai': 2067, 'cooperation': 517, 'fund': 963, 'help': 1071, 'cushion': 578, 'crises': 558, 'shocks': 2080, 'washington': 2484, 'lobbying': 1367, 'official': 1583, 'quoted': 1827, 'anonymously': 155, 'accused': 66, 'trend': 2363, 'constant': 497, 'accommodation': 63, 'engage': 767, 'rising': 1946, 'forbes': 917, 'meanwhile': 1434, 'officials': 1585, 'aiibs': 108, 'operation': 1599, 'transparent': 2357, 'inclusive': 1161, 'responsible': 1916, 'draw': 706, 'experience': 838, 'avoid': 225, 'detours': 656, 'costeffective': 528, 'efficient': 735, 'foreign': 922, 'spokesman': 2164, 'hong': 1089, 'lei': 1335, 'cited': 430, 'xinhua': 2552, 'agency': 97, 'added': 79, 'complement': 474, 'support': 2233, 'asia': 197, 'three': 2311, 'able': 53, 'cope': 520, 'tremendous': 2362, 'amount': 146, 'needs': 1525, 'advisor': 88, 'motley': 1496, 'fool': 916, 'kuo': 1302, 'told': 2325, 'rt': 1964, 'shouldnt': 2086, 'politicize': 1716, 'right': 1939, 'communication': 463, 'uninterrupted': 2405, 'parts': 1650, 'many': 1413, 'crying': 566, 'certain': 398, 'suggests': 2226, 'offer': 1579, 'expertise': 839, 'korea': 1298, 'switzerland': 2247, 'luxembourg': 1392, 'considering': 495, 'australian': 223, 'prime': 1761, 'minister': 1469, 'tony': 2326, 'abbott': 50, 'final': 888, 'membership': 1448, 'discussions': 679, 'participation': 1644, 'main': 1395, 'japan': 1255, 'month': 1489, 'including': 1159, '31': 35, 'decide': 606, 'becoming': 270, 'whether': 2518, 'japans': 1257, 'lou': 1385, 'jiwei': 1262, 'according': 65, 'nearly': 1521, '30': 34, 'aimed': 110, 'helping': 1072, '2014': 20, 'tool': 2328, 'broader': 344, 'push': 1816, 'significance': 2093, 'httppoliticalvelcraftorg20150317francegermanyconfirmjoiningchinasaiibbankarivaltousledrothschildworldbank': 1098, 'ripple': 1943, 'thishttpimgurcomogrcmrl': 2305, 'snafu': 2124, 'space': 2148, 'criteria': 561, 'leaving': 1330, 'progress': 1783, 'released': 1879, 'papers': 1633, 'full': 960, 'podcasts': 1710, 'yt': 2568, 'channels': 410, 'articles': 193, 'follow': 914, 'mostly': 1494, 'anticapitalist': 159, 'antiimperial': 161, 'skeptical': 2114, 'ive': 1251, 'hearing': 1063, 'winner': 2526, 'argentinas': 183, 'general': 983, 'election': 743, 'rightleaning': 1940, 'opposed': 1607, 'makes': 1400, 'anyway': 168, 'nutbag': 1562, 'asshole': 207, 'sense': 2043, 'dumped': 713, 'overnight': 1622, 'without': 2531, 'sheer': 2072, 'volume': 2468, 'overhaul': 1620, 'required': 1904, 'accommodate': 62, 'parallel': 1634, 'swift': 2245, 'bilateral': 289, 'usage': 2431, 'top': 2330, 'partner': 1647, 'others': 1615, 'enough': 771, 'prefer': 1744, 'english': 768, 'wheelhouse': 2516, 'but': 360, 'elites': 747, 'event': 807, 'eyes': 854, 'ripplesec': 1944, 'lawsuite': 1319, 'dates': 594, 'coincide': 444, 'events': 808, 'future': 967, 'sounds': 2143, 'goodit': 1016, 'allow': 126, 'participant': 1641, 'benefit': 279, 'term': 2280, 'business': 358, 'employment': 756, 'opportunitiesand': 1605, 'themby': 2290, 'planned': 1695, 'collapse': 446, 'shall': 2066, 'continue': 502, 'remain': 1884, 'hungary': 1117, 'purported': 1812, 'example': 819, 'uganda': 2387, 'completely': 477, 'sanctioned': 1996, 'circumvent': 429, 'operate': 1597, 'network': 1531, 'companies': 466, 'third': 2304, 'processing': 1771, 'payments': 1658, 'mix': 1481, 'barter': 256, 'depend': 642, 'valuations': 2445, 'locally': 1370, 'works': 2539, 'stopgap': 2197, 'measure': 1435, 'inefficient': 1178, 'resulting': 1921, 'payment': 1657, 'turnaround': 2381, 'garnering': 976, 'distrust': 686, 'parties': 1646, 'westward': 2512, 'stopped': 2198, 'globally': 1005, 'accepted': 58, 'enters': 775, 'normalize': 1551, 'vietnam': 2454, 'kenya': 1275, 'chain': 400, 'immune': 1143, 'anymore': 165, 'rely': 1883, 'developed': 660, 'integration': 1203, 'individual': 1172, 'mega': 1442, 'place': 1693, 'awaiting': 226, 'banned': 250, 'cuba': 568, 'extent': 847, 'case': 389, 'played': 1701, '2022': 25, 'safely': 1991, 'assume': 211, 'outside': 1618, 'alliances': 123, 'therefore': 2295, 'becomes': 269, 'ensure': 773, 'disruption': 683, 'imposes': 1154, 'reason': 1849, 'tied': 2313, 'minerals': 1468, 'gas': 977, 'precious': 1739, 'items': 1249, 'convertible': 514, 'participating': 1643, 'issues': 1246, 'refusing': 1868, 'speak': 2150, 'obvious': 1572, 'left': 1333, 'weaker': 2497, 'came': 371, 'cheap': 415, 'relevance': 1881, 'practical': 1736, 'used': 2436, 'negotiating': 1527, 'platform': 1699, 'saudis': 2003, 'matter': 1425, 'matters': 1426, 'announces': 153, 'idly': 1125, 'hoping': 1093, 'waged': 2471, 'albeit': 119, 'fought': 933, 'battlefield': 262, 'picking': 1688, 'steam': 2189, 'sco': 2018, 'bri': 331, 'eaeu': 716, 'coordinating': 519, 'possibly': 1726, 'combining': 452, 'form': 925, 'largest': 1310, 'granted': 1024, 'refuses': 1867, 'honor': 1090, 'commitment': 458, 'switching': 2246, 'petroyuan': 1681, 'game': 973, 'changer': 406, 'indeed': 1166, 'it': 1247, 'personal': 1672, 'resolute': 1911, 'opinion': 1604, 'itll': 1250, 'universal': 2410, 'amongst': 145, 'moved': 1498, 'digitally': 670, 'era': 781, 'moving': 1500, 'player': 1702, '2030': 27, 'imo': 1144, 'crumbling': 565, 'rubbles': 1966, 'destroy': 655, 'fixed': 904, 'rate': 1838, 'better': 283, 'holding': 1085, 'rupees': 1977, 'disasters': 675, 'sa': 1987, 'rus': 1978, 'park': 1637, 'assets': 206, 'includes': 1158, 'backing': 234, 'buying': 362, 'need': 1523, 'trust': 2374, 'tyrants': 2384, 'doea': 690, 'pdf': 1660, 'different': 668, 'kitchen': 1292, 'really': 1848, 'read': 1844, 'book': 310, 'available': 224, 'deserve': 651, 'chief': 416, 'guest': 1037, 'indias': 1171, 'republic': 1902, 'dayhe': 597, 'allowed': 127, 'race': 1829, 'attack': 215, 'successful': 2224, 'origin': 1612, 'fault': 869, 'sherr': 2073, 'jealousy': 1258, 'hard': 1054, 'working': 2538, 'nations': 1515, 'kick': 1281, 'pepe': 1667, 'escobar': 785, '23': 31, 'may': 1428, 'reuters': 1928, 'sergio': 2050, 'moraes': 1491, 'russias': 1984, 'vladimir': 2464, 'cristina': 560, 'fernandez': 881, 'kirchner': 1289, 'arrive': 190, 'session': 2057, 'april': 178, 'rash': 1837, 'deals': 602, 'kirchners': 1290, 'moscow': 1493, 'continues': 503, '53': 42, 'bang': 244, 'premier': 1747, 'li': 1342, 'keqiang': 1277, 'visits': 2462, 'commercial': 457, 'offensive': 1578, 'complete': 476, 'sweet': 2244, 'metaphor': 1457, 'riding': 1936, 'made': 1393, 'subway': 2221, 'train': 2347, 'ply': 1708, 'metro': 1458, 'rio': 1942, 'janeiro': 1253, '2016': 22, 'olympics': 1591, 'nowhere': 1558, 'inexorably': 1181, 'smaller': 2121, 'restructuring': 1919, 'commerce': 456, 'latin': 1314, 'countless': 538, 'missions': 1480, 'plying': 1709, 'shores': 2083, 'nonstop': 1549, 'ii': 1127, 'key': 1279, 'meeting': 1439, 'january': 1254, 'promised': 1787, 'channel': 409, '250': 32, '10': 1, 'financed': 891, 'capital': 376, 'except': 820, 'mariel': 1416, 'port': 1720, 'whose': 2523, 'financing': 897, 'brazils': 326, 'bndes': 304, 'managed': 1404, 'singaporean': 2104, 'operator': 1602, 'psa': 1804, 'pte': 1806, 'ltd': 1389, 'construction': 499, 'nicaragua': 1538, 'canal': 372, 'bigger': 287, 'wider': 2524, 'deeper': 616, 'panamas': 1630, 'kong': 1297, 'finished': 899, '2019': 24, 'part': 1639, 'clinched': 437, '47': 40, 'deal': 600, 'hydroelectric': 1119, 'dams': 587, 'patagonia': 1653, 'among': 144, '35': 36, 'lis': 1356, 'giant': 996, 'petrobras': 1678, '22': 30, 'brazilian': 325, 'embraer': 750, 'jets': 1259, 'sold': 2130, 'tianjin': 2312, 'airlines': 114, '13': 5, 'raft': 1830, 'agreements': 103, 'involving': 1231, 'iron': 1238, 'ore': 1609, 'producer': 1772, 'vale': 2443, 'overhauling': 1621, 'appalling': 170, 'roads': 1951, 'railways': 1832, 'ports': 1721, 'airports': 115, 'slightly': 2117, 'condition': 485, 'upgrades': 2425, 'prior': 1764, 'cup': 571, 'star': 2176, 'whole': 2522, 'show': 2087, 'undoubtedly': 2401, 'proposed': 1794, '3500': 37, 'kilometerlong': 1286, 'atlanticpacific': 214, 'megarailway': 1444, 'slated': 2115, 'santos': 1998, 'peruvian': 1675, 'pacific': 1626, 'ilo': 1130, 'amazonia': 137, 'logistically': 1372, 'must': 1508, 'offering': 1580, 'gateway': 979, 'winners': 2527, 'inevitably': 1179, 'producers': 1773, 'soya': 2147, 'beans': 264, 'exporting': 844, 'railway': 1831, 'extremely': 852, 'complex': 478, 'land': 1307, 'rights': 1941, 'crucially': 564, 'preference': 1745, 'firms': 901, 'deliberate': 632, 'extending': 846, 'lines': 1352, 'credit': 556, 'usual': 2440, 'suspects': 2240, 'worried': 2542, 'watch': 2487, 'geopolitics': 988, 'lula': 1390, 'attract': 220, '2009': 17, 'production': 1775, 'moves': 1499, 'stage': 2171, 'technology': 2269, 'transfer': 2350, 'picture': 1689, 'massive': 1421, 'tradecommerce': 2340, 'interplay': 1216, 'intersecting': 1217, 'quite': 1826, 'convoluted': 516, 'mercosur': 1451, 'facing': 857, 'repeated': 1894, 'destabilization': 653, 'attempts': 217, 'routinely': 1963, 'denounce': 640, 'presidents': 1756, 'dilma': 671, 'rousseff': 1962, 'nicolas': 1541, 'maduro': 1394, 'yearn': 2558, 'ol': 1589, 'days': 598, 'dependent': 644, 'degrees': 629, 'complexity': 479, 'internal': 1214, 'strife': 2213, 'brasilia': 322, 'buenos': 349, 'aires': 113, 'caracas': 381, 'simultaneously': 2102, 'plots': 1705, 'institutional': 1200, 'dissimulate': 684, 'near': 1520, 'total': 2333, 'diplomatic': 673, 'distance': 685, 'considered': 494, 'qualify': 1824, 'bad': 237, 'joke': 1268, 'relentless': 1880, 'assault': 203, 'vulture': 2469, 'funds': 965, 'targeting': 2264, 'relations': 1876, 'practically': 1737, 'frozen': 951, 'september': 2048, '2013': 19, 'suspended': 2241, 'response': 1914, 'nsa': 1559, 'spying': 2166, 'personally': 1673, 'leads': 1325, 'crucial': 563, 'geostrategic': 990, 'issue': 1245, 'unresolved': 2420, 'leaked': 1326, 'sensitive': 2044, 'purpose': 1813, 'destabilize': 654, 'exploration': 842, 'deposits': 648, 'presalt': 1750, 'found': 934, 'young': 2566, '21st': 29, 'century': 396, 'unraveling': 2419, 'secondbiggest': 2025, 'biggest': 288, 'hosts': 1095, 'former': 927, 'overtaken': 1624, 'corporation': 523, 'energy': 766, 'giants': 997, 'hardcore': 1055, 'shareholders': 2070, 'act': 69, 'proverbial': 1799, 'vultures': 2470, 'bent': 280, 'bleeding': 299, 'company': 467, 'profit': 1780, 'allied': 124, 'lobbyists': 1368, 'abhor': 51, 'petrobrass': 1679, 'status': 2188, 'priority': 1765, 'explorer': 843, 'nutshell': 1563, 'frontier': 949, 'unbounded': 2395, 'domination': 701, 'empire': 755, 'annoyed': 154, 'ride': 1935, 'continental': 500, 'wave': 2493, 'constantly': 498, 'evolving': 816, 'strategic': 2203, 'met': 1455, 'circles': 427, 'incredulity': 1164, 'fear': 873, 'virtually': 2458, 'impossible': 1155, 'damage': 585, 'easier': 721, 'comparatively': 468, 'washingtons': 2486, 'wrath': 2547, 'targets': 2265, 'dared': 591, 'backyard': 236, 'strategy': 2205, 'russian': 1982, 'calm': 370, 'carry': 386, 'winwin': 2528, 'profile': 1779, 'february': 874, 'speculators': 2158, 'unleash': 2413, 'argentine': 184, 'peso': 1676, 'theres': 2296, 'needless': 1524, 'boom': 311, 'timber': 2317, 'colombia': 449, 'sells': 2040, 'peru': 1674, 'chile': 417, 'copper': 521, 'bolivia': 306, 'highvalueadded': 1080, 'manufactured': 1412, 'immediate': 1138, 'transul': 2358, 'conference': 488, 'boils': 305, 'brazilchina': 324, 'linking': 1355, 'industrial': 1175, 'partial': 1640, 'outsourcing': 1619, 'metals': 1456, 'increase': 1162, 'demand': 634, 'building': 351, 'megalopolises': 1443, 'sinobrazilian': 2107, 'finally': 889, 'seal': 2021, 'approval': 176, 'longterm': 1375, 'remains': 1886, 'inexorable': 1180, 'converge': 510, 'unasur': 2394, 'union': 2406, 'betting': 284, 'multipolar': 1506, 'independence': 1167, 'oceans': 1576, 'away': 228, 'monroe': 1488, 'doctrine': 689, 'httpwwwsottnetarticle296803bricsnationstokickwashingtonoutofsouthamerica': 1109, 'regime': 1872, 'embracing': 749, 'worst': 2544, 'abuses': 56, 'human': 1116, 'israel': 1243, 'afghanistan': 93, 'abused': 55, 'invaded': 1223, 'syria': 2249, 'freedom': 945, 'lol': 1373, 'wester': 2509, 'interfere': 1212, 'problems': 1769, 'treatment': 2360, 'women': 2532, 'worries': 2543, 'recipe': 1854, 'disaster': 674, 'start': 2177, 'getting': 995, 'terrorism': 2283, 'fucked': 956, 'inclusion': 1160, 'model': 1482, 'potential': 1730, 'founders': 936, 'youre': 2567, 'democracy': 637, 'communist': 464, 'monarchy': 1485, 'clearly': 435, 'occasions': 1574, 'group': 1030, 'geoeconomicsbased': 986, 'focused': 912, 'boosting': 313, 'grow': 1033, 'parameter': 1635, 'democracies': 636, 'recently': 1852, 'joined': 1265, 'labeling': 1304, 'extreme': 851, 'label': 1303, 'talibanrun': 2257, 'crazy': 550, 'kimrun': 1287, 'reflects': 1864, 'societies': 2127, 'substantial': 2220, 'sum': 2227, 'islamic': 1240, 'bonds': 308, 'spread': 2165, 'id': 1123, 'curious': 572, 'investments': 1227, 'affected': 90, 'devaluing': 658, 'usd': 2433, 'deleted': 631, 'failed': 861, 'parroted': 1638, 'edgelords': 732, 'economics': 728, 'failure': 863, 'evident': 814, 'attend': 218, 'literally': 1359, 'concept': 481, 'build': 350, 'hui': 1114, 'research': 1906, 'aug': 221, '29': 33, '2017': 23, 'httpglobalresearchus11listmanagecomtrackclicku2cc48fb30f331d97157a65aa2iddb955d6a89e8c306a1a59': 1097, 'casting': 392, 'xiamen': 2551, 'coastal': 441, 'city': 432, 'fujian': 959, 'province': 1802, 'host': 1094, 'ninth': 1544, 'themed': 2292, 'deepening': 615, 'opening': 1595, 'brighter': 337, 'early': 719, 'birth': 293, 'evolved': 815, 'cooperative': 518, 'guided': 1039, 'regular': 1875, 'five': 903, 'markets': 1419, 'involves': 1230, 'series': 2051, 'exchanges': 826, 'dialogue': 665, 'activities': 74, 'ministerial': 1470, 'forums': 931, 'thinktank': 2303, 'decade': 605, 'bloc': 300, 'transformed': 2353, 'entity': 777, 'strengthening': 2210, 'establishing': 789, 'contingent': 501, 'arrangement': 188, 'cra': 546, 'result': 1920, 'contributed': 506, 'stimulating': 2194, 'growth': 1035, 'reforming': 1866, 'democratization': 639, 'enjoy': 769, 'enormous': 770, 'similar': 2100, 'share': 2068, 'historical': 1082, 'objectives': 1569, 'large': 1309, 'population': 1719, 'huge': 1113, 'highly': 1079, 'complementary': 475, 'closer': 439, 'community': 465, 'shared': 2069, 'belt': 277, 'road': 1950, 'initiative': 1192, 'recognized': 1855, 'supported': 2234, 'number': 1561, 'active': 72, 'counterpart': 536, 'signed': 2092, 'joint': 1267, 'statement': 2183, 'docking': 688, 'silk': 2096, 'eurasian': 795, 'moreover': 1492, 'partners': 1648, 'strategies': 2204, 'plans': 1697, 'external': 848, 'capacity': 375, 'tighten': 2315, 'giving': 1001, 'industry': 1177, 'upgrade': 2424, 'actions': 71, 'influential': 1185, 'region': 1873, 'located': 1371, 'strong': 2214, 'responsibility': 1915, 'promote': 1788, 'establishment': 790, 'framework': 940, 'reflect': 1862, 'arena': 181, 'principles': 1762, 'multipolarity': 1507, 'agendas': 99, 'vindicate': 2457, 'uns': 2421, 'affairs': 89, 'safeguard': 1989, 'peace': 1661, 'raising': 1835, 'voice': 2466, 'influence': 1184, 'sending': 2042, 'unified': 2403, 'message': 1453, 'role': 1954, 'multilateralism': 1503, 'built': 352, 'todays': 2322, 'faced': 856, 'protectionism': 1797, 'hegemonism': 1066, 'duty': 715, 'climatic': 436, 'reform': 1865, 'counterterrorism': 537, 'transnational': 2356, 'crime': 557, 'stakeholders': 2172, 'providing': 1801, 'rational': 1842, 'solutions': 2134, 'address': 81, 'challenges': 402, 'goods': 1017, 'premise': 1748, 'handling': 1046, 'domestic': 697, 'ambassador': 138, 'article': 192, 'translated': 2355, 'originally': 1613, 'published': 1808, 'ultimate': 2391, 'lethal': 1339, 'weapon': 2500, 'mar': 1414, '18': 11, 'ich': 1121, 'classic': 433, 'anton': 163, 'siluanov': 2098, 'drawing': 707, 'liberal': 1343, 'favor': 871, 'present': 1751, 'proposals': 1793, 'kremlin': 1300, 'end': 761, 'spectacular': 2153, 'ago': 100, 'kommersant': 1296, 'asked': 201, 'presidential': 1755, 'aide': 106, 'sergei': 2049, 'glazyev': 1003, 'separate': 2046, 'presented': 1752, 'novelty': 1557, 'small': 2120, 'groups': 1032, 'assessment': 204, 'nikolai': 1543, 'patrushev': 1654, 'head': 1057, 'federal': 876, 'service': 2055, 'wavelength': 2494, 'heres': 1073, 'plot': 1704, 'thickens': 2299, 'brilliant': 338, 'economist': 730, 'nationalist': 1514, 'arguably': 185, 'holds': 1086, 'barred': 253, 'barring': 255, 'taxing': 2267, 'conversion': 512, 'depending': 645, 'smoking': 2122, 'gun': 1040, 'requiring': 1905, 'default': 617, 'predictably': 1741, 'sectors': 2028, 'tankland': 2262, 'went': 2507, 'bonkers': 309, 'stating': 2186, 'utmost': 2442, 'certainty': 399, 'sector': 2027, 'find': 898, 'connections': 492, 'nonsense': 1548, 'japanese': 1256, 'korean': 1299, 'sources': 2144, 'whatever': 2514, 'attention': 219, 'inside': 1195, 'episode': 779, 'means': 1433, 'harbors': 1053, 'illusions': 1129, 'regarding': 1870, 'exceptionalists': 822, 'candidates': 373, 'el': 741, 'trumpissimo': 2373, 'hillarator': 1081, 'deputy': 649, 'ryabkov': 1985, 'put': 1819, 'expect': 836, 'toughening': 2335, 'absolutely': 54, 'bend': 278, 'pacify': 1627, 'neotsarism': 1528, 'tempted': 2275, 'return': 1926, 'tsarist': 2377, 'selfsufficiency': 2037, 'cutting': 581, 'assuming': 212, 'version': 2449, 'turn': 2380, 'recover': 1858, 'defaulting': 618, 'debt': 604, '700': 46, 'raised': 1834, 'extra': 849, 'punitive': 1810, 'costs': 529, 'repayment': 1893, 'payback': 1656, 'twin': 2382, 'manipulation': 1407, 'prices': 1760, 'involved': 1229, 'unleashing': 2414, 'million': 1465, 'barrels': 254, 'day': 596, 'excess': 823, 'held': 1069, 'derivative': 650, 'nymex': 1566, 'crashing': 549, 'crashed': 548, 'almost': 130, 'blocked': 302, 'natural': 1518, 'remained': 1885, 'balance': 240, 'surplus': 2239, 'factor': 859, 'yakunin': 2555, 'reshuffle': 1909, 'ap': 169, 'uncertain': 2396, 'aim': 109, 'economically': 726, 'coupled': 543, 'pushed': 1817, 'recession': 1853, 'economicbusiness': 727, 'elite': 746, 'troubles': 2370, 'shortterm': 2084, 'contribute': 505, 'crisis': 559, '1998': 14, 'remember': 1888, 'shook': 2081, 'entire': 776, 'object': 1568, 'consideration': 493, 'highest': 1077, 'fsb': 952, 'svr': 2242, 'gru': 1036, 'specter': 2154, 'mother': 1495, 'fatal': 868, 'loot': 1379, 'enter': 774, 'lifting': 1345, 'ultimately': 2392, 'dossier': 705, 'pipelineistan': 1691, 'wet': 2513, 'dream': 708, 'analyst': 147, '200': 16, 'gazprom': 980, 'fight': 885, 'formidable': 928, 'weapons': 2502, 'arsenal': 191, 'yorklondon': 2564, 'axis': 229, 'anticipate': 160, 'bow': 319, 'accept': 57, 'demands': 635, 'lay': 1320, 'ukraine': 2389, 'ukraines': 2390, 'agricultural': 104, 'lands': 1308, 'obviously': 1573, 'didnt': 666, 'learn': 1327, 'looting': 1380, 'sorrowful': 2140, 'kiev': 1283, 'infinite': 1183, 'expansion': 834, 'gambit': 972, 'attempt': 216, 'preventing': 1758, 'reconfiguration': 1856, 'deepened': 614, 'mutual': 1509, 'accessories': 61, 'invulnerable': 1232, 'whereas': 2517, 'separately': 2047, 'fall': 864, 'victim': 2452, 'trademark': 2342, 'divide': 687, 'rule': 1971, 'counternato': 535, 'angle': 150, 'remilitarize': 1889, 'focusing': 913, 'defensive': 621, 'missiles': 1478, 'obsolete': 1570, 'aircraft': 112, 'carriers': 385, 'stateoftheart': 2184, 's500': 1986, 'topol': 2332, 'ten': 2276, 'mirvs': 1475, 'neutralize': 1532, 'pentagon': 1664, 'store': 2200, 'masters': 1423, 'universe': 2411, 'allying': 129, 'rigged': 1938, 'stock': 2195, 'crash': 547, 'proxies': 1803, 'manipulating': 1406, 'cash': 390, 'mechanisms': 1437, 'raise': 1833, 'shares': 2071, 'reversing': 1929, 'rig': 1937, 'wonder': 2533, 'massively': 1422, 'intervened': 1220, 'actively': 73, 'studying': 2218, 'carefully': 383, 'reviewing': 1931, 'records': 1857, 'operators': 1603, 'round': 1960, 'kremlins': 1301, 'kept': 1276, 'rates': 1839, 'forcing': 920, 'operations': 1600, 'thereby': 2294, 'plunging': 1706, 'trap': 2359, 'financier': 895, 'disobey': 680, 'call': 367, 'bis': 294, 'gang': 975, 'setup': 2063, 'democratic': 638, 'operated': 1598, 'sounder': 2142, 'lent': 1337, 'wests': 2511, 'linked': 1354, 'productive': 1776, 'modus': 1483, 'operandi': 1596, 'totally': 2334, 'financiers': 896, 'speculative': 2157, 'scams': 2009, 'michael': 1460, 'hudson': 1112, 'serves': 2054, 'rulers': 1972, 'damn': 586, 'progressively': 1784, 'shifted': 2076, 'colonies': 450, 'vassals': 2447, 'thought': 2307, 'reasons': 1850, 'alarmed': 118, 'ante': 158, 'higher': 1076, 'scenario': 2012, 'spells': 2160, 'east': 723, 'extricate': 853, 'architecture': 180, 'merger': 1452, 'chinadriven': 420, 'russialed': 1981, 'slow': 2118, 'pitfalls': 1692, 'irreversible': 1239, 'invest': 1225, 'develop': 659, 'paneurasian': 1631, 'emporium': 757, 'iranian': 1234, 'eurasia': 794, 'triple': 2368, 'fifteen': 883, 'deindustrialize': 630, 'discuss': 676, 'york': 2563, 'exceptionalist': 821, 'bear': 265, 'abate': 49, 'pays': 1659, 'storage': 2199, 'httpwwwinformationclearinghouseinfoarticle44466htm': 1107, 'counterbalance': 533, 'hegemony': 1067, 'pic': 1686, 'allowing': 128, 'advantage': 87, 'shifting': 2077, 'organizations': 1611, 'prospect': 1795, 'alternative': 134, 'stratfor': 2206, 'nwos': 1565, 'forecasting': 921, 'calling': 369, 'goons': 1019, 'crony': 562, 'capitalist': 378, 'keynesian': 1280, 'enable': 758, 'countering': 534, 'stratfors': 2207, 'analysts': 148, 'pointed': 1712, 'stressed': 2212, 'steered': 2190, 'toward': 2337, 'grouping': 1031, 'highlighted': 1078, 'greater': 1026, 'furthermore': 966, 'pakistan': 1628, 'theoretically': 2293, 'diminishing': 672, 'leverage': 1341, 'namely': 1511, 'dollardominated': 694, 'opportunity': 1606, 'viable': 2451, 'noted': 1555, 'regardless': 1871, 'obstacles': 1571, 'heard': 1062, 'ends': 764, 'kissinger': 1291, 'sole': 2132, 'eurozone': 803, 'instability': 1197, 'disputes': 682, 'sea': 2020, 'erode': 782, 'respective': 1913, 'strengths': 2211, 'stated': 2182, 'fact': 858, 'initial': 1190, 'capitalization': 379, 'sees': 2036, 'along': 131, 'pick': 1687, 'usdominated': 2434, 'relatively': 1878, 'isolated': 1242, 'imperative': 1146, 'elaborated': 742, 'ending': 762, 'military': 1464, 'expansionism': 835, 'admit': 84, 'latest': 1313, 'ufa': 2386, 'marked': 1417, 'transformation': 2352, 'bolstered': 307, 'created': 552, 'bretton': 330, 'woods': 2535, '1944': 12, 'cynthia': 583, 'roberts': 1953, 'associate': 209, 'professor': 1778, 'science': 2017, 'hunter': 1118, 'college': 448, 'cuny': 570, 'university': 2412, 'anxiously': 164, 'watching': 2489, 'gradual': 1023, 'meaningful': 1432, 'sinorussian': 2108, 'eliminating': 745, 'remnants': 1891, 'chinaderivatives': 419, 'httppoliticalvelcraftorg20150713russiachinacounterbalancerothschildsusfederalreservehegemony': 1099, 'forex': 923, 'etf': 792, 'weak': 2496, 'eventually': 809, 'pound': 1731, 'reliance': 1882, 'shit': 2079, 'screwed': 2019, 'httpsforeignpolicycom20230622bricssummitbrazilrussiaindiachinasouthafricaputinnonalignmentglobalsouthhttpsforeignpolicycom20230622bricssummitbrazilrussiaindiachinasouthafricaputinnonalignmentglobalsouth': 1101, 'couple': 542, '15th': 9, 'russians': 1983, 'break': 327, 'cycle': 582, 'capitalism': 377, 'ruining': 1969, 'globe': 1006, 'emergence': 751, 'looming': 1378, 'background': 233, 'declining': 611, 'nesterov': 1530, 'saturday': 2001, 'july': 1269, '11': 4, 'superpower': 2230, 'dominated': 700, 'front': 948, 'decline': 610, 'wto': 2548, 'european': 799, 'mired': 1474, 'degrading': 627, 'osce': 1614, 'intense': 1206, 'shooting': 2082, 'breeze': 329, 'heyday': 1074, 'breathing': 328, 'neck': 1522, 'surpassed': 2238, 'purchasing': 1811, 'parity': 1636, 'ppp': 1735, 'rise': 1945, 'expanding': 833, 'greece': 1028, 'homeland': 1088, 'weakest': 2498, 'emphasize': 753, 'degeneration': 625, 'samesex': 1995, 'marriages': 1420, 'shaky': 2065, 'foundations': 935, 'battle': 261, 'ship': 2078, 'hole': 1087, 'hull': 1115, 'waterline': 2491, 'visible': 2459, 'guns': 1041, 'enemy': 765, 'speed': 2159, 'melting': 1445, 'pot': 1729, 'spoken': 2163, 'bill': 290, 'clintons': 438, 'tenure': 2279, 'effective': 734, 'nation': 1512, 'approaches': 175, 'anglosaxons': 151, 'shoulder': 2085, 'white': 2519, 'mans': 1411, 'burden': 355, 'latinos': 1315, 'culture': 569, 'perhaps': 1670, 'goals': 1008, 'pursue': 1814, 'retreating': 1925, 'leave': 1329, 'behind': 273, 'hotbeds': 1096, 'tension': 2277, 'unfinished': 2402, 'wars': 2483, 'armed': 186, 'conflict': 491, 'middle': 1462, 'iraq': 1237, 'ruins': 1970, 'retreat': 1924, 'results': 1922, 'degradation': 626, 'applying': 173, 'transatlantic': 2349, 'ttip': 2378, 'bringing': 340, 'together': 2323, 'golden': 1013, 'bullion': 353, 'gaining': 971, 'insert': 1193, 'changes': 407, 'mentioned': 1450, 'unite': 2407, 'lisbon': 1357, 'vladivostok': 2465, 'federation': 877, 'shies': 2074, 'cold': 445, 'regard': 1869, 'psychological': 1805, 'informational': 1188, 'standoff': 2175, 'waging': 2472, 'fronts': 950, 'affirmation': 92, 'returning': 1927, 'army': 187, 'units': 2409, 'stationing': 2187, 'forces': 919, 'borders': 315, 'deploying': 647, 'missile': 1477, 'elements': 744, 'launching': 1318, 'debates': 603, 'review': 1930, 'intermediaterange': 1213, 'treaty': 2361, 'inf': 1182, 'philip': 1683, 'hammond': 1044, 'june': 1271, 'kingdom': 1288, 'site': 2110, 'soil': 2129, 'amid': 143, 'heightened': 1068, 'tensions': 2278, 'sight': 2090, 'smouldering': 2123, 'restore': 1918, 'normandy': 1552, 'mission': 1479, 'danger': 588, 'sparking': 2149, 'stepping': 2192, 'savior': 2005, 'deployed': 646, 'baltics': 241, 'black': 298, 'imminent': 1142, 'situation': 2112, 'exacerbate': 817, 'europes': 801, 'action': 70, 'atlantic': 213, 'possibility': 1724, 'dare': 590, 'pull': 1809, 'trigger': 2365, 'trip': 2367, 'john': 1263, 'kerry': 1278, 'sochi': 2125, 'testifies': 2284, 'ready': 1845, 'uncontrolled': 2398, 'escalation': 784, 'antirussian': 162, 'contrary': 504, 'happy': 1052, 'lift': 1344, 'face': 855, 'reduce': 1860, 'donbass': 702, 'emphasizes': 754, 'importance': 1150, 'interstate': 1218, 'associations': 210, 'special': 2152, 'play': 1700, 'lead': 1322, 'enclaves': 759, 'euroatlantic': 797, 'agreed': 102, 'integrate': 1202, 'success': 2223, 'summits': 2229, 'greatly': 1027, 'scf': 2013, 'httpwwwstrategiccultureorgnews20150711emergencegreateurasialoomingagainstbackgrounddecliningwesthtml': 1110, 'planning': 1696, 'establish': 787, 'october': 1577, 'fsu': 953, 'theme': 2291, 'g20': 968, 'ministers': 1471, 'effort': 736, 'multiply': 1505, 'bypass': 363, 'republics': 1903, 'iranrussia': 1235, 'chamber': 403, 'asadollah': 195, 'asgaroladi': 196, 'tehran': 2271, 'possibilities': 1723, 'chapter': 412, 'implications': 1148, 'private': 1766, 'sides': 2089, 'rials': 1933, 'aside': 199, 'euros': 802, 'pounds': 1732, 'unilateral': 2404, 'imposed': 1153, 'irans': 1236, 'tehrans': 2272, 'program': 1781, 'bans': 252, 'prompted': 1789, 'hassan': 1056, 'rouhani': 1959, 'took': 2327, 'office': 1581, 'prosperity': 1796, '150': 8, 'transferred': 2351, 'ali': 120, 'tayyebnia': 2268, 'traded': 2341, 'httpwwwglobalresearchcadedollarizationiranrussiaplanningtoestablishjointbank5407736': 1106, 'staff': 2170, '13th': 6, 'roussef': 1961, 'manmohan': 1409, 'singh': 2105, 'hu': 1111, 'jintao': 1261, 'african': 95, 'jacob': 1252, 'zuma': 2572, 'bricss': 336, 'los': 1381, 'cabos': 365, 'baja': 239, 'california': 366, 'mexico': 1459, '2012': 18, 'roberto': 1952, 'stuckertafpgetty': 2217, 'images': 1134, '15': 7, 'fortaleza': 929, '5th': 45, 'durban': 714, 'forthcoming': 930, 'northern': 1554, 'ratified': 1841, 'legislatures': 1334, 'lending': 1336, 'seeking': 2033, 'faults': 870, 'ie': 1126, 'rich': 1934, 'conditions': 486, 'upon': 2426, 'borrower': 316, 'ought': 1617, 'choked': 425, 'heavy': 1064, 'bureaucracy': 356, 'stability': 2167, 'fluctuate': 908, 'symbolize': 2248, 'particular': 1645, 'agencies': 96, 'presents': 1753, 'dependence': 643, 'uscentered': 2432, 'finances': 892, 'borrowers': 317, 'intention': 1207, 'intervene': 1219, 'basic': 258, 'provide': 1800, 'lower': 1388, 'cost': 526, 'headquarters': 1059, 'focus': 911, 'upsanddowns': 2427, 'initially': 1191, 'comparing': 469, 'size': 2113, 'reminder': 1890, 'towards': 2338, 'httpwwwpopularresistanceorglaunchofbricsbankalternativetoimf': 1108, 'subject': 2219, 'httpswwwforbescomsitesnathanlewis20230716thebricsgoforgold': 1102, 'bitches': 296, 'ok': 1588, 'trader': 2344, 'convenience': 509, 'immediately': 1139, 'gbp': 981, 'mainly': 1396, 'walmart': 2476, 'bananas': 242, 'sell': 2038, 'dealings': 601, 'tax': 2266, 'offices': 1582, 'exchangeable': 825, 'per': 1668, 'wine': 2525, 'figure': 886, 'owe': 1625, 'correlation': 524, 'flexibility': 906, 'access': 60, 'german': 991, 'function': 962, 'strange': 2202, 'beholden': 274, 'whoever': 2521, 'choice': 424, 'threaten': 2310, 'behaving': 272, 'preferences': 1746, 'tourism': 2336, 'immigration': 1141, 'moment': 1484, 'financially': 894, 'immigrating': 1140, 'businesses': 359, 'appetite': 171, 'labour': 1305, 'satisfied': 2000, 'industries': 1176, 'silly': 2097, 'hello': 1070, 'generally': 984, 'acceptedthen': 59, 'insignificant': 1196, 'commodityis': 461, 'useless': 2437, '55is': 44}\nstop words = None\ncol_names= ['01' '10' '100' ... 'zerohedge' 'zerohedgecom' 'zuma']\n\n\n\nsia = SIA()\nresults = []\n\nfor tweet in df['cleaned_tweets']:  \n    polarity = sia.polarity_scores(tweet)\n    polarity['cleaned_tweets'] = tweet \n    results.append(polarity)\n\n\nsentiment_df = pd.DataFrame(results)\npprint(sentiment_df.head())\n\n     neg    neu    pos  compound  \\\n0  0.000  1.000  0.000    0.0000   \n1  0.289  0.551  0.160   -0.8885   \n2  0.039  0.939  0.022   -0.2732   \n3  0.058  0.765  0.177    0.8748   \n4  0.000  0.705  0.295    0.7269   \n\n                                      cleaned_tweets  \n0                                          burn flag  \n1  plan kill petro dollar run manipulated western...  \n2  difficult know whats going come summit next we...  \n3  lot unpack brics would bring table officially ...  \n4  nice feel way thats brics supped make feel lik...  \n\n\n\nsentiment_df\n\n\n\n\n\n\n\n\nneg\nneu\npos\ncompound\ncleaned_tweets\n\n\n\n\n0\n0.000\n1.000\n0.000\n0.0000\nburn flag\n\n\n1\n0.289\n0.551\n0.160\n-0.8885\nplan kill petro dollar run manipulated western...\n\n\n2\n0.039\n0.939\n0.022\n-0.2732\ndifficult know whats going come summit next we...\n\n\n3\n0.058\n0.765\n0.177\n0.8748\nlot unpack brics would bring table officially ...\n\n\n4\n0.000\n0.705\n0.295\n0.7269\nnice feel way thats brics supped make feel lik...\n\n\n...\n...\n...\n...\n...\n...\n\n\n115\n0.000\n0.741\n0.259\n0.2732\nwell see 9 years heres latest subject httpswww...\n\n\n116\n0.582\n0.000\n0.418\n-0.2732\nbitches lol\n\n\n117\n0.080\n0.826\n0.093\n0.2039\nok trader would think new currency starts lot ...\n\n\n118\n0.000\n0.651\n0.349\n0.5994\nlol usa gold reserves world brics silly happen...\n\n\n119\n0.271\n0.729\n0.000\n-0.6369\nbrics generally acceptedthen currency becomes ...\n\n\n\n\n120 rows × 5 columns\n\n\n\n\nsentiment_df['label']= 0\nsentiment_df['label'] = np.where(sentiment_df['compound'] &gt; 0, 1, sentiment_df['label'])  # Set 'label' to 1 where 'compound' &gt; 0.2\nsentiment_df['label'] = np.where(sentiment_df['compound'] &lt; 0, -1, sentiment_df['label'])  # Set 'label' to -1 where 'compound' &lt; -0.2\n\nsentiment_df.head()\n\n\n\n\n\n\n\n\nneg\nneu\npos\ncompound\ncleaned_tweets\nlabel\n\n\n\n\n0\n0.000\n1.000\n0.000\n0.0000\nburn flag\n0\n\n\n1\n0.289\n0.551\n0.160\n-0.8885\nplan kill petro dollar run manipulated western...\n-1\n\n\n2\n0.039\n0.939\n0.022\n-0.2732\ndifficult know whats going come summit next we...\n-1\n\n\n3\n0.058\n0.765\n0.177\n0.8748\nlot unpack brics would bring table officially ...\n1\n\n\n4\n0.000\n0.705\n0.295\n0.7269\nnice feel way thats brics supped make feel lik...\n1\n\n\n\n\n\n\n\n\nfinaldf=sentiment_df[['cleaned_tweets', 'label']]\n\n\nfinaldf=pd.DataFrame(finaldf)\n\ncsv_file='../data/sentiment.csv'\nfinaldf.to_csv(csv_file, index=True)\n\n\nfinaldf\n\n\n\n\n\n\n\n\ncleaned_tweets\nlabel\n\n\n\n\n0\nburn flag\n0\n\n\n1\nplan kill petro dollar run manipulated western...\n-1\n\n\n2\ndifficult know whats going come summit next we...\n-1\n\n\n3\nlot unpack brics would bring table officially ...\n1\n\n\n4\nnice feel way thats brics supped make feel lik...\n1\n\n\n...\n...\n...\n\n\n115\nwell see 9 years heres latest subject httpswww...\n1\n\n\n116\nbitches lol\n-1\n\n\n117\nok trader would think new currency starts lot ...\n1\n\n\n118\nlol usa gold reserves world brics silly happen...\n1\n\n\n119\nbrics generally acceptedthen currency becomes ...\n-1\n\n\n\n\n120 rows × 2 columns\n\n\n\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Assuming you have a DataFrame with 'text' and 'label' columns\nX = finaldf['cleaned_tweets']  # Text data\nY = finaldf['label']  # Target labels\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42, test_size=0.2)\nx_train_valid, x_valid_test, y_train_valid, y_valid_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\nprint('Train data    :'+str(X_train.shape))\nprint('Test data     :'+str(X_test.shape))\nprint('Train Output  :'+str(y_train.shape))\nprint('Test Output   :'+str(y_test.shape))\nprint('Valid Train data    :'+str(x_train_valid.shape))\nprint('Valid Test data     :'+str(x_valid_test.shape))\nprint('Valid Train Output  :'+str(y_train_valid.shape))\nprint('Valid Test Output   :'+str(y_valid_test.shape))\n\nTrain data    :(96,)\nTest data     :(24,)\nTrain Output  :(96,)\nTest Output   :(24,)\nValid Train data    :(12,)\nValid Test data     :(12,)\nValid Train Output  :(12,)\nValid Test Output   :(12,)\n\n\n\n# Feature extraction using TF-IDF\ntfidf_vectorizer = TfidfVectorizer()\nX_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\nX_test_tfidf = tfidf_vectorizer.transform(X_test)\nx_train_valid_tfidf= tfidf_vectorizer.transform(x_train_valid)\n\n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay\n\nmnb = MultinomialNB()\nmnb.fit(X_train_tfidf, y_train)\n\n# training data\ny_pred_train = mnb.predict(X_train_tfidf)\n\n# testing data\ny_pred_test = mnb.predict(X_test_tfidf)\n\n#validation\ny_pred_val = mnb.predict(x_train_valid_tfidf)\n\n\n\n\naccuracy_train = accuracy_score(y_train, y_pred_train)\nprecision_train = precision_score(y_train, y_pred_train, average=\"micro\")\nrecall_train = recall_score(y_train, y_pred_train, average=\"micro\")\nf1_train = f1_score(y_train, y_pred_train, average=\"micro\")\n\nprint(\"Training Set Metrics:\")\nprint(\"Accuracy:\", accuracy_train)\nprint(\"Precision Score:\", precision_train)\nprint(\"Recall Score:\", recall_train)\nprint(\"F1 Score:\", f1_train)\n\nTraining Set Metrics:\nAccuracy: 0.6354166666666666\nPrecision Score: 0.6354166666666666\nRecall Score: 0.6354166666666666\nF1 Score: 0.6354166666666666\n\n\n\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprecision_test = precision_score(y_test, y_pred_test, average=\"micro\")\nrecall_test = recall_score(y_test, y_pred_test, average=\"micro\")\nf1_test = f1_score(y_test, y_pred_test, average=\"micro\")\n\nprint(\"Testing Set Metrics:\")\nprint(\"Accuracy:\", accuracy_train*100)\nprint(\"Precision Score:\", precision_train*100)\nprint(\"Recall Score:\", recall_train*100)\nprint(\"F1 Score:\", f1_train*100)\n\nTesting Set Metrics:\nAccuracy: 63.541666666666664\nPrecision Score: 63.541666666666664\nRecall Score: 63.541666666666664\nF1 Score: 63.541666666666664\n\n\n\n#accuracy_validation = accuracy_score(y_train_valid, y_pred_val)\n#precision_validation = precision_score(y_train_valid, y_pred_val, average=\"micro\")\n#recall_validation = recall_score(y_train_valid, y_pred_val, average=\"micro\")\n#f1_validation = f1_score(y_train_valid, y_pred_val, average=\"micro\")\n\n\nConfusionMatrixDisplay.from_predictions(y_train, y_pred_train)\nConfusionMatrixDisplay.from_predictions(y_test, y_pred_test)\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x158909480&gt;"
  },
  {
    "objectID": "codes/final_text.html",
    "href": "codes/final_text.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import requests\nimport json\nimport re\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n\ndef text(text):\n    if isinstance(text, str):\n        return text.lower()  # Example: Convert text to lowercase\n    return text  # If not a string, return as is\n\n\nbaseURL = \"https://newsapi.org/v2/everything?\"\ntotal_requests = 2\nverbose = True\nAPI_KEY = ['ab5b4817320d445a8b369a95be58c90a']\nTOPIC = ['fiscal policy', 'macroeconomic']\n\npost1 = {\n    'apiKey': API_KEY,\n    'q': '+' + TOPIC[0],\n    'sortBy': 'relevancy',\n    'totalRequests': 1\n}\n\npost2 = {\n    'apiKey': API_KEY,\n    'q': '+' + TOPIC[1],\n    'sortBy': 'relevancy',\n    'totalRequests': 1\n}\n\n\ndef dumpjson(baseURL,URLpost):\n    response = requests.get(baseURL, URLpost)\n    return response.json()\n\nfiscalpolicy = dumpjson(baseURL,post1)\nmacroeconomic = dumpjson(baseURL,post2)\n\n\nprint(fiscalpolicy)\n\n{'status': 'ok', 'totalResults': 2947, 'articles': [{'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Phil Rosen', 'title': \"Here are the biggest risks to markets and the economy from the Fed's higher-for-longer regime, according to Goldmans Sachs\", 'description': 'Strategists warned tight policy will curb economic growth, rattle stocks, and fuel pain for corporations that had grown accustom to easy money.', 'url': 'https://markets.businessinsider.com/news/stocks/stock-market-outlook-goldman-sachs-economy-risks-fed-policy-rates-2023-10', 'urlToImage': 'https://i.insider.com/65241ec86e038039826d5372?width=1200&format=jpeg', 'publishedAt': '2023-10-09T15:31:34Z', 'content': \"Reuters\\r\\n&lt;ul&gt;\\n&lt;li&gt;Goldman Sachs warned the Fed's higher-for-longer rate regime will weigh on the economy and markets.&lt;/li&gt;\\n&lt;li&gt;The main implication is a prolonged drag on GDP, strategists said.\\xa0&lt;/li&gt;… [+3581 chars]\"}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Joseph Wilkins', 'title': 'Stephanie Pomboy sounds the alarm on corporate bankruptcies, warning it could herald financial catastrophe', 'description': 'Many expert \"still fail to connect the dots\" on corporate bankruptcies, Pomboy said. \"If they did, they\\'d be calling for a fiscal & monetary response that makes 2008-9 look like peanuts,\" she added.', 'url': 'https://www.businessinsider.com/us-corporate-bankruptcies-sign-of-financial-catastrophe-stephanie-pomboy-2023-9', 'urlToImage': 'https://i.insider.com/65004618db12d30019064bfa?width=1200&format=jpeg', 'publishedAt': '2023-09-12T13:42:01Z', 'content': 'John Lamparski/Getty Images\\r\\n&lt;ul&gt;\\n&lt;li&gt;Stephanie Pomboy has warned of the economic risks signaled by rising corporate bankruptcies in the US.&lt;/li&gt;\\n&lt;li&gt;First-half US corporate bankruptcies surged to th… [+2149 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Jennifer Sor', 'title': \"The US debt situation looks 'unsustainable,' and corporate defaults are rising, IMF warns\", 'description': '\"Under unchanged policies, debt dynamics in the US are very unfavorable,\" according to the International Monetary Fund.', 'url': 'https://markets.businessinsider.com/news/bonds/us-debt-crisis-government-spending-unsustainable-defaults-interest-rates-imf-2023-10', 'urlToImage': 'https://i.insider.com/54692dafeab8eab34d7efd8c?width=1200&format=jpeg', 'publishedAt': '2023-10-11T16:00:48Z', 'content': \"The government has already racked up a $1.5 trillion deficit in the first 11 months of the fiscal year, per the Brookings Institution.Getty Images\\r\\n&lt;ul&gt;\\n&lt;li&gt;The US's $33 trillion debt pile is reflect… [+2881 chars]\"}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Filip De Mott', 'title': \"US debt risks a 'slow-motion collision' with the fight against inflation, Goldman Sachs says\", 'description': '\"This suggests the US and UK are the most obvious candidates for a duration risk premium repricing.\"', 'url': 'https://markets.businessinsider.com/news/bonds/us-debt-inflation-deficit-growth-fed-rate-hikes-quantitative-tightening-2023-9', 'urlToImage': 'https://i.insider.com/65020ae7992da60019ebbffb?width=1200&format=jpeg', 'publishedAt': '2023-09-13T20:11:41Z', 'content': 'Federal Reserve Chairman Jerome Powell and Treasury Secretary Janet Yellen participate in a meeting of the Financial Stability Oversight Council.Kevin Dietsch/Getty Images\\r\\n&lt;ul&gt;\\n&lt;li&gt;Efforts to bring … [+2255 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Joseph Wilkins', 'title': 'Treasury yields highest since 2007 after US debt hits a record $33 trillion', 'description': 'The Treasury Department cited tax cuts, coronavirus stimulus packages and lower tax revenues as contributing factors in the debt spike.', 'url': 'https://markets.businessinsider.com/news/bonds/treasury-yields-jump-us-debt-hits-record-33-trillion-2023-9', 'urlToImage': 'https://i.insider.com/650ad09d12dc4f001a170f71?width=1200&format=jpeg', 'publishedAt': '2023-09-20T13:27:05Z', 'content': 'Treasury yields are at a 16-year high.Moe Zoyari/Bloomberg\\r\\n&lt;ul&gt;\\n&lt;li&gt;US national debt has ballooned to $33 trillion for the first time.&lt;/li&gt;\\n&lt;li&gt;The federal government could face another shutdown by … [+1694 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Phil Rosen', 'title': \"Fiscal excess, the power of Main Street, and US 'debasement': Here are the themes BofA says will dominate markets for the rest of this decade\", 'description': 'Strategists pointed to the end of easy money, more money flowing to Main Street, commodities gaining over stocks, and more.', 'url': 'https://markets.businessinsider.com/news/stocks/stock-market-investment-themes-war-inflation-monetary-fiscal-policy-rates-2023-9', 'urlToImage': 'https://i.insider.com/6517216a846a2f0019a11575?width=1200&format=jpeg', 'publishedAt': '2023-10-01T12:30:01Z', 'content': 'Earth from space as seen by Apollo 8 astronauts.NASA\\r\\n&lt;ul&gt;\\n&lt;li&gt;The era of easy money is over, and new trends will dominate global markets in the coming years.\\xa0&lt;/li&gt;\\n&lt;li&gt;Bank of America strategists li… [+4320 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Joseph Wilkins', 'title': \"The stock market bull run is in its 'twilight', Fidelity's global macro head says\", 'description': '\"If long yields keep climbing, it will leave a mark on valuations, per the discounted cash flow model (DCF), regardless of earnings. It all suggests that the secular bull market for equities is in its twilight,\" Jurrien Timmer said.', 'url': 'https://markets.businessinsider.com/news/stocks/stock-market-bull-run-in-twilight-fidelity-global-macro-head-2023-9', 'urlToImage': 'https://i.insider.com/6501ca991afe8f0019e98956?width=1200&format=jpeg', 'publishedAt': '2023-09-14T10:01:14Z', 'content': 'Richard Vogel/AP\\r\\n&lt;ul&gt;\\n&lt;li&gt;Despite a flat start to September, the S&P 500 index is still boasting impressive year-to-date gains.&lt;/li&gt;\\n&lt;li&gt;The benchmark stock-market gauge is up by over 16% so far in … [+2216 chars]'}, {'source': {'id': None, 'name': 'Slashdot.org'}, 'author': 'msmash', 'title': 'How a Thinktank Got the Cost of Net Zero for the UK Wildly Wrong', 'description': 'An anonymous reader shares a report: Imagine demanding an \"honest\" debate over the cost of net zero in a report full of errors that even a schoolboy would be embarrassed about. Then imagine getting coverage of your report in the Sun, Times, Daily Mail, Daily …', 'url': 'https://science.slashdot.org/story/23/09/29/1632223/how-a-thinktank-got-the-cost-of-net-zero-for-the-uk-wildly-wrong', 'urlToImage': 'https://a.fsdn.com/sd/topics/earth_64.png', 'publishedAt': '2023-09-29T18:00:00Z', 'content': 'Imagine demanding an \"honest\" debate over the cost of net zero in a report full of errors that even a schoolboy would be embarrassed about. Then imagine getting coverage of your report in the Sun, Ti… [+1840 chars]'}, {'source': {'id': None, 'name': 'The New Yorker'}, 'author': 'Isaac Chotiner', 'title': 'Why So Many Migrants Are Coming to New York', 'description': 'Isaac Chotiner interviews Muzaffar Chishti, an immigration-policy expert, on the recent influx of migrants in New York City.', 'url': 'https://www.newyorker.com/news/q-and-a/why-so-many-migrants-are-coming-to-new-york', 'urlToImage': 'https://media.newyorker.com/photos/650232b7f7614bb9cc793a3d/16:9/w_1280,c_limit/Chotiner-%20Q%20&%20A%20Muzaffar%20Chishti.jpg', 'publishedAt': '2023-09-15T14:52:14Z', 'content': 'Last week, Mayor Eric Adams told a roomful of people that the recent influx of migrants will destroy New York City. More than a hundred and ten thousand have arrived in the city in recent months, and… [+7955 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Filip De Mott', 'title': 'Global debt hit an all time high of $307 trillion in the first half of 2023 - and developed economies like the US are piling it up at a faster pace', 'description': 'Global debt levels reached a new record this year, while debt-to-GDP ratios are on the rise again, the Institute of International Finance reported.', 'url': 'https://markets.businessinsider.com/news/currencies/global-debt-record-trillion-developed-economies-gdp-us-banks-iif-2023-9', 'urlToImage': 'https://i.insider.com/6509e465bf943d00195bc09a?width=1200&format=jpeg', 'publishedAt': '2023-09-20T12:44:40Z', 'content': 'Getty Images\\r\\n&lt;ul&gt;\\n&lt;li&gt;Global debt hit an all-time high of $307 trillion in the first half of 2023, the Institute of International Finance reported.&lt;/li&gt;\\n&lt;li&gt;Global debt-to-GDP has resumed an upward … [+2215 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Paul Iddon', 'title': \"NATO's 2 least-friendly members have a history of aerial showdowns, and they're both about to get new stealth jets\", 'description': 'Greek and Turkish jets often tangle with each other over the Aegean, and both sides could soon have much better jets to do it with.', 'url': 'https://www.businessinsider.com/nato-greece-turkey-plan-to-get-new-stealth-fighter-jets-2023-9', 'urlToImage': 'https://i.insider.com/6500a18c7cfadd001913c453?width=1200&format=jpeg', 'publishedAt': '2023-09-12T21:47:01Z', 'content': 'Turkish President Recep Tayyip Erdogan in a TF KAAN during a ceremony in Ankara on May 1.Mehmet Kaman/Anadolu Agency via Getty Images\\r\\n&lt;ul&gt;\\n&lt;li&gt;Greece and Turkey both plan to roll out new stealth jet… [+5965 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Associated Press', 'title': \"A government shutdown would be a 'gut punch' to Head Start programs that serve 10,000 low income children\", 'description': 'Lawmakers have until Saturday at midnight to make a deal and avoid a shutdown, which would immediately cease federal funds to Head Start programs.', 'url': 'https://www.businessinsider.com/shutdown-would-gut-punch-childrens-head-start-programs-2023-9', 'urlToImage': 'https://i.insider.com/651848975640b20019d791a2?width=1200&format=jpeg', 'publishedAt': '2023-09-30T16:42:57Z', 'content': 'Alliance for Community Empowerment, Director of Early Learning Tanya Lloyd, right, interacts with a child in the Head Start program, Thursday, Sept. 28, 2023, in Bridgeport, Connecticut.Jessica Hill/… [+5738 chars]'}, {'source': {'id': None, 'name': 'NPR'}, 'author': 'Julie Rovner', 'title': 'What happens to health programs if the federal government shuts down?', 'description': \"Medicare and Medicaid are mandatory spending programs and that keeps them relatively safe in the early days of the shutdown, but 42% of the Department of Health's staff will be furloughed.\", 'url': 'https://www.npr.org/sections/health-shots/2023/09/27/1201996321/what-happens-to-health-programs-if-the-federal-government-shuts-down', 'urlToImage': 'https://media.npr.org/assets/img/2023/09/27/gettyimages-1690904698_wide-e931687b7fff0521da5404987949d6771dc42356-s1400-c100.jpg', 'publishedAt': '2023-09-27T15:10:03Z', 'content': 'Rep. Matt Gaetz (R-FL) and other members of the right-wing House Freedom Caucus could force a federal government shutdown Oct. 1. The National Institutes of Health and the Centers for Disease Control… [+8045 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Jennifer Sor', 'title': 'Inflation could come roaring back 1970s-style. Here are 4 reasons why markets should be concerned, according to Deutsche Bank.', 'description': 'The US economy is still at risk of inflation expectations spiraling out of control, Deutsche Bank warned.', 'url': 'https://www.businessinsider.com/inflation-us-economic-outlook-fed-interest-rates-stagflation-recession-deutsche-2023-10', 'urlToImage': 'https://i.insider.com/6525504a6561dd877e75cadd?width=1200&format=jpeg', 'publishedAt': '2023-10-10T16:20:03Z', 'content': \"It's too early for the Fed to declare victory on inflation, Deutsche Bank warned.Thomson Reuters\\r\\n&lt;ul&gt;\\n&lt;li&gt;There is still a risk inflation expectations spiral out of control, Deutsche Bank warned.&lt;/l… [+3822 chars]\"}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Zahra Tayeb', 'title': \"Wall Street is turning cautious on US stocks, while some experts warn of pain ahead. Here's what JPMorgan, Jeremy Grantham and others have said.\", 'description': 'Wall Street banks are turning more defensive with their stock-market strategies, while some experts have warned investors to brace for pain.', 'url': 'https://markets.businessinsider.com/news/stocks/stock-market-outlook-jpmorgan-grantham-griffin-warn-pain-ahead-2023-9', 'urlToImage': 'https://i.insider.com/640f546aa3b2a10018b2b2f1?width=1200&format=jpeg', 'publishedAt': '2023-09-17T09:00:01Z', 'content': 'TIMOTHY A. CLARY / Getty\\r\\n&lt;ul&gt;\\n&lt;li&gt;Investors are turning increasingly wary of what the end of 2023 brings for stocks and the US economy.\\xa0&lt;/li&gt;\\n&lt;li&gt;Wall Street banks including JPMorgan and Bank of Ame… [+4470 chars]'}, {'source': {'id': None, 'name': 'NPR'}, 'author': 'Megan Pratz', 'title': 'Who is Rep. Patrick McHenry and why is he the interim House speaker?', 'description': 'McHenry, the bespectacled and bow-tied gentleman from North Carolina, is in the spotlight as the speaker pro tempore, the reluctant leader of a paralyzed House of Representatives.', 'url': 'https://www.npr.org/2023/10/04/1203625399/patrick-mchenry-interim-speaker-kevin-mccarthy-house', 'urlToImage': 'https://media.npr.org/assets/img/2023/10/04/gettyimages-1717075831_wide-0b7f0b20271f3bae747aaaba47bdc817711546dd-s1400-c100.jpg', 'publishedAt': '2023-10-04T18:59:10Z', 'content': 'House speaker pro tempore Patrick McHenry (center) walks out of the offices of former Speaker of the House Kevin McCarthy on Wednesday. The process is underway to replace McCarthy after he was ousted… [+4029 chars]'}, {'source': {'id': 'abc-news', 'name': 'ABC News'}, 'author': 'Kiara Alfonseca', 'title': 'Overhaul of K-12 schooling becomes a flashpoint in Ohio', 'description': \"Ohio's K-12 education system has become the center of a legal battle between lawmakers and members of the State Board of Education.\", 'url': 'https://abcnews.go.com/US/overhaul-12-education-center-lawsuit-ohio/story?id=103655330', 'urlToImage': 'https://i.abcnewsfe.com/a/a484d883-d163-4253-ba4d-58594dff4d9a/dewine-ap-er-231002_1696265475141_hpMain_16x9.jpg?w=992', 'publishedAt': '2023-10-03T18:57:32Z', 'content': \"Ohio's K-12 education system has become the center of a legal battle between lawmakers and members of the State Board of Education.\\r\\nOhio Gov. Mike DeWine passed HB 33 in July as part of the state's … [+3824 chars]\"}, {'source': {'id': None, 'name': 'Bloomberglinea.com'}, 'author': 'Patrick Gillespie', 'title': \"Argentina's Senate Approves Bill to Eliminate Income Tax\", 'description': 'The upper house approved the legislation late Thursday advocated by Economy Minister and presidential candidate Sergio Massa', 'url': 'https://www.bloomberglinea.com/english/argentinas-senate-approves-bill-to-eliminate-income-tax/', 'urlToImage': 'https://www.bloomberglinea.com/resizer/pmaZ-1MBpRkn9cETvoD9-9Tej10=/1024x0/filters:format(webp):quality(75)/cloudfront-us-east-1.images.arcpublishing.com/bloomberglinea/D6YK5OOBS4FI2SWBKC6QGIFWBA.jpg', 'publishedAt': '2023-10-09T16:26:45Z', 'content': 'Bloomberg — Argentinas upper house of congress approved a bill late Thursday that will eliminate income taxes for almost all formal workers, a measure poised to put more pressure on a ballooning fisc… [+1675 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Filip De Mott', 'title': 'Argentina can dollarize without dollars, says economist who made the switch before', 'description': '\"For Milei\\'s plan to work, he needs nothing,\" Francisco Zalles said, referring to Argentina\\'s presidential frontrunner. \"He just needs to dollarize.\"', 'url': 'https://markets.businessinsider.com/news/currencies/argentina-dollarization-peso-dollars-economist-presidential-javier-milei-recession-inflation-2023-9', 'urlToImage': 'https://i.insider.com/6501dc841afe8f0019e99dc3?width=1200&format=jpeg', 'publishedAt': '2023-09-13T18:06:44Z', 'content': \"AGUSTIN MARCARIAN/Reuters\\r\\n&lt;ul&gt;\\n&lt;li&gt;Argentina's dollar scarcity shouldn't stop it from dollarizing, Francisco Zalles told Bloomberg.&lt;/li&gt;\\n&lt;li&gt;The economist previously helped Ecuador dollarize in 2000… [+2850 chars]\"}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Filip De Mott', 'title': \"The market's heaviest hitters are sounding the alarm on US debt\", 'description': '\"I\\'m not saying get out. I\\'m just saying that assets have to go up or else the economy will not do well,\" Bill Gross said.', 'url': 'https://markets.businessinsider.com/news/bonds/us-debt-ray-dalio-bill-gross-jeffrey-gundlach-bond-market-2023-9', 'urlToImage': 'https://i.insider.com/65047d29956dba001ace7b4e?width=1200&format=jpeg', 'publishedAt': '2023-09-16T12:30:01Z', 'content': 'Bridgewater founder Ray Dalio.Brendan McDermid/File Photo/Reuters\\r\\n&lt;ul&gt;\\n&lt;li&gt;Three market experts have cited concern that growing US debt will send interest rates up.&lt;/li&gt;\\n&lt;li&gt;Ray Dalio and Bill Gross… [+3568 chars]'}, {'source': {'id': None, 'name': 'Yahoo Entertainment'}, 'author': 'David Randall and Dhara Ranasinghe', 'title': 'Full US government shutdown likely, could impact Fed -PIMCO', 'description': 'A full, lengthy shutdown of the U.S. government is \"likely\" at the end of the month and could leave the Federal Reserve reluctant to raise interest rates in ...', 'url': 'https://ca.finance.yahoo.com/news/full-us-government-shutdown-likely-155245776.html', 'urlToImage': 'https://media.zenfs.com/en/reuters.com/ffba8f6f9ad86a63fa5f716a2330eafa', 'publishedAt': '2023-09-19T15:52:45Z', 'content': 'By David Randall and Dhara Ranasinghe\\r\\nNEW YORK (Reuters) - A full, lengthy shutdown of the U.S. government is \"likely\" at the end of the month and could leave the Federal Reserve reluctant to raise … [+2650 chars]'}, {'source': {'id': 'abc-news', 'name': 'ABC News'}, 'author': 'Kelly McCarthy', 'title': 'Uber Eats to accept SNAP benefits for groceries following announcement from Instacart', 'description': 'Grocers and shoppers who rely on the Supplemental Nutrition Assistance Program, or SNAP, will soon be able to access benefits using more online grocery services.', 'url': 'https://abcnews.go.com/GMA/Food/uber-eats-accept-snap-benefits-groceries-announcement-instacart/story?id=103461506', 'urlToImage': 'https://i.abcnewsfe.com/a/854c2764-8426-49ad-9e4f-3993a200b074/snap-ebt-grocery-store-thg-gty-230925_1695665492141_hpMain_16x9.jpg?w=992', 'publishedAt': '2023-09-25T20:35:14Z', 'content': 'Shoppers who rely on the Supplemental Nutrition Assistance Program, or SNAP, a federal program to provide food benefits to low-income households, will soon have even easier options for online grocery… [+1889 chars]'}, {'source': {'id': 'al-jazeera-english', 'name': 'Al Jazeera English'}, 'author': 'Al Jazeera', 'title': 'A US gov’t shutdown could negatively affect its credit, Moody’s warns', 'description': 'A shutdown is possible if Congress fails to provide funding for the fiscal year starting October 1.', 'url': 'https://www.aljazeera.com/economy/2023/9/25/a-us-govt-shutdown-could-negatively-affect-its-credit-moodys-warns', 'urlToImage': 'https://www.aljazeera.com/wp-content/uploads/2023/09/AP23255661376430-1694746749.jpg?resize=1920%2C1440', 'publishedAt': '2023-09-25T22:18:20Z', 'content': 'A US government shutdown would negatively affect the countrys credit, credit rating agency Moodys has warned, one month after Fitch downgraded the United States by one notch on the back of a debt cei… [+3006 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Yu Yongding', 'title': 'China’s Policy-Induced Slowdown', 'description': 'While there is little doubt that the era of sustained double-digit growth is over, China is well positioned to achieve a significantly higher growth rate than most developed economies in the foreseeable future. The key to success lies in macroeconomic policy.', 'url': 'https://www.project-syndicate.org/commentary/china-growth-slowdown-reversible-monetary-fiscal-expansion-by-yu-yongding-2023-10', 'urlToImage': 'https://webapi.project-syndicate.org/library/e432c137e5373c39882cf9d2f2666a79.2-1-super.1.jpg', 'publishedAt': '2023-10-03T14:07:23Z', 'content': 'While there is little doubt that the era of sustained double-digit growth is over, China is well positioned to achieve a significantly higher growth rate than most developed economies in the foreseea… [+6051 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'PS Commentators', 'title': 'Industrial Policy Is Back', 'description': 'From semiconductors to electric vehicles, governments are identifying the strategic industries of the future and intervening to support them – abandoning decades of neoliberal orthodoxy in the process. Are industrial policies the key to tackling twenty-first-…', 'url': 'https://www.project-syndicate.org/onpoint/industrial-policy-is-back', 'urlToImage': 'https://webapi.project-syndicate.org/library/133f1eadbc33b89aeba1dd21df21eb98.2-1-super.1.jpg', 'publishedAt': '2023-09-28T12:50:00Z', 'content': 'MILAN The European Union, like much of the rest of the world, is facing powerful economic headwinds. But whereas other major economies, such as China and the United States, are well-positioned to use… [+5681 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Michael Spence', 'title': 'Europe in the Age of Industrial Policy', 'description': 'While China and the US take advantage of scale to pursue large-scale investment in critical sectors, the EU struggles to follow suit, owing to its decentralized fiscal structures and rules limiting government subsidies to industry. A new EU-level investment p…', 'url': 'https://www.project-syndicate.org/commentary/europe-industrial-policy-federal-investment-critical-sectors-high-tech-industries-by-michael-spence-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/cf0e28e9334f53f11e65bfaa3db7de73.2-1-super.1.jpg', 'publishedAt': '2023-09-26T08:40:45Z', 'content': 'While China and the US take advantage of scale to pursue large-scale investment in critical sectors, the EU struggles to follow suit, owing to its decentralized fiscal structures and rules limiting g… [+6586 chars]'}, {'source': {'id': None, 'name': 'AppleInsider'}, 'author': 'news@appleinsider.com (Mike Wuerthele)', 'title': 'There is no official iPhone 15 sales ban in China, regulator confirms', 'description': \"A week after drama started surrounding a rumored iPhone sales ban in China, the country has now made an official statement denying that there is one in place — but device security may be an issue.Less than a week after a vague statement by China's foreign min…\", 'url': 'https://appleinsider.com/articles/23/09/13/there-is-no-official-iphone-15-sales-ban-in-china-regulator-confirms', 'urlToImage': 'https://photos5.appleinsider.com/gallery/50649-99772-iphone-14-and-plus-xl.jpg', 'publishedAt': '2023-09-13T10:56:26Z', 'content': 'A week after drama started surrounding a rumored iPhone sales ban in China, the country has now made an official statement denying that there is one in place — but device security may be an issue.\\r\\nL… [+2362 chars]'}, {'source': {'id': None, 'name': 'Biztoc.com'}, 'author': 'aol.com', 'title': 'This generation of politicians has killed fiscal responsibility', 'description': 'America’s fixation on short-term fiscal policy is shortsighted–and it has serious generational consequences. For several decades, one of the most glaring defects in American fiscal policy has been its narrow focus on what is politically popular at the moment.…', 'url': 'https://biztoc.com/x/2ffa4116c504301f', 'urlToImage': 'https://c.biztoc.com/p/2ffa4116c504301f/s.webp', 'publishedAt': '2023-09-21T19:36:06Z', 'content': 'Americas fixation on short-term fiscal policy is shortsightedand it has serious generational consequences. For several decades, one of the most glaring defects in American fiscal policy has been its … [+302 chars]'}, {'source': {'id': 'al-jazeera-english', 'name': 'Al Jazeera English'}, 'author': 'Al Jazeera', 'title': 'Biden administration to extend US border wall, begin Venezuela deportations', 'description': \"President Joe Biden's government to carry forward a signature policy of former President Donald Trump.\", 'url': 'https://www.aljazeera.com/news/2023/10/6/biden-administration-to-extend-us-border-wall-begin-venezuela-deportations', 'urlToImage': 'https://www.aljazeera.com/wp-content/uploads/2023/10/2023-02-09T000000Z_1094005763_RC2X7Z912UFB_RTRMADP_3_USA-IMMIGRATION-MEXICO-1696576081.jpg?resize=1920%2C1440', 'publishedAt': '2023-10-06T09:31:10Z', 'content': 'The administration of US President Joe Biden will resume deporting Venezuelan migrants, and add sections to the southern border wall, carrying forward a signature policy of former President Donald Tr… [+3849 chars]'}, {'source': {'id': 'time', 'name': 'Time'}, 'author': 'Nik Popli', 'title': 'Kevin McCarthy’s Shutdown Dilemma', 'description': 'He can either shut down the government and possibly save his standing with the GOP hardliners threatening to oust him, or work with Democrats to pass a short-term spending bill and avert a government shutdown—potentially at the expense of his own speakership.', 'url': 'https://time.com/6317751/kevin-mccarthy-government-shutdown-politics-decision/', 'urlToImage': 'https://api.time.com/wp-content/uploads/2023/09/GettyImages-1690608144.jpg?quality=85', 'publishedAt': '2023-09-26T20:17:28Z', 'content': 'With just five days to go until the government shuts down without a spending deal, House Speaker Kevin McCarthy is at a crossroads.\\r\\nHe can either shut down the government and possibly save his stand… [+7870 chars]'}, {'source': {'id': None, 'name': 'The Indian Express'}, 'author': 'Express News Service', 'title': 'Only govt vends for now as Delhi excise policy is extended for 6 more months', 'description': 'The proposal for extension of Excise policy was moved to Chief Minister Arvind Kejriwal on Monday and then sent to the Lieutenant Governor for further approval. Officials said that the LG approved the policy and wrote \"seen\" on the file.', 'url': 'https://indianexpress.com/article/cities/delhi/only-govt-vends-for-now-as-delhi-excise-policy-is-extended-for-6-more-months-8960929/', 'urlToImage': 'https://images.indianexpress.com/2023/09/delhi-liquor-crowd-4col.jpg', 'publishedAt': '2023-09-29T00:15:16Z', 'content': 'The Delhi government has extended the existing Excise Policy for another six months. The department will issue an official notification by Friday, asking the licensees to renew their licenses on pro-… [+915 chars]'}, {'source': {'id': None, 'name': 'Theregister.com'}, 'author': 'Simon Sharwood', 'title': 'BlackBerry to split into two companies, foraging for tastier fare for shareholders', 'description': 'Hopes to float IoT biz and keep infosec ops, then make a second pressing\\nBlackberry has decided to split into two companies.…', 'url': 'https://www.theregister.com/2023/10/05/blackberry_split_plan/', 'urlToImage': 'https://regmedia.co.uk/2016/07/25/blackberry.jpg', 'publishedAt': '2023-10-05T03:58:05Z', 'content': 'Blackberry has decided to split into two companies.\\r\\nThe former mobile email monarch commenced a strategic review in May 2023, under the modest name \"Project Imperium.\" At the time, CEO John Chen sai… [+2285 chars]'}, {'source': {'id': 'abc-news', 'name': 'ABC News'}, 'author': 'VALERIE GONZALEZ Associated Press', 'title': 'Biden administration waives 26 federal laws to allow border wall construction', 'description': 'The Department of Homeland Security announced that the Biden administration leveraged sweeping executive power to waive 26 federal laws in South Texas', 'url': 'https://abcnews.go.com/US/wireStory/biden-administration-waives-26-federal-laws-border-wall-103738662', 'urlToImage': 'https://s.abcnews.com/images/US/abc_news_default_2000x2000_update_16x9_992.jpg', 'publishedAt': '2023-10-04T23:26:04Z', 'content': 'McALLEN, Texas -- The Biden administration announced they waived 26 federal laws in South Texas to allow border wall construction on Wednesday, marking the administrations first use of a sweeping exe… [+4130 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Lucrezia Reichlin', 'title': 'The EU Needs Fiscal Union', 'description': 'The European Union’s need for closer fiscal union and cohesion in tackling looming challenges is now widely recognized. But until policymakers follow through with reforms to bring about these outcomes, EU fiscal and monetary policies will continue to do harm,…', 'url': 'https://www.project-syndicate.org/commentary/european-commission-reform-fiscal-rules-union-by-lucrezia-reichlin-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/7c68e42e61a7811c85ef96a7c50fdea3.2-1-super.1.jpg', 'publishedAt': '2023-09-25T13:12:20Z', 'content': 'The European Unions need for closer fiscal union and cohesion in tackling looming challenges is now widely recognized. But until policymakers follow through with reforms to bring about these outcomes… [+5391 chars]'}, {'source': {'id': None, 'name': 'MarketWatch'}, 'author': 'Frances Yue', 'title': 'Market Extra: This credit gauge shows investors still have risk appetite, despite recession fears', 'description': 'Investors in U.S. corporate bonds are betting on resilience for the U.S. economy, despite the Federal Reserve indicating borrower costs could stay high in 2024.', 'url': 'https://www.marketwatch.com/story/this-credit-gauge-shows-investors-still-have-risk-appetite-despite-recession-fears-2a23079f', 'urlToImage': 'https://images.mktw.net/im-856191/social', 'publishedAt': '2023-09-22T11:30:00Z', 'content': 'A closely watched credit-market gauge shows that investors still have appetite for risk, despite fears of a recession and the possibility that the Federal Reserve may raise its benchmark interest rat… [+4834 chars]'}, {'source': {'id': 'cnn', 'name': 'CNN'}, 'author': None, 'title': 'Washington is quickly hurtling toward a debt crisis', 'description': 'Congressional spenders\\xa0have offered nothing by way of\\xa0a backup plan in case higher interest rates hit the soaring national debt, writes Brian Riedl.', 'url': 'https://www.cnn.com/2023/09/29/opinions/federal-debt-interest-rates-riedl/index.html', 'urlToImage': 'https://media.cnn.com/api/v1/images/stellar/prod/230929141405-debt-crisis-2023.jpg?c=16x9&q=w_800,c_fill', 'publishedAt': '2023-10-03T00:49:34Z', 'content': 'Editors Note: Brian Riedl is a senior fellow at the Manhattan Institute. Follow him on twitter @Brian_Riedl. The opinions expressed in this commentary are his own. View\\xa0more opinion\\xa0on CNN.\\r\\nOn Monda… [+5637 chars]'}, {'source': {'id': 'time', 'name': 'Time'}, 'author': 'Solcyre Burga', 'title': 'Congress Avoided a Government Shutdown—What Happens Next?', 'description': \"Now that a government shutdown has been avoided, what will happen next? Here's what you need to know.\", 'url': 'https://time.com/6319364/congress-government-shutdown-avoided-what-happens-next/', 'urlToImage': 'https://api.time.com/wp-content/uploads/2019/11/congress-2.jpg?quality=85', 'publishedAt': '2023-10-01T18:42:08Z', 'content': 'Congress averted a shutdown on Saturday by mere hours, passing a measure that extends government funding for the next 45 days. The newly-passed stopgap bill funds the government at the current $1.6 t… [+5860 chars]'}, {'source': {'id': None, 'name': 'Forbes'}, 'author': 'Howard Gleckman, Senior Contributor, \\n Howard Gleckman, Senior Contributor\\n https://www.forbes.com/sites/howardgleckman/', 'title': 'How Budget Commissions Can Make It Harder To Cut The Deficit', 'description': 'They either provide political cover for lawmakers who want to achieve a goal but are afraid to act without an external push. Or an excuse to duck crucial policy decisions.', 'url': 'https://www.forbes.com/sites/howardgleckman/2023/09/21/how-budget-commissions-can-make-it-harder-to-cut-the-deficit/', 'urlToImage': 'https://imageio.forbes.com/specials-images/imageserve/650c4e21e7a3f5d84e04412b/0x0.jpg?format=jpg&width=1200', 'publishedAt': '2023-09-21T14:12:55Z', 'content': 'WASHINGTON, DC - April 28: National Commission on Fiscal Responsibility and Reform co-chairmen ... [+] Erskine Bowles, and Alan Simpson during a panel discussion. (Photo by Scott J. Ferrell/Congressi… [+5282 chars]'}, {'source': {'id': 'abc-news', 'name': 'ABC News'}, 'author': 'BILL BARROW Associated Press', 'title': 'Jimmy Carter turns 99 at home with Rosalynn and other family as tributes come from around the world', 'description': 'Jimmy Carter will put off his usual Sunday practice of watching church services online to instead celebrate his 99th birthday with his wife, Rosalynn, and their children, grandchildren and great-grandchildren in Plains', 'url': 'https://abcnews.go.com/US/wireStory/jimmy-carter-turns-99-home-rosalynn-family-tributes-103633642', 'urlToImage': 'https://i.abcnewsfe.com/a/888e192b-8779-4f4f-b2e1-cc2a8d810757/wirestory_19be42d93ca052816aaa06c57c38be1b_16x9.jpg?w=992', 'publishedAt': '2023-10-01T04:52:54Z', 'content': 'ATLANTA -- Jimmy Carter has always been a man of discipline and habit. But the former president will break routine Sunday, putting off his practice of quietly watching church services online to inste… [+7271 chars]'}, {'source': {'id': 'the-times-of-india', 'name': 'The Times of India'}, 'author': 'PTI', 'title': 'Govt aims to complete about 85 pc of road projects on time this fiscal: Highways secretary Anurag Jain', 'description': \"Around 85% of road projects in India are expected to be completed by the end of this fiscal year, according to Anurag Jain, Road Transport and Highways secretary. The government's efforts to expedite clearances and resolve issues have led to improved monitori…\", 'url': 'https://economictimes.indiatimes.com/news/economy/infrastructure/govt-aims-to-complete-about-85-pc-of-road-projects-on-time-this-fiscal-highways-secretary-anurag-jain/articleshow/104156054.cms', 'urlToImage': 'https://img.etimg.com/thumb/msid-104156585,width-1200,height-630,imgsize-134748,overlay-economictimes/photo.jpg', 'publishedAt': '2023-10-04T09:02:21Z', 'content': 'New Delhi: Around 85 per cent of road projects are likely to be completed by the end of this fiscal, as the steps taken by the government to ensure faster clearances like monitoring and quicker resol… [+3465 chars]'}, {'source': {'id': 'business-insider', 'name': 'Business Insider'}, 'author': 'Ayelet Sheffey', 'title': \"The bad math behind Harvard's refusal to do away with legacy admissions\", 'description': \"Elite colleges like Harvard have a not-so-secret reason for giving alumni's kids special treatment: money. But it's actually a big mistake.\", 'url': 'https://www.businessinsider.com/harvard-elite-colleges-legacy-admissions-financial-endowments-alumni-donations-2023-10', 'urlToImage': 'https://i.insider.com/64f24d321b7ced0019c72861?width=1200&format=jpeg', 'publishedAt': '2023-10-09T09:58:02Z', 'content': 'The explosion of endowments at elite colleges has allowed many forward-looking schools to drop their legacy admissions preference with no signs of financial suffering.Chelsea Jia Feng/Insider\\r\\nFor de… [+12698 chars]'}, {'source': {'id': 'bbc-news', 'name': 'BBC News'}, 'author': 'https://www.facebook.com/bbcnews', 'title': \"How Ghana's central bank lost $5bn in one year\", 'description': \"The country's economic crisis has sparked protests and led to calls for the bank's boss to resign.\", 'url': 'https://www.bbc.co.uk/news/business-66947202', 'urlToImage': 'https://ichef.bbci.co.uk/news/1024/branded_news/107EB/production/_131336576_gettyimages-1245602083.jpg', 'publishedAt': '2023-10-05T23:54:58Z', 'content': 'Ghana - once touted as a trailblazing African economic success story - is facing an unprecedented financial crisis.\\r\\nThis week, hundreds of protestors took to the streets in the capital Accra, callin… [+6122 chars]'}, {'source': {'id': None, 'name': 'Euronews'}, 'author': None, 'title': 'Central Bank of Denmark urges caution over economic future', 'description': \"Denmark's Nationalbank has called for economic caution with regard to future policy making, also predicting hovering inflation to come.\", 'url': 'https://www.euronews.com/2023/09/20/central-bank-of-denmark-urges-caution-over-economic-future', 'urlToImage': 'https://static.euronews.com/articles/stories/07/90/89/92/1000x563_cmsv2_e0b24471-5a06-5933-a3ab-c866cb388f55-7908992.jpg', 'publishedAt': '2023-09-20T14:09:03Z', 'content': \"Denmark's Nationalbank has called for economic caution with regard to future policy making, also predicting hovering inflation to come.\\r\\n Denmark's Nationalbank has issued a stark warning about the c… [+2689 chars]\"}, {'source': {'id': 'politico', 'name': 'Politico'}, 'author': 'Myah Ward', 'title': 'Ramaswamy wants to end the H-1B visa program he used 29 times', 'description': 'The GOP candidate pledges to get rid of a the system he calls “indentured servitude.”', 'url': 'https://www.politico.com/news/2023/09/16/ramaswamy-h1b-visa-gop-visa-00116383', 'urlToImage': 'https://static.politico.com/f1/05/f6da661e43098d3156c448160bcb/election-2024-ramaswamy-54388.jpg', 'publishedAt': '2023-09-16T11:00:00Z', 'content': 'Yet, the H-1B system is bad for everyone involved, Ramaswamy told POLITICO.\\r\\nThe lottery system needs to be replaced by actual meritocratic admission. Its a form of indentured servitude that only acc… [+2527 chars]'}, {'source': {'id': 'time', 'name': 'Time'}, 'author': 'JOSH BOAK, CHRIS MEGERIAN / AP', 'title': 'Biden Isn’t at Fault for the Looming Shutdown, Says White House Budget Director', 'description': 'White House budget director Shalanda Young said “absolutely not\" when asked if Biden should bear any responsibility for the shutdown.', 'url': 'https://time.com/6319128/biden-government-shutdown-fault-denied/', 'urlToImage': 'https://api.time.com/wp-content/uploads/2023/09/AP23272775185710.jpg?quality=85', 'publishedAt': '2023-09-30T13:55:16Z', 'content': \"WASHINGTON Staring down a likely government shutdown, the White House wants to make sure any blame falls at the other end of Pennsylvania Avenue specifically on House Republicans.\\r\\nAfter all, it's Ho… [+6429 chars]\"}, {'source': {'id': None, 'name': 'The Intercept'}, 'author': 'Ken Klippenstein', 'title': 'Pentagon’s Budget Is So Bloated That It Needs an AI Program to Navigate It', 'description': 'Codenamed GAMECHANGER, an AI program helps the military make sense of its own “byzantine” and “tedious” bureaucracy.\\nThe post Pentagon’s Budget Is So Bloated That It Needs an AI Program to Navigate It appeared first on The Intercept.', 'url': 'http://theintercept.com/2023/09/20/pentagon-ai-budget-gamechanger/', 'urlToImage': 'https://theintercept.com/wp-content/uploads/2023/09/GettyImages-1240599370-AI-gamechanger-defense-department-budget.jpg?fit=2500%2C1250&w=1200&h=800', 'publishedAt': '2023-09-20T16:35:46Z', 'content': 'As tech luminaries\\r\\n like Elon Musk issue solemn warnings about artificial intelligences threat of civilizational destruction, the U.S. military is using it for a decidedly more mundane purpose: unde… [+5516 chars]'}, {'source': {'id': None, 'name': 'Deadline'}, 'author': 'Jill Goldsmith', 'title': 'Rupert Murdoch Pay Rises To $23 Million In FY23, His Last Full Year As Fox Chair; CEO Lachlan Package At $21.7 Million', 'description': 'More news on the Murdoch front as the Fox Corp. proxy filed today shows Rupert with a 24% pay increase in fiscal 2023 to $22.9 million from $18.9 million. It’s his last full year as chairman of the board as succession planning kicks in. CEO and executive chai…', 'url': 'https://deadline.com/2023/09/rupert-lachlan-murdoch-fox-ceo-pay-1235554068/', 'urlToImage': 'https://deadline.com/wp-content/uploads/2023/09/lachlan-murdoch-main-rupert-murdoch-.jpg?w=1024', 'publishedAt': '2023-09-22T21:31:42Z', 'content': 'More news on the Murdoch front as the Fox Corp. proxy filed today shows Rupert with a 24% pay increase in fiscal 2023 to $22.9 million from $18.9 million. It’s his last full year as chairman of the b… [+1560 chars]'}, {'source': {'id': None, 'name': 'Theregister.com'}, 'author': 'Brandon Vigliarolo', 'title': 'The Pentagon has no idea how to deal with bad cloud contracts, say auditors', 'description': \"Bad IT practices at the DoD? You don't say\\nPointing out IT failures at the US Department of Defense is like shooting fish in a barrel, but here we are with another in the crosshairs: This time it's the DoD that has failed to account for the costs associated w…\", 'url': 'https://www.theregister.com/2023/09/14/the_pentagon_has_no_idea/', 'urlToImage': 'https://regmedia.co.uk/2023/09/14/pentagoncloud.jpg', 'publishedAt': '2023-09-14T19:00:06Z', 'content': \"Pointing out IT failures at the US Department of Defense is like shooting fish in a barrel, but here we are with another in the cross-hairs: this time it's the DoD that has failed to account for the … [+4236 chars]\"}, {'source': {'id': 'al-jazeera-english', 'name': 'Al Jazeera English'}, 'author': 'Al Jazeera', 'title': 'Russia’s central bank raises key interest rate amid weaker rouble', 'description': 'The third rate hike in two months comes as Russia grapples with higher inflation and a weaker rouble.', 'url': 'https://www.aljazeera.com/news/2023/9/15/russias-central-bank-raises-key-interest-rate-amid-weaker-ruble', 'urlToImage': 'https://www.aljazeera.com/wp-content/uploads/2023/09/32B733Y-preview-1694779863.jpg?resize=1752%2C1080', 'publishedAt': '2023-09-15T12:26:04Z', 'content': 'Russias central bank has raised its key interest rate by 100 basis points to 13 percent, hiking the cost of borrowing for the third time in two months as it grapples with higher inflation and a weake… [+2098 chars]'}, {'source': {'id': None, 'name': 'Ritholtz.com'}, 'author': 'Barry Ritholtz', 'title': 'The Least Bad Choice', 'description': 'I have been watching the various sentiment polls and Right/Wrong Track questions with detached bemusement. Bemused because they are so silly and detached because I know I can’t change human nature.\\xa0What I can do is share a few modest insights here; hopefully,…', 'url': 'https://ritholtz.com/2023/09/the-least-bad-choice/', 'urlToImage': 'https://ritholtz.com/wp-content/uploads/2023/09/ai-generated-8172587_1280.jpg', 'publishedAt': '2023-09-28T13:00:41Z', 'content': 'I have been watching the various sentiment polls and Right/Wrong Track questions with detached bemusement. Bemused because they are so silly and detached because I know I cant change human nature.\\xa0Wh… [+5204 chars]'}, {'source': {'id': None, 'name': 'Github.com'}, 'author': 'guidance-ai', 'title': 'Guidance: A guidance language for controlling large language models', 'description': 'A guidance language for controlling large language models. - GitHub - guidance-ai/guidance: A guidance language for controlling large language models.', 'url': 'https://github.com/guidance-ai/guidance', 'urlToImage': 'https://opengraph.githubassets.com/ef1e66388f99171f906f87efca16bbc89622398bd1610fcb52f1c135696db8d3/guidance-ai/guidance', 'publishedAt': '2023-09-16T20:21:56Z', 'content': 'Where there is no guidance, a model fails, but in an abundance of instructions there is safety.- GPT 11:14\\r\\nGuidance enables you to control modern language models more effectively and efficiently tha… [+30492 chars]'}, {'source': {'id': None, 'name': 'Forbes'}, 'author': 'William Pesek, Senior Contributor, \\n William Pesek, Senior Contributor\\n https://www.forbes.com/sites/williampesek/', 'title': 'If $307 Trillion Doesn’t Scare You, This Should', 'description': 'The most surprising thing about news that global debt just hit a record $307 trillion is how little alarm it generated. But these figures suggest that governments everywhere have lost the plot on basic fiscal prudence.', 'url': 'https://www.forbes.com/sites/williampesek/2023/09/24/if-307-trillion-doesnt-scare-you-this-should/', 'urlToImage': 'https://imageio.forbes.com/specials-images/imageserve/651007cde1ad87dd829169b1/0x0.jpg?format=jpg&crop=2375,1337,x402,y702,safe&width=1200', 'publishedAt': '2023-09-24T10:45:17Z', 'content': 'The global economys debt pile hit a new high in the first half of 2023.\\r\\ngetty\\r\\nThe most surprising thing about news that global debt just hit a record $307 trillion is how little alarm it generated.… [+5169 chars]'}, {'source': {'id': None, 'name': 'MarketWatch'}, 'author': 'Steve Goldstein', 'title': 'Need to Know: The stock market can’t catch a break. Good news is bad news, and now bad news is bad news, too.', 'description': 'Right now, stocks fall on good economic news and bad economic news too.', 'url': 'https://www.marketwatch.com/story/the-stock-market-cant-catch-a-break-good-news-is-bad-news-and-now-bad-news-is-bad-news-too-fe9d8183', 'urlToImage': 'https://images.mktw.net/im-858569/social', 'publishedAt': '2023-09-27T10:43:00Z', 'content': 'Its a rough time in the U.S. stock market.Consider the reports on the economy that trickle in nearly every day. On Thursday, the Labor Department reported a decline in initial jobless claims, to an e… [+4398 chars]'}, {'source': {'id': None, 'name': 'MarketWatch'}, 'author': 'Joseph Adinolfi', 'title': 'Market Extra: How Treasury market upheaval is rippling through global markets in 4 charts', 'description': 'Soaring U.S. bond yields sent shock waves across global markets in September. Now, yields started October by pushing even higher, heaping more pressure on global stocks and threatening to upend markets and the economy.', 'url': 'https://www.marketwatch.com/story/how-treasury-market-upheaval-is-rippling-through-global-markets-in-4-charts-d71a9f72', 'urlToImage': 'https://images.mktw.net/im-481968/social', 'publishedAt': '2023-10-03T11:00:00Z', 'content': 'Soaring U.S. government bond yields sent shock waves across global markets in September. Now, yields started October by pushing even higher, heaping more pressure on global stocks and threatening to … [+5864 chars]'}, {'source': {'id': None, 'name': 'Quartz India'}, 'author': 'Nate DiCamillo', 'title': 'China is trying to lend itself out of a recession', 'description': 'Although not yet in an official recession, China’s economy is in trouble. The country’s real estate sector is in crisis and makes up an outsized share of the country’s gross domestic product (GDP). Not only did China build too much housing, but Chinese consum…', 'url': 'https://qz.com/china-is-trying-to-lend-itself-out-of-a-recession-1850838599', 'urlToImage': 'https://i.kinja-img.com/gawker-media/image/upload/c_fill,f_auto,fl_progressive,g_center,h_675,pg_1,q_80,w_1200/db9b61ef31725f2343d0490974c56945.jpg', 'publishedAt': '2023-09-14T17:31:00Z', 'content': 'Although not yet in an official recession, Chinas economy is in trouble. The countrys real estate sector is in crisis and makes up an outsized share of the countrys gross domestic product (GDP). Not … [+3021 chars]'}, {'source': {'id': None, 'name': 'Quartz India'}, 'author': 'Grete Suarez', 'title': 'US Treasury yields fell after the Fed hinted at leaving interest rates alone', 'description': 'US Treasury yields fell after Federal Reserve officials hinted at leaving interest rates unchanged at their next meeting on Nov. 1.Read more...', 'url': 'https://qz.com/us-treasury-yields-fell-after-the-fed-hinted-at-leaving-1850914489', 'urlToImage': 'https://i.kinja-img.com/image/upload/c_fill,f_auto,fl_progressive,g_center,h_675,pg_1,q_80,w_1200/f390177f09e990d3200c5e3bd49b60da.jpg', 'publishedAt': '2023-10-10T19:22:04Z', 'content': 'US Treasury yields fell after Federal Reserve officials hinted at leaving interest rates unchanged at their next meeting on Nov. 1.\\r\\nPhilip Jefferson, vice chair of the Feds board, said he remains co… [+3500 chars]'}, {'source': {'id': None, 'name': 'Instapundit.com'}, 'author': 'Glenn Reynolds', 'title': 'ARNOLD KLING ON UNSUSTAINABLE FISCAL POLICY: “Maybe countries can live with today’s high debt rat', 'description': 'ARNOLD KLING ON UNSUSTAINABLE FISCAL POLICY: “Maybe countries can live with today’s high debt ratios, and maybe they cannot. The problem, which the authors mention briefly but do not address, is that in the absence of significant policy changes, the outlook—a…', 'url': 'https://instapundit.com/606185/', 'urlToImage': 'https://instapundit.com/wp-content/themes/instapundit/images/opengraph-default.png', 'publishedAt': '2023-09-18T16:00:30Z', 'content': 'ARNOLD KLING ON UNSUSTAINABLE FISCAL POLICY: “Maybe countries can live with todays high debt ratios, and maybe they cannot. The problem, which the authors mention briefly but do not address, is that … [+474 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Mónica Araya', 'title': 'Mónica Araya on electric vehicles, US climate policy, the EU-Mercosur trade deal, and more', 'description': 'Mónica Araya welcomes progress toward zero-emission transport, laments the fossil-fuel industry’s outsize influence over governments everywhere, argues that European climate action should be based on a people-centered political narrative, and more.', 'url': 'https://www.project-syndicate.org/onpoint/an-interview-with-monica-araya-electric-vehicles-decarbonization-eu-mercosur-trade-deal-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/c94fd14fcf169b9f10545aeefcbcd5ee.2-1-super.1.jpg', 'publishedAt': '2023-09-12T10:27:22Z', 'content': 'This week in Say More, PS talks with\\xa0Mónica Araya, Executive Director, International, at the European Climate Foundation.Project Syndicate: In 2020, you wrote\\xa0that, Our long-term success at managing … [+9086 chars]'}, {'source': {'id': None, 'name': 'The Intercept'}, 'author': 'Prem Thakker', 'title': 'Republican Disarray Delays Vote to Ban Cluster Bomb Transfers', 'description': 'As Biden sends the internationally banned weapons to Ukraine, a bipartisan group of lawmakers wants to block their transfer to any country. \\nThe post Republican Disarray Delays Vote to Ban Cluster Bomb Transfers appeared first on The Intercept.', 'url': 'http://theintercept.com/2023/09/14/ukraine-cluster-bombs-us-transfer/', 'urlToImage': 'https://theintercept.com/wp-content/uploads/2023/09/GettyImages-1512023076-cluster-bombs.jpg?fit=2500%2C1250&w=1200&h=800', 'publishedAt': '2023-09-14T18:57:08Z', 'content': 'A renewed congressional\\r\\n effort to ban U.S. transfers of cluster weapons could be one casualty of Congresss inability to agree on spending bills ahead of a looming government shutdown.\\r\\nLed by Reps.… [+7712 chars]'}, {'source': {'id': None, 'name': 'Yahoo Entertainment'}, 'author': 'Bloomberg News', 'title': 'China Cuts Bank Reserve Requirements to Aid Fiscal Stimulus', 'description': '(Bloomberg) -- China’s central bank cut the amount of cash lenders must hold in reserve for the second time this year, a move that will help banks support...', 'url': 'https://finance.yahoo.com/news/china-cuts-bank-requirements-aid-113620844.html', 'urlToImage': 'https://s.yimg.com/ny/api/res/1.2/iE_CacnCQPubjDIHVDGcUQ--/YXBwaWQ9aGlnaGxhbmRlcjt3PTEyMDA7aD04MDA-/https://media.zenfs.com/en/bloomberg_markets_842/eaa695eae8199e275aa700503a97b903', 'publishedAt': '2023-09-14T12:23:51Z', 'content': '(Bloomberg) -- Chinas central bank cut the amount of cash lenders must hold in reserve for the second time this year, a move that will help banks support government spending to stimulate the slowing … [+3429 chars]'}, {'source': {'id': None, 'name': 'Americanthinker.com'}, 'author': None, 'title': 'Life Imitates Charlie Brown', 'description': 'If a new speaker moves the Republicans, the House, and the country to a position of fiscal responsibility, a sane border policy, smaller government via less spending, and away from the climate change hysteria, then this historic event will have been for the g…', 'url': 'https://www.americanthinker.com/articles/2023/10/life_imitates_charlie_brown_.html', 'urlToImage': 'https://www.americanthinker.com/images/bucket/2023-10/249283.jpg', 'publishedAt': '2023-10-06T05:00:00Z', 'content': 'We’ve all seen the Charlie Brown and Lucy cartoons.\\xa0 Lucy always tries to convince Charlie Brown to kick the football promising she won’t yank the ball away.\\xa0 Inevitably, Charlie Brown agrees.\\xa0 He ge… [+6142 chars]'}, {'source': {'id': None, 'name': 'Sputnikglobe.com'}, 'author': 'Sputnik International', 'title': 'US Fiscal Deficit Deteriorated Substantially in 2023 - IMF', 'description': \"MOSCOW (Sputnik) - The chief economist of the International Monetary Fund (IMF), Pierre-Olivier Gourinchas, on Tuesday warned about the inadequacy of the US fiscal policy, as the country's fiscal deficit significantly worsened in 2023.\", 'url': 'https://sputnikglobe.com/20231010/us-fiscal-deficit-deteriorated-substantially-in-2023---imf--1114061260.html', 'urlToImage': 'https://cdn1.img.sputnikglobe.com/images/sharing/article/eng/1114061260.jpg?10800121101696934183', 'publishedAt': '2023-10-10T10:36:22Z', 'content': 'Sputnik brings you all the latest breaking stories, expert analysis and videos from North and South America.\\r\\nhttps://sputnikglobe.com/20231010/us-fiscal-deficit-deteriorated-substantially-in-2023---… [+1472 chars]'}, {'source': {'id': None, 'name': 'MONEY'}, 'author': 'Adam Hardy', 'title': 'Five Ways A Government Shutdown Could Affect Your Money', 'description': \"Without a spending bill by Sept. 30, the U.S. government will shut down, kicking off a chain reaction that could impact Americans' wallets.\", 'url': 'https://money.com/government-shutdown-affect-money/', 'urlToImage': 'https://img.money.com/2023/09/News-Government-Shutdown.jpg?quality=85', 'publishedAt': '2023-09-25T13:56:30Z', 'content': 'It’s not deja vu. The U.S. is again barreling toward a self-imposed financial crisis as lawmakers are gridlocked over a spending package to keep the federal government fully operational.\\r\\nCongress ha… [+7255 chars]'}, {'source': {'id': 'politico', 'name': 'Politico'}, 'author': 'Lara Korte and Melanie Mason', 'title': 'What Newsom’s relationship with labor says about his Senate pick', 'description': 'The governor tapped a labor champion in the midst of high-profile vetoes of union priorities.', 'url': 'https://www.politico.com/news/2023/10/03/newsoms-labor-senate-pick-laphonza-butler-00119595', 'urlToImage': 'https://static.politico.com/5b/0c/3a09e34c4cc5bfa95837df8ae55b/https-delivery-gettyimages.com/downloads/1500968139', 'publishedAt': '2023-10-03T09:00:00Z', 'content': 'Newsom on Monday praised Butler as someone who has the ability to create a dynamic on the outside that moves the needle on the inside.\\r\\nThe co-founder of a winery, Newsom has sometimes put corporate … [+3425 chars]'}, {'source': {'id': None, 'name': 'Los Angeles Times'}, 'author': 'Jackie Calmes', 'title': \"Calmes: The House Republicans' shutdown politics are dumb and dumber\", 'description': \"Kevin McCarthy's rebellious extremists in the House seem to believe they have the leverage to force their far-right budget and policy demands into law. They don't.\", 'url': 'https://www.latimes.com/opinion/story/2023-09-22/shutdown-house-republicans-budget-kevin-mccarthy-matt-gaetz', 'urlToImage': 'https://ca-times.brightspotcdn.com/dims4/default/b02a19e/2147483647/strip/true/crop/5000x2625+0+354/resize/1200x630!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F3d%2Fb0%2F8591e784415fbbe5f5f1311affbd%2Fcongress-budget-90633.jpg', 'publishedAt': '2023-09-22T20:05:05Z', 'content': 'For years, I stalked the Capitol halls amid Congress fiscal-year-end follies, waiting with other reporters for a breakthrough to end the latest faux crisis. Im hard-pressed to recall a budget fight s… [+5327 chars]'}, {'source': {'id': None, 'name': 'Forbes'}, 'author': 'Simon Moore, Senior Contributor, \\n Simon Moore, Senior Contributor\\n https://www.forbes.com/sites/simonmoore/', 'title': 'Yield Curve Less Inverted, But Recession Warning Remains', 'description': 'After inverting in 2022, the predicted U.S. recession that an inverted yield curve often warns of, has not occurred.', 'url': 'https://www.forbes.com/sites/simonmoore/2023/10/09/yield-curve-less-inverted-but-recession-warning-remains/', 'urlToImage': 'https://imageio.forbes.com/specials-images/imageserve/64d3b6dd8cb3be7ff6b1ea3f/0x0.jpg?format=jpg&width=1200', 'publishedAt': '2023-10-09T14:58:01Z', 'content': 'NEW YORK, NEW YORK - JANUARY 09: Traders work on the floor of the New York Stock Exchange during ... [+] afternoon trading on January 09, 2023 in New York City. The stock market closed with mixed res… [+3388 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Bernard Haykel', 'title': 'Saudi Arabia’s New Nationalism', 'description': \"Saudi Crown Prince Mohammed bin Salman is leading a major economic and political transformation, with the goal of turning his country from a rentier petrostate into a major geopolitical force with a diversified economy. The Kingdom's ambitious domestic reform…\", 'url': 'https://www.project-syndicate.org/commentary/mbs-behind-saudi-nationalist-surge-by-bernard-haykel-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/78bbd061e6186f23097da350e7bba658.2-1-super.1.jpg', 'publishedAt': '2023-09-29T15:53:39Z', 'content': 'Saudi Crown Prince Mohammed bin Salman is leading a major economic and political transformation, with the goal of turning his country from a rentier petrostate into a major geopolitical force with a … [+6143 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Richard Clarida', 'title': 'The Anatomy of the Global Inflation Spike', 'description': \"The post-pandemic surge of inflation must be analyzed in its global context, with insights drawn from the notable correlations between countries - and especially between advanced economies. Only then can one properly judge major central banks' performance in …\", 'url': 'https://www.project-syndicate.org/commentary/inflation-causes-consequences-implications-for-monetary-policy-by-richard-clarida-2023-10', 'urlToImage': 'https://webapi.project-syndicate.org/library/d93602f4e1726e3bd3c856361b1403b8.2-1-super.1.jpg', 'publishedAt': '2023-10-04T12:54:13Z', 'content': 'The post-pandemic surge of inflation must be analyzed in its global context, with insights drawn from the notable correlations between countries - and especially between advanced economies. Only then… [+6009 chars]'}, {'source': {'id': 'politico', 'name': 'Politico'}, 'author': 'Sam Sutton', 'title': '`Derailed by mistakes’: Shutdown poses economic threat as other headwinds mount', 'description': 'A shutdown would likely cast a cloud over consumer sentiment, which has remained chilly since Covid. And business owners increasingly expect conditions to deteriorate.', 'url': 'https://www.politico.com/news/2023/09/22/shutdown-poses-economic-threat-headwinds-00117474', 'urlToImage': 'https://images.politicopro.com/images/financial_services/140213_wall_street_sign_ap.jpg', 'publishedAt': '2023-09-22T09:00:00Z', 'content': 'The good news is that the economy is internally robust, said Mohamed El-Erian, president of Queens College, Cambridge and chief economic adviser at Allianz, who thinks skeptics have been sidelined in… [+5644 chars]'}, {'source': {'id': 'time', 'name': 'Time'}, 'author': 'Olivia B. Waxman', 'title': 'Inside the Controversy Over the National Museum of the American Latino', 'description': 'Inside the fight over the new Museum of the American Latino, and why a planned exhibit on youth movements was halted.', 'url': 'https://time.com/6314166/museum-american-latino-controversy/', 'urlToImage': 'https://api.time.com/wp-content/uploads/2023/09/National-Museum-American-Latino-presente-exhibition.jpg?quality=85', 'publishedAt': '2023-09-15T11:00:00Z', 'content': 'The National Museum of the American Latino doesnt even have a building yet, but its work is already controversial.\\r\\nFor the last two years, historians had been working on an exhibit about the history… [+13773 chars]'}, {'source': {'id': None, 'name': 'Yahoo Entertainment'}, 'author': 'Julia Leite', 'title': 'Egypt Downgraded by Moody’s on\\xa0Dwindling Policy Options', 'description': '(Bloomberg) -- Egypt’s credit score was downgraded by Moody’s Investors Service to one of the lowest rungs of speculative grade amid what the ratings firm...', 'url': 'https://finance.yahoo.com/news/egypt-downgraded-moody-dwindling-policy-044314405.html', 'urlToImage': 'https://s.yimg.com/ny/api/res/1.2/atwAZxQdbFLCxIIaTHgMjA--/YXBwaWQ9aGlnaGxhbmRlcjt3PTEyMDA7aD04MDA-/https://media.zenfs.com/en/bloomberg_markets_842/9fd03758c0c8cca8fb4418ce17979478', 'publishedAt': '2023-10-06T04:43:14Z', 'content': '(Bloomberg) -- Egypts credit score was downgraded by Moodys Investors Service to one of the lowest rungs of speculative grade amid what the ratings firm called increasingly constrained policy options… [+2866 chars]'}, {'source': {'id': None, 'name': 'Nakedcapitalism.com'}, 'author': 'Conor Gallagher', 'title': 'Social Security Overpays Billions to People, Many on Disability. Then It Demands the Money Back', 'description': 'The Social Security Administration is trying to reclaim billions of dollars from many of the nation’s poorest and most vulnerable.', 'url': 'https://www.nakedcapitalism.com/2023/09/social-security-overpays-billions-to-people-many-on-disability-then-it-demands-the-money-back.html', 'urlToImage': None, 'publishedAt': '2023-09-18T09:00:21Z', 'content': 'This is Naked Capitalism fundraising week. 12079 donors have already invested in our efforts to combat corruption and predatory conduct, particularly in the financial realm. Please join us and partic… [+15272 chars]'}, {'source': {'id': None, 'name': 'Sputnikglobe.com'}, 'author': 'Fantine  Gardinier', 'title': \"Private Equity 'Thrown Under Bus' by Fed's 'Higher for Longer' US Fiscal Policy\", 'description': 'The US central bank is engaged in an effort to reorganize US capital using fiscal policy, directing it away from the financial class and spend-happy bureaucrats and toward industrial leaders and Main Street, in line with international expectations, a financia…', 'url': 'https://sputnikglobe.com/20230921/private-equity-thrown-under-bus-by-feds-higher-for-longer-us-fiscal-policy-1113568668.html', 'urlToImage': 'https://cdn1.img.sputnikglobe.com/images/sharing/article/eng/1113568668.jpg?10948974781695325993', 'publishedAt': '2023-09-21T19:55:41Z', 'content': 'He did the hard work this summer, Luongo said of Powell. By raising interest rates in July, he left himself optionality in September. He was clear that he expects one more hike this year and is still… [+241 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Michael R. Strain', 'title': 'An Off-Ramp from Trump’s Road to Ruin', 'description': 'The GOP candidates most enamored with Trumpian populism – including Trump himself – are most likely to condemn the party to defeat in the 2024 presidential election. Former South Carolina Governor Nikki Haley, who is more aligned with traditional American con…', 'url': 'https://www.project-syndicate.org/commentary/nikki-haley-better-choice-for-2024-republican-presidential-nominee-by-michael-r-strain-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/78ed0ff67a267aa136af7190dde63530.2-1-super.1.jpg', 'publishedAt': '2023-09-14T10:34:38Z', 'content': 'The GOP candidates most enamored with Trumpian populism including Trump himself are most likely to condemn the party to defeat in the 2024 presidential election. Former South Carolina Governor Nikki … [+6583 chars]'}, {'source': {'id': None, 'name': 'AndroidGuys'}, 'author': 'Jude Chukwuemeka', 'title': 'Total by Verizon adds 50 exclusive stores in Greater Los Angeles', 'description': 'Total by Verizon is determined to reach more customers by opening more retail stores where other firms are closing theirs. As part of its commitment to run on America’s most reliable 5G network, the brand is stretching out to reach more customers. What Total …', 'url': 'https://www.androidguys.com/news/total-by-verizon-adds-50-exclusive-stores-in-greater-los-angeles/', 'urlToImage': 'https://www.androidguys.com/wp-content/uploads/2023/09/Total_by_Verizon_Logo.jpg', 'publishedAt': '2023-09-20T22:09:57Z', 'content': 'Total by Verizon is determined to reach more customers by opening more retail stores where other firms are closing theirs. As part of its commitment to run on Americas most reliable 5G network, the b… [+2067 chars]'}, {'source': {'id': 'the-times-of-india', 'name': 'The Times of India'}, 'author': 'ET CONTRIBUTORS', 'title': 'IGB inclusion in JPMorgan Index to enhance FPI participation in markets', 'description': \"However, since 2013 - when the idea of index inclusion was first floated - the Indian authorities have made steady progress in facilitating foreign investment into IGBs. The announcement of IGBs inclusion in JP Morgan's GBI-EM Global Diversified (GBI-EM-GD) I…\", 'url': 'https://economictimes.indiatimes.com/markets/stocks/news/igb-inclusion-in-jpmorgan-index-to-enhance-fpi-participation-in-markets/articleshow/104029373.cms', 'urlToImage': 'https://img.etimg.com/thumb/msid-104029391,width-1200,height-630,imgsize-36794,overlay-etmarkets/photo.jpg', 'publishedAt': '2023-09-29T00:31:17Z', 'content': 'For the first time ever, Indian Government Bonds (IGBs) will be included in a global emerging markets bond index starting June 2024. Although such indices have been around for a long time, IGBs were … [+3711 chars]'}, {'source': {'id': None, 'name': 'AOL'}, 'author': 'David Morgan', 'title': 'McCarthy says US House Republicans to vote on defense spending bill Thursday', 'description': '(Reuters) -U.S. House of Representatives Speaker Kevin McCarthy said Republicans will try again to move forward on fiscal 2024 spending legislation on...', 'url': 'https://www.aol.com/news/mccarthy-says-us-house-republicans-230727448.html', 'urlToImage': 'https://media.zenfs.com/en/aol_reuters_29/996495c817afbf609db0bfb47f22ef8c', 'publishedAt': '2023-09-20T23:07:27Z', 'content': 'By David Morgan\\r\\n(Reuters) -U.S. House of Representatives Speaker Kevin McCarthy said Republicans will try again to move forward on fiscal 2024 spending legislation on Thursday, with a procedural vot… [+1787 chars]'}, {'source': {'id': None, 'name': 'The Indian Express'}, 'author': 'PTI', 'title': 'Vivek Ramaswamy wants to end H-1B visa programme, calls it ‘indentured servitude’', 'description': 'The H-1B visa, the much-sought-after among Indian IT professionals, is a non-immigrant visa that allows US companies to employ foreign workers in speciality occupations that require theoretical or technical expertise.', 'url': 'https://indianexpress.com/article/world/vivek-ramaswamy-wants-to-end-h-1b-visa-programme-calls-it-indentured-servitude-8943833/', 'urlToImage': 'https://images.indianexpress.com/2023/09/vivek.jpg', 'publishedAt': '2023-09-17T09:25:16Z', 'content': 'Calling the H-1B visa programme “indentured servitude”, Indian-American Republican presidential aspirant Vivek Ramaswamy has vowed to gut the lottery-based system and replace it with meritocratic adm… [+3787 chars]'}, {'source': {'id': None, 'name': 'Boston Herald'}, 'author': 'Matthew Medsger', 'title': 'Advocates push Massachusetts lawmakers to act on tax cuts', 'description': 'Unfortunately for the tax policy group, lawmakers are — again — staring down a suddenly changing fiscal environment.', 'url': 'https://www.bostonherald.com/2023/09/13/advocates-push-massachusetts-lawmakers-to-act-on-tax-cuts/', 'urlToImage': 'https://www.bostonherald.com/wp-content/uploads/2023/03/0327-NWS-BHR-L-Weatherjm01.jpg?w=1024&h=737', 'publishedAt': '2023-09-13T23:28:42Z', 'content': 'A new report by the Massachusetts Taxpayers Foundation points to huge post-pandemic jumps in state revenue before urging the Legislature to use the time left in the year to finally get their act toge… [+2846 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Yi Fuxian', 'title': 'A Chinese Bubble Long in the Making', 'description': \"Owing to the one-child policy and the legacies of other less-appreciated Chinese development measures over the years, the stage has long been set for today's property bubble. But even more tragically, much of China’s economic growth over the past decade has b…\", 'url': 'https://www.project-syndicate.org/onpoint/china-property-bubble-born-of-policy-mistakes-broader-demographic-crisis-by-yi-fuxian-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/ed4bd6ce103e96c4ff5b48eb40da2cf8.2-1-super.1.jpg', 'publishedAt': '2023-09-29T08:25:52Z', 'content': \"Owing to the one-child policy and the legacies of other less-appreciated Chinese development measures over the years, the stage has long been set for today's property bubble. But even more tragically… [+14255 chars]\"}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Eswar Prasad', 'title': 'The Global Recovery Is Faltering', 'description': 'Even as inflationary pressures ease, geopolitical tensions and structural factors such as unfavorable demographics and high debt levels have taken a toll on household and business confidence worldwide. The challenge for governments is to rebuild confidence an…', 'url': 'https://www.project-syndicate.org/commentary/world-economy-losing-momentum-by-eswar-prasad-2023-10', 'urlToImage': 'https://webapi.project-syndicate.org/library/3fd599bb373600906f54b2ce78ee37f7.2-1-super.1.jpg', 'publishedAt': '2023-10-06T15:44:26Z', 'content': 'Even as inflationary pressures ease, geopolitical tensions and structural factors such as unfavorable demographics and high debt levels have taken a toll on household and business confidence worldwid… [+6504 chars]'}, {'source': {'id': None, 'name': 'Yahoo Entertainment'}, 'author': 'Ye Xie', 'title': 'Bill Gross Warns Bond Investors Face Record Third Year of Losses', 'description': '(Bloomberg) -- Bond investors’ pain isn’t over yet, even though the Federal Reserve is done raising interest rates, said Bill Gross, the former chief...', 'url': 'https://finance.yahoo.com/news/bill-gross-warns-bond-investors-144344210.html', 'urlToImage': 'https://media.zenfs.com/en/bloomberg_markets_842/c00cd04178c1a1abee5dfefed6338a4f', 'publishedAt': '2023-09-21T14:43:44Z', 'content': '(Bloomberg) -- Bond investors pain isnt over yet, even though the Federal Reserve is done raising interest rates, said Bill Gross, the former chief investment officer of Pacific Investment Management… [+2258 chars]'}, {'source': {'id': 'cbs-news', 'name': 'CBS News'}, 'author': 'Camilo Montoya-Galvez', 'title': 'Unlawful crossings along southern U.S. border reach yearly high', 'description': 'For only the second time in U.S. history, migrant apprehensions along the southern border surpassed 2 million in a single fiscal year, federal data obtained by CBS News shows.', 'url': 'https://www.cbsnews.com/news/immigration-unlawful-crossings-along-southern-border-reach-yearly-high/', 'urlToImage': 'https://assets3.cbsnewsstatic.com/hub/i/r/2023/10/01/281393f3-cf82-4e1a-b876-bb99dcfdf650/thumbnail/1200x630/cf085dd44a553fde79cc4513048230fb/gettyimages-1710101888.jpg?v=42bbcea0e3eaab3fb7d470f54c86b0bd', 'publishedAt': '2023-10-02T00:19:17Z', 'content': 'U.S. immigration agents processed more than 200,000 migrants who crossed the southern border unlawfully in September, the highest level recorded in 2023, as the Biden administration struggles to cont… [+7738 chars]'}, {'source': {'id': 'politico', 'name': 'Politico'}, 'author': 'Associated Press', 'title': 'Jimmy Carter celebrating 99th birthday with family', 'description': '“If Jimmy Carter were a tree, he’d be an towering, old Southern oak,” commentator Donna Brazile said.', 'url': 'https://www.politico.com/news/2023/10/01/jimmy-carter-celebrating-99th-birthday-with-family-00119314', 'urlToImage': 'https://static.politico.com/a2/f4/ab1c2ad147b1b026cb29346fc54d/jimmy-carter-birthday-73185.jpg', 'publishedAt': '2023-10-01T12:34:35Z', 'content': 'Despite being global figures, the younger Carter said his grandparents have always made it easy for us, as a family, to be as normal as we can be.\\r\\nCelebrating the longest-lived U.S. president this w… [+6289 chars]'}, {'source': {'id': None, 'name': 'Yahoo Entertainment'}, 'author': 'Leika Kihara', 'title': \"Explainer-What will BOJ's policy normalisation path look like?\", 'description': \"The Bank of Japan is under pressure to defend a new cap for long-term interest rates set just six weeks ago, as Governor Kazuo Ueda's hawkish remarks...\", 'url': 'https://finance.yahoo.com/news/explainer-bojs-policy-normalisation-path-032100591.html', 'urlToImage': 'https://media.zenfs.com/en/reuters-finance.com/63af13a7de358e8f9f9bce4201465fd6', 'publishedAt': '2023-09-12T03:21:00Z', 'content': \"By Leika Kihara\\r\\nTOKYO (Reuters) - The Bank of Japan is under pressure to defend a new cap for long-term interest rates set just six weeks ago, as Governor Kazuo Ueda's hawkish remarks heightened mar… [+3696 chars]\"}, {'source': {'id': 'politico', 'name': 'Politico'}, 'author': 'Associated Press', 'title': 'Jimmy Carter turns 99 at home with Rosalynn and other family', 'description': 'Tributes rolled in from everywhere.', 'url': 'https://www.politico.com/news/2023/10/01/jimmy-carter-turns-99-00119366', 'urlToImage': 'https://static.politico.com/c3/77/c485445645129724798f57766383/https-delivery-gettyimages.com/downloads/1043567870', 'publishedAt': '2023-10-01T19:51:15Z', 'content': 'Despite being global figures, the younger Carter said his grandparents have always made it easy for us, as a family, to be as normal as we can be.\\r\\nAt The Carter Center in Atlanta, meanwhile, 99 new … [+6929 chars]'}, {'source': {'id': None, 'name': '[Removed]'}, 'author': None, 'title': '[Removed]', 'description': '[Removed]', 'url': 'https://removed.com', 'urlToImage': None, 'publishedAt': '1970-01-01T00:00:00Z', 'content': '[Removed]'}, {'source': {'id': None, 'name': 'The Indian Express'}, 'author': 'ENS Economic Bureau', 'title': 'India’s corporate credit rating upgrades moderate in H1 FY24', 'description': 'The number of corporates that witnessed credit rating upgrades in H1 of FY24 outnumbered those who faced downgrades, they said.', 'url': 'https://indianexpress.com/article/business/indias-corporate-credit-rating-upgrades-moderate-in-h1-fy24-8967190/', 'urlToImage': 'https://images.indianexpress.com/2023/10/investment-7591.jpg', 'publishedAt': '2023-10-03T18:57:14Z', 'content': 'Corporate Indias credit profile continued to remain strong in the April-September 2023 but the number of rating upgrades declined during the first six months, according to rating agencies.The number … [+4136 chars]'}, {'source': {'id': None, 'name': 'Forbes'}, 'author': 'Nick Sargen, Contributor, \\n Nick Sargen, Contributor\\n https://www.forbes.com/sites/nicksargen/', 'title': 'What The US Bond Market’s Capitulation Implies for The Economy', 'description': 'Just when investors were lulled into complacency, 10-year Treasury yields have surged by a full percentage point since mid-year to the highest level in 16 years.', 'url': 'https://www.forbes.com/sites/nicksargen/2023/10/06/what-the-us-bond-markets-capitulation-implies-for-the-economy/', 'urlToImage': 'https://imageio.forbes.com/specials-images/imageserve/651f015bdc6123aa37b6f4a3/0x0.jpg?format=jpg&width=1200', 'publishedAt': '2023-10-06T12:38:52Z', 'content': 'Paper with Treasury bonds on a table\\r\\ngetty\\r\\nJust when investors were being lulled into complacency, the rug was pulled out from them as ten- year Treasury yields have surged by a full percentage poi… [+5968 chars]'}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Anne O. Krueger', 'title': 'The Great Debt Conundrum', 'description': 'When debt levels are high and rising, as they are today across the developing world, crises can erupt suddenly and worsen quickly. To prevent a global catastrophe, the international community must establish mechanisms to ensure timely and fair burden-sharing …', 'url': 'https://www.project-syndicate.org/commentary/world-economy-needs-new-debt-restructuring-framework-by-anne-o-krueger-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/721c28521af71c7cd342d3c2a2b69d0a.2-1-super.1.jpg', 'publishedAt': '2023-09-19T08:30:34Z', 'content': 'When debt levels are high and rising, as they are today across the developing world, crises can erupt suddenly and worsen quickly. To prevent a global catastrophe, the international community must es… [+6021 chars]'}, {'source': {'id': None, 'name': 'CNA'}, 'author': None, 'title': 'Thailand sticking to digital wallet policy, fiscal discipline - deputy Finance Minister', 'description': \"BANGKOK : Thailand's government will maintain fiscal discipline and forge ahead with its digital wallet stimulus policy, a deputy finance minister said on Monday, amid concerns from dozens of experts about its viability and efficiency.The policy, which will i…\", 'url': 'https://www.channelnewsasia.com/business/thailand-sticking-digital-wallet-policy-fiscal-discipline-deputy-finance-minister-3831981', 'urlToImage': 'https://onecms-res.cloudinary.com/image/upload/s--8sChpyKs--/fl_relative,g_south_east,l_one-cms:core:watermark:reuters,w_0.1/f_auto,q_auto/c_fill,g_auto,h_676,w_1200/v1/one-cms/core/2023-10-09t082813z_1_lynxmpej98096_rtroptp_3_thailand-economy.jpg?itok=3SDtQ7dW', 'publishedAt': '2023-10-09T08:28:13Z', 'content': \"BANGKOK : Thailand's government will maintain fiscal discipline and forge ahead with its digital wallet stimulus policy, a deputy finance minister said on Monday, amid concerns from dozens of experts… [+1606 chars]\"}, {'source': {'id': None, 'name': 'Project Syndicate'}, 'author': 'Pepe Zhang', 'title': 'Global Leadership for Latin America and the Caribbean', 'description': 'There is no shortage of areas where the region’s countries can leverage their strengths to assume a more active global leadership role. But if the region is to seize the opportunities that lie ahead, it must accelerate development progress at home.', 'url': 'https://www.project-syndicate.org/commentary/latin-america-caribbean-global-leadership-food-climate-finance-by-pepe-zhang-and-otaviano-canuto-2023-09', 'urlToImage': 'https://webapi.project-syndicate.org/library/996b591c63da4c3e152ed9b13b46f3eb.2-1-super.1.jpg', 'publishedAt': '2023-09-12T13:46:46Z', 'content': 'There is no shortage of areas where the regions countries can leverage their strengths to assume a more active global leadership role. But if the region is to seize the opportunities that lie ahead, … [+7044 chars]'}, {'source': {'id': None, 'name': 'Moneycontrol'}, 'author': 'Moneycontrol News', 'title': 'Rate-sensitive stocks trades higher ahead of RBI policy decision', 'description': 'The RBI is expected to hold rates. It will be business as usual if the central bank leaves policy rates unchanged but a tinkering can lead to a sharp gyration in the market, analysts have said', 'url': 'https://www.moneycontrol.com/news/business/markets/rate-sensitive-stocks-trades-higher-ahead-of-rbi-policy-decision-11487371.html', 'urlToImage': 'https://images.moneycontrol.com/static-mcnews/2023/09/stocks_sensex_nifty_stockmarket-1-770x433.jpg', 'publishedAt': '2023-10-06T04:18:28Z', 'content': \"Rate-sensitive stocks like auto, banking and real estate were trading marginally higher ahead of the Reserve Bank of India's bi-monthly policy decision announcement on October 6.\\r\\nThe central bank is… [+4306 chars]\"}, {'source': {'id': None, 'name': 'Forbes'}, 'author': 'Simon Moore, Senior Contributor, \\n Simon Moore, Senior Contributor\\n https://www.forbes.com/sites/simonmoore/', 'title': 'Markets See Fed Backing Away From A November Rate Hike', 'description': 'The chances of the Fed hiking at their November 1 decision appear to have diminished based on recent statements from officials and the assessment of fixed income markets.', 'url': 'https://www.forbes.com/sites/simonmoore/2023/10/10/markets-see-fed-backing-away-from-a-november-rate-hike/', 'urlToImage': 'https://imageio.forbes.com/specials-images/imageserve/6525c655c420fe6217b601d9/0x0.jpg?format=jpg&height=900&width=1600&fit=bounds', 'publishedAt': '2023-10-10T22:27:09Z', 'content': 'WASHINGTON, DC - JUNE 22: Jerome Powell, Chairman, Board of Governors of the Federal Reserve System ... [+] testifies before the Senate Banking, Housing, and Urban Affairs Committee June 22, 2022 in … [+3678 chars]'}, {'source': {'id': None, 'name': 'Phys.Org'}, 'author': 'John Rennie Short', 'title': \"Traditional downtowns are dead or dying in many US cities. What's next for these zones?\", 'description': \"The hollowing out of U.S. cities' office and commercial cores is a national trend with serious consequences for millions of Americans. As more people have stayed home following the COVID-19 pandemic, foot traffic has fallen. Major retail chains are closing st…\", 'url': 'https://phys.org/news/2023-09-traditional-downtowns-dead-dying-cities.html', 'urlToImage': 'https://scx2.b-cdn.net/gfx/news/hires/2022/downtown.jpg', 'publishedAt': '2023-09-25T20:50:01Z', 'content': \"The hollowing out of U.S. cities' office and commercial cores is a national trend with serious consequences for millions of Americans. As more people have stayed home following the COVID-19 pandemic,… [+7375 chars]\"}, {'source': {'id': 'politico', 'name': 'Politico'}, 'author': 'Matt Berg', 'title': \"'Weak,' 'Lying like a dead dog': McCarthy faces Republican attacks amid looming shutdown\", 'description': 'The attacks are likely to continue as the Sept. 30 deadline approaches.', 'url': 'https://www.politico.com/news/2023/09/20/mccarthy-government-shutdown-gaetz-00117027', 'urlToImage': 'https://static.politico.com/b5/91/aaf441bc4b13af0ebd87d15e8af1/kevin-mccarthy-95547.jpg', 'publishedAt': '2023-09-20T16:17:12Z', 'content': 'Rep. Victoria Spartz: Weak ... another worthless Congress \\r\\nSpartz, a first-term representative from Indiana, has directly lambasted the House speaker for being weak, blaming him for being unable to … [+4707 chars]'}, {'source': {'id': None, 'name': 'CleanTechnica'}, 'author': 'Guest Contributor', 'title': 'NEPA, The “Magna Carta” Of Federal Environmental Laws, May Be About To Improve', 'description': 'The National Environmental Policy Act, or NEPA, is often called the “Magna Carta” of environmental laws. For many communities, the NEPA process is a vital — sometimes the sole — tool they have to try to ensure their voices are heard and that environmental jus…', 'url': 'https://cleantechnica.com/2023/10/02/nepa-the-magna-carta-of-federal-environmental-laws-may-be-about-to-improve/', 'urlToImage': 'https://cleantechnica.com/files/2021/10/image0-1-e1633813975623.jpeg', 'publishedAt': '2023-10-02T15:55:50Z', 'content': 'Sign up for daily news updates from CleanTechnica on email. Or follow us on Google News!\\r\\nThe National Environmental Policy Act, or NEPA, is often called the Magna Carta of environmental laws.\\r\\nFor m… [+8833 chars]'}, {'source': {'id': 'associated-press', 'name': 'Associated Press'}, 'author': 'VALERIE GONZALEZ', 'title': 'BIDEN BUILDING WALL!', 'description': 'The Department of Homeland Security announced that the Biden administration leveraged sweeping executive power to waive 26 federal laws in South Texas. This is the first time the administration has done this, a practice often employed by the Trump presidency.…', 'url': 'https://apnews.com/article/border-wall-biden-immigration-texas-rio-grande-147d7ab497e6991e9ea929242f21ceb2', 'urlToImage': 'https://dims.apnews.com/dims4/default/bea624f/2147483647/strip/true/crop/5184x2916+0+270/resize/1440x810!/quality/90/?url=https%3A%2F%2Fassets.apnews.com%2F2d%2F77%2Fd2773736e810c3feac4cdc3e6871%2F821f8882404b458ea625caab543da615', 'publishedAt': '2023-10-05T02:49:36Z', 'content': 'McALLEN, Texas (AP) The Biden administration announced they waived 26 federal laws in South Texas to allow border wall construction on Wednesday, marking the administrations first use of a sweeping e… [+4130 chars]'}, {'source': {'id': None, 'name': 'Bangkok Post'}, 'author': 'Somruedi Banchongduang', 'title': 'BoT governor proposes fiscal suggestions', 'description': \"The government's economic policies should be considered in terms of their medium-term impact amid concerns about fiscal instability, says the head of the Bank of Thailand.\", 'url': 'https://www.bangkokpost.com/business/general/2647270/bot-governor-proposes-fiscal-suggestions', 'urlToImage': 'https://static.bangkokpost.com/media/content/dcx/2023/09/15/4893146_700.jpg', 'publishedAt': '2023-09-14T21:58:00Z', 'content': \"The government's economic policies should be considered in terms of their medium-term impact amid concerns about fiscal instability, says the head of the Bank of Thailand.\\r\\nThe central bank affirms t… [+2575 chars]\"}, {'source': {'id': None, 'name': 'Euronews'}, 'author': None, 'title': 'IMF: Private sector needs to shoulder most of the climate investment burden', 'description': 'Developing countries need $2 trillion in annual climate investments - IMF says the majority has to come from the private sector.', 'url': 'https://www.euronews.com/2023/10/05/imf-private-sector-needs-to-shoulder-most-of-the-climate-investment-burden', 'urlToImage': 'https://static.euronews.com/articles/stories/07/94/04/46/1000x563_cmsv2_11b67170-cd0e-59d6-a1d8-2661b6f5dacb-7940446.jpg', 'publishedAt': '2023-10-05T07:17:32Z', 'content': 'Developing countries need $2 trillion in annual climate investments - IMF says the majority has to come from the private sector.\\r\\n The International Monetary Fund (IMF) is warning that governments ri… [+2754 chars]'}]}\n\n\n\n\nfile1_path = '/Users/sheebamoghal/Desktop/DSAN5000/dsan-5000-project-msheeba4848/dsan-website/5000-website/data/fiscalpolicyraw.json'\nfile2_path = '/Users/sheebamoghal/Desktop/DSAN5000/dsan-5000-project-msheeba4848/dsan-website/5000-website/data/macroeconomicraw.json'\n\n\ndata_and_files = [(fiscalpolicy, file1_path), (macroeconomic, file2_path)]\n\n\nfor data, filename in data_and_files:\n    with open(filename, 'w') as fp:\n        json.dump(data, fp)\n\n\nfiscalpolicy = pd.read_json('/Users/sheebamoghal/Desktop/DSAN5000/dsan-5000-project-msheeba4848/dsan-website/5000-website/data/fiscalpolicyraw.json')\nmacroeconomic = pd.read_json('/Users/sheebamoghal/Desktop/DSAN5000/dsan-5000-project-msheeba4848/dsan-website/5000-website/data/macroeconomicraw.json')\n\n\nfiscalpolicy.head(5)\n\n\n\n\n\n\n\n\nstatus\ntotalResults\narticles\n\n\n\n\n0\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n1\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n2\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n3\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n4\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n\n\n\n\n\n\nmacroeconomic.head(5)\n\n\n\n\n\n\n\n\nstatus\ntotalResults\narticles\n\n\n\n\n0\nok\n2698\n{'source': {'id': None, 'name': 'MacRumors'}, ...\n\n\n1\nok\n2698\n{'source': {'id': None, 'name': 'Aeaweb.org'},...\n\n\n2\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n3\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n4\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n\n\n\n\n\n\nfiscalpolicy['articles'] = fiscalpolicy['articles'].apply(lambda article: {\n    'source': article.get('source'),\n    'title': text(article.get('title')),\n    'description': text(article.get('description'))\n})\n\nprint(fiscalpolicy)\n\n   status  totalResults                                           articles\n0      ok          2947  {'source': {'id': 'business-insider', 'name': ...\n1      ok          2947  {'source': {'id': 'business-insider', 'name': ...\n2      ok          2947  {'source': {'id': 'business-insider', 'name': ...\n3      ok          2947  {'source': {'id': 'business-insider', 'name': ...\n4      ok          2947  {'source': {'id': 'business-insider', 'name': ...\n..    ...           ...                                                ...\n95     ok          2947  {'source': {'id': 'politico', 'name': 'Politic...\n96     ok          2947  {'source': {'id': None, 'name': 'CleanTechnica...\n97     ok          2947  {'source': {'id': 'associated-press', 'name': ...\n98     ok          2947  {'source': {'id': None, 'name': 'Bangkok Post'...\n99     ok          2947  {'source': {'id': None, 'name': 'Euronews'}, '...\n\n[100 rows x 3 columns]\n\n\n\ndef text(text):\n    if isinstance(text, str):\n        return text.lower()  # Example: Convert text to lowercase\n    return text  # If not a string, return as is\n\nfiscalpolicy['articles'] = fiscalpolicy['articles'].apply(lambda article: {\n    'source': article.get('source'),\n    'title': text(article.get('title')),\n    'description': text(article.get('description'))\n})\n\nprint(fiscalpolicy)\n\nmacroeconomic['articles'] = macroeconomic['articles'].apply(lambda article: {\n    'source': article.get('source'),\n    'title': text(article.get('title')),\n    'description': text(article.get('description'))\n})\n\n\nfiscalpolicy.head(10)\n\n\n\n\n\n\n\n\nstatus\ntotalResults\narticles\n\n\n\n\n0\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n1\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n2\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n3\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n4\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n5\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n6\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n7\nok\n2947\n{'source': {'id': None, 'name': 'Slashdot.org'...\n\n\n8\nok\n2947\n{'source': {'id': None, 'name': 'The New Yorke...\n\n\n9\nok\n2947\n{'source': {'id': 'business-insider', 'name': ...\n\n\n\n\n\n\n\n\nmacroeconomic.head(10)\n\n\n\n\n\n\n\n\nstatus\ntotalResults\narticles\n\n\n\n\n0\nok\n2698\n{'source': {'id': None, 'name': 'MacRumors'}, ...\n\n\n1\nok\n2698\n{'source': {'id': None, 'name': 'Aeaweb.org'},...\n\n\n2\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n3\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n4\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n5\nok\n2698\n{'source': {'id': None, 'name': 'Web3isgoinggr...\n\n\n6\nok\n2698\n{'source': {'id': None, 'name': 'Marginalrevol...\n\n\n7\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n8\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n9\nok\n2698\n{'source': {'id': 'business-insider', 'name': ...\n\n\n\n\n\n\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ndef countvectorizer(corpus):\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(corpus)\n    feature_names = vectorizer.get_feature_names_out()\n    return feature_names, X.toarray()\n\n# Define your corpora\nfiscalpolicy_title_corpus = fiscalpolicy['articles'].apply(lambda x: x['title']).to_list()\nfiscalpolicy_description_corpus = fiscalpolicy['articles'].apply(lambda x: x['description']).to_list()\nmacroeconomic_title_corpus = macroeconomic['articles'].apply(lambda x: x['title']).to_list()\nmacroeconomic_description_corpus = macroeconomic['articles'].apply(lambda x: x['description']).to_list()\n\n\n# Perform count vectorization and print the results\nprint(\"-------------NewsAPI Corpus Count Vectorized-------------\")\nprint(countvectorizer(fiscalpolicy_title_corpus))\nprint(countvectorizer(fiscalpolicy_description_corpus))\nprint(countvectorizer(macroeconomic_title_corpus))\nprint(countvectorizer(macroeconomic_description_corpus))\n\n-------------NewsAPI Corpus Count Vectorized-------------\n(array(['000', '10', '12', '15', '1970s', '1b', '2007', '2023', '21', '23',\n       '26', '29', '307', '33', '50', '5bn', '85', '99', '99th', 'about',\n       'accept', 'according', 'act', 'adds', 'administration',\n       'admissions', 'advocates', 'aerial', 'affect', 'after', 'against',\n       'age', 'ahead', 'ai', 'aid', 'aims', 'alarm', 'all', 'allow',\n       'alone', 'along', 'america', 'american', 'amid', 'an', 'anatomy',\n       'and', 'angeles', 'announcement', 'anurag', 'appetite', 'approves',\n       'arabia', 'araya', 'are', 'argentina', 'arnold', 'around', 'as',\n       'at', 'attacks', 'auditors', 'avoided', 'away', 'back', 'backing',\n       'bad', 'ban', 'bank', 'bankruptcies', 'be', 'becomes', 'before',\n       'begin', 'behind', 'benefits', 'biden', 'biggest', 'bill',\n       'billions', 'birthday', 'blackberry', 'bloated', 'bofa', 'boj',\n       'bomb', 'bond', 'border', 'bot', 'both', 'break', 'brown',\n       'bubble', 'budget', 'building', 'bull', 'burden', 'bus', 'but',\n       'by', 'calls', 'calmes', 'can', 'capitulation', 'caribbean',\n       'carta', 'carter', 'catastrophe', 'catch', 'caution', 'cautious',\n       'celebrating', 'central', 'ceo', 'chair', 'charlie', 'charts',\n       'children', 'china', 'chinese', 'choice', 'cities', 'climate',\n       'cloud', 'cluster', 'collision', 'come', 'coming', 'commissions',\n       'companies', 'complete', 'concerned', 'confirms', 'congress',\n       'construction', 'contracts', 'controlling', 'controversy',\n       'conundrum', 'corporate', 'cost', 'could', 'countries', 'credit',\n       'crisis', 'crossings', 'curve', 'cut', 'cuts', 'dead', 'deal',\n       'debasement', 'debt', 'decade', 'decision', 'defaults', 'defense',\n       'deficit', 'delays', 'delhi', 'demands', 'denmark', 'deportations',\n       'deputy', 'derailed', 'despite', 'deteriorated', 'deutsche',\n       'developed', 'digital', 'dilemma', 'director', 'disability',\n       'disarray', 'discipline', 'do', 'doesn', 'dog', 'dollarize',\n       'dollars', 'dominate', 'down', 'downgraded', 'downtowns', 'dumb',\n       'dumber', 'dwindling', 'dying', 'eats', 'economic', 'economies',\n       'economist', 'economy', 'egypt', 'electric', 'eliminate', 'end',\n       'enhance', 'environmental', 'equity', 'eu', 'europe', 'excess',\n       'excise', 'exclusive', 'experts', 'explainer', 'extend',\n       'extended', 'extra', 'face', 'faces', 'faltering', 'family',\n       'fare', 'faster', 'fault', 'fears', 'fed', 'federal', 'fell',\n       'fidelity', 'fight', 'finance', 'financial', 'first', 'fiscal',\n       'five', 'flashpoint', 'following', 'for', 'foraging', 'fox', 'fpi',\n       'friendly', 'from', 'full', 'future', 'fy23', 'fy24', 'gauge',\n       'generation', 'get', 'ghana', 'global', 'goldman', 'goldmans',\n       'good', 'got', 'gov', 'government', 'governor', 'govt', 'grantham',\n       'great', 'greater', 'groceries', 'gross', 'guidance', 'gut', 'h1',\n       'half', 'happens', 'harder', 'harvard', 'has', 'have', 'he',\n       'head', 'headwinds', 'health', 'heaviest', 'herald', 'here',\n       'high', 'higher', 'highest', 'highways', 'hike', 'hinted', 'his',\n       'history', 'hit', 'hits', 'hitters', 'home', 'house', 'how',\n       'hurtling', 'idea', 'if', 'igb', 'imf', 'imitates', 'impact',\n       'implies', 'improve', 'in', 'inclusion', 'income', 'indentured',\n       'index', 'india', 'induced', 'industrial', 'inflation', 'inside',\n       'instacart', 'interest', 'interim', 'into', 'inverted',\n       'investment', 'investors', 'iphone', 'is', 'isn', 'it', 'its',\n       'itself', 'jain', 'jeremy', 'jets', 'jimmy', 'jpmorgan', 'kevin',\n       'key', 'killed', 'kling', 'know', 'labor', 'lachlan', 'language',\n       'large', 'last', 'latin', 'latino', 'lawmakers', 'laws',\n       'leadership', 'least', 'leaving', 'legacy', 'lend', 'less', 'life',\n       'like', 'likely', 'live', 'long', 'longer', 'look', 'looks',\n       'looming', 'los', 'losses', 'lost', 'low', 'lying', 'macro',\n       'made', 'magna', 'main', 'make', 'making', 'many', 'market',\n       'markets', 'massachusetts', 'math', 'may', 'maybe', 'mccarthy',\n       'mchenry', 'members', 'mercosur', 'migrants', 'million',\n       'minister', 'mistakes', 'models', 'moderate', 'money', 'months',\n       'moody', 'more', 'most', 'motion', 'mount', 'murdoch', 'museum',\n       'mónica', 'national', 'nationalism', 'nato', 'navigate', 'need',\n       'needs', 'negatively', 'nepa', 'net', 'new', 'news', 'newsom',\n       'next', 'no', 'normalisation', 'november', 'now', 'of', 'off',\n       'official', 'ohio', 'on', 'one', 'only', 'options', 'or', 'other',\n       'others', 'out', 'over', 'overhaul', 'overpays', 'pace', 'package',\n       'pain', 'participation', 'path', 'patrick', 'pay', 'pc',\n       'pentagon', 'people', 'pick', 'piling', 'pimco', 'policy',\n       'politicians', 'politics', 'pomboy', 'poses', 'power', 'private',\n       'program', 'programme', 'programs', 'projects', 'proposes',\n       'punch', 'push', 'quickly', 'raises', 'ramaswamy', 'ramp', 'rat',\n       'rate', 'rates', 'rating', 'rbi', 're', 'reach', 'reasons',\n       'recession', 'record', 'recovery', 'refusal', 'regime',\n       'regulator', 'relationship', 'remains', 'removed', 'rep',\n       'republican', 'republicans', 'requirements', 'reserve',\n       'responsibility', 'rest', 'rippling', 'rises', 'rising', 'risk',\n       'risks', 'road', 'roaring', 'rosalynn', 'rouble', 'ruin', 'run',\n       'rupert', 'russia', 'sachs', 'said', 'sales', 'saudi', 'say',\n       'says', 'scare', 'schooling', 'secretary', 'sector', 'security',\n       'see', 'senate', 'sensitive', 'serve', 'servitude', 'shareholders',\n       'should', 'shoulder', 'showdowns', 'shows', 'shutdown', 'shuts',\n       'since', 'situation', 'slow', 'slowdown', 'snap', 'so', 'social',\n       'some', 'sounding', 'sounds', 'southern', 'speaker', 'spending',\n       'spike', 'split', 'start', 'stealth', 'stephanie', 'sticking',\n       'still', 'stimulus', 'stock', 'stocks', 'stores', 'street',\n       'style', 'substantially', 'suggestions', 'switch', 'tastier',\n       'tax', 'thailand', 'that', 'the', 'themes', 'then', 'there',\n       'these', 'they', 'thinktank', 'third', 'this', 'threat', 'through',\n       'thrown', 'thursday', 'time', 'times', 'to', 'today', 'too',\n       'total', 'toward', 'trade', 'trades', 'traditional', 'transfers',\n       'treasury', 'tributes', 'trillion', 'trump', 'trying', 'turning',\n       'turns', 'twilight', 'two', 'uber', 'uk', 'under', 'union',\n       'unlawful', 'unsustainable', 'up', 'upgrades', 'upheaval', 'urges',\n       'us', 'used', 'vehicles', 'vends', 'venezuela', 'verizon', 'visa',\n       'vivek', 'vote', 'waives', 'wall', 'wallet', 'wants', 'warn',\n       'warning', 'warns', 'washington', 'ways', 'weak', 'weaker', 'what',\n       'while', 'white', 'who', 'why', 'wildly', 'will', 'with',\n       'without', 'world', 'would', 'wrong', 'year', 'yearly', 'yield',\n       'yields', 'york', 'you', 'your', 'zero', 'zones'], dtype=object), array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]]))\n(array(['10', '12', '16', ..., 'youth', 'zalles', 'zero'], dtype=object), array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]]))\n(array(['000', '10', '12', '14', '15', '19', '20', '200', '2023', '2024',\n       '27', '34', '40', '400', '500', '56', '5m', '76', '829', '90',\n       '977', 'about', 'activist', 'activity', 'adeyemi', 'adiatu',\n       'after', 'against', 'ahead', 'ai', 'airstream', 'all', 'alphabet',\n       'already', 'am', 'americas', 'amid', 'an', 'analysts', 'and',\n       'announces', 'apes', 'app', 'apparel', 'apple', 'are', 'argentine',\n       'around', 'article', 'arzdigital', 'as', 'asahi', 'asean', 'asia',\n       'assets', 'at', 'attract', 'australia', 'autoworkers', 'aviation',\n       'awaits', 'back', 'bank', 'bans', 'barrel', 'based', 'battered',\n       'be', 'before', 'being', 'below', 'benefit', 'benz', 'bernstein',\n       'beverages', 'beyond', 'bid', 'biggest', 'billionaire', 'bitcoin',\n       'biz', 'blackrock', 'blanket', 'boom', 'bored', 'boss', 'bottom',\n       'bounced', 'brand', 'brave', 'break', 'bros', 'btc', 'building',\n       'bull', 'business', 'businesses', 'but', 'buyers', 'by', 'băncile',\n       'call', 'camper', 'can', 'capital', 'cards', 'caution', 'cautious',\n       'centrale', 'ceo', 'challenges', 'changing', 'china', 'chip',\n       'chosen', 'cisos', 'citing', 'client', 'climate', 'cme', 'cnet',\n       'co', 'coalescing', 'coke', 'collaborative', 'commodity',\n       'companies', 'company', 'comprehensive', 'concern', 'concerns',\n       'conditions', 'conference', 'consumers', 'continue', 'contract',\n       'cope', 'copper', 'correlations', 'cost', 'costs', 'could',\n       'count', 'coworking', 'crackdown', 'crashes', 'created', 'credit',\n       'creditsights', 'crude', 'crypto', 'cryptocurrencies', 'cu',\n       'custody', 'cuts', 'cycle', 'dalio', 'dark', 'data', 'datatrek',\n       'day', 'days', 'decade', 'defence', 'defies', 'demand', 'demerger',\n       'despite', 'deutsche', 'diamond', 'different', 'dificultate',\n       'digital', 'digitimes', 'discovery', 'do', 'dobânzi', 'doesn',\n       'dollar', 'dow', 'down', 'downloads', 'dr', 'drink', 'driven',\n       'drop', 'dumb', 'earnings', 'economic', 'economists', 'economy',\n       'efect', 'emboldening', 'employees', 'energy', 'enhance',\n       'environment', 'era', 'estate', 'etfs', 'ether', 'exceeds',\n       'exchange', 'exist', 'existence', 'exits', 'expect', 'expectation',\n       'expected', 'expensive', 'experts', 'exports', 'express',\n       'extends', 'face', 'fact', 'fair', 'fall', 'falls', 'fast',\n       'favorable', 'fears', 'fidelity', 'finds', 'fine', 'fintech',\n       'firm', 'first', 'flails', 'flashing', 'focused', 'following',\n       'fomc', 'for', 'forecasting', 'found', 'foundry', 'fpi', 'fragile',\n       'franchise', 'from', 'frontrunner', 'fsb', 'fundamentally',\n       'funding', 'g7', 'gain', 'gaining', 'gamestop', 'gap', 'gas',\n       'gauge', 'gerhard', 'get', 'ghana', 'ghosted', 'giant', 'global',\n       'godaddy', 'going', 'golden', 'google', 'gov', 'graphcore',\n       'grassroots', 'group', 'groups', 'grows', 'growth', 'half', 'he',\n       'headed', 'heading', 'headwinds', 'help', 'here', 'high', 'higher',\n       'highs', 'hike', 'hiring', 'hit', 'hits', 'hong', 'hope', 'how',\n       'identify', 'if', 'igb', 'imf', 'implied', 'improve', 'in',\n       'inclusion', 'increase', 'incremental', 'index', 'indian',\n       'indicators', 'indices', 'induced', 'industry', 'inefficiency',\n       'inflation', 'influence', 'infrastructure', 'innovations',\n       'interest', 'inventories', 'investment', 'investor', 'investors',\n       'iphone', 'iran', 'irish', 'is', 'isn', 'it', 'its', 'jpmorgan',\n       'jumpcloud', 'jumps', 'just', 'key', 'kong', 'kremlin', 'labs',\n       'laid', 'large', 'largest', 'last', 'late', 'latest', 'launch',\n       'launches', 'launching', 'lay', 'layoffs', 'lays', 'leaders',\n       'leadership', 'lean', 'learned', 'ledger', 'legacy', 'lessons',\n       'level', 'little', 'loan', 'loathing', 'local', 'looks', 'looms',\n       'losing', 'low', 'macos', 'macroeconomic', 'make', 'march',\n       'market', 'markets', 'matter', 'maximize', 'media', 'medtech',\n       'meet', 'mercedes', 'mercury', 'michael', 'mid', 'midcap', 'milei',\n       'million', 'mistake', 'models', 'monday', 'monetary', 'money',\n       'month', 'more', 'mortgage', 'move', 'mover', 'navigating', 'near',\n       'nearing', 'nearly', 'negative', 'new', 'next', 'nice', 'nifty',\n       'nike', 'no', 'not', 'november', 'now', 'october', 'of', 'off',\n       'offset', 'offshore', 'oil', 'on', 'only', 'operators', 'optimism',\n       'or', 'other', 'out', 'over', 'overshadow', 'participation',\n       'past', 'path', 'pause', 'pay', 'payment', 'pe', 'per', 'percent',\n       'performance', 'peso', 'petrolului', 'pixel', 'plan', 'plans',\n       'please', 'pointing', 'points', 'policy', 'poorly', 'populism',\n       'positioned', 'post', 'pre', 'presidential', 'pressure', 'prețul',\n       'price', 'prices', 'priorities', 'privacy', 'pro', 'professionals',\n       'profit', 'prospects', 'pts', 'pulse', 'pune', 'put', 'quarter',\n       'quarterly', 'quell', 'rare', 'rate', 'rates', 'ray', 'rbi', 're',\n       'reads', 'real', 'reality', 'rebounds', 'recessions', 'record',\n       'records', 'recovery', 'recruitment', 'red', 'refinance',\n       'refining', 'remain', 'removed', 'repo', 'report', 'research',\n       'reshape', 'resilient', 'restart', 'restructuring', 'returns',\n       'reveals', 'revenue', 'revenues', 'revision', 'right', 'rival',\n       'road', 'roil', 'roll', 'ruble', 'russia', 'russian', 'rv',\n       'salary', 'sales', 'same', 'say', 'saylor', 'says', 'sector',\n       'seeks', 'sees', 'sell', 'sensex', 'sep', 'sept', 'september',\n       'set', 'sets', 'ship', 'shipments', 'shutdown', 'side', 'sign',\n       'signs', 'since', 'sink', 'sinks', 'slash', 'slice', 'slide',\n       'slips', 'slowdown', 'slows', 'slump', 'small', 'smallcap',\n       'smartphone', 'smartphones', 'smbs', 'so', 'spaces', 'spate',\n       'spending', 'spiral', 'sprinter', 'stable', 'staff', 'stagnation',\n       'start', 'startup', 'steady', 'still', 'stock', 'stocks',\n       'straight', 'strategies', 'strength', 'strong', 'stronger',\n       'struggle', 'student', 'studied', 'study', 'suggests', 'survive',\n       'synapse', 'tackle', 'tailwinds', 'taiwan', 'talent', 'tanked',\n       'targets', 'tax', 'tayo', 'team', 'tech', 'tell', 'tension',\n       'than', 'that', 'the', 'they', 'things', 'think', 'though',\n       'threatens', 'thriving', 'through', 'tick', 'tightness', 'time',\n       'times', 'to', 'today', 'too', 'top', 'tops', 'tough', 'traction',\n       'trades', 'traits', 'transition', 'treasury', 'trend',\n       'triumphant', 'trouble', 'twice', 'two', 'uba', 'uncertain',\n       'uncertainty', 'unity', 'unveiled', 'update', 'upgrade', 'ups',\n       'us', 'usage', 'utility', 'van', 've', 'vedanta', 'versus', 'very',\n       'vietnam', 'volatility', 'walmart', 'wants', 'warner', 'warning',\n       'warns', 'was', 'way', 'weakening', 'week', 'welcome', 'well',\n       'when', 'why', 'widening', 'will', 'wind', 'with', 'won',\n       'workers', 'workforce', 'working', 'worried', 'worst', 'year',\n       'you', 'yuga', 'zeiler', 'în'], dtype=object), array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]]))\n(array(['000', '0003', '039', ..., 'zeiler', 'zhao', 'în'], dtype=object), array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 1, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]]))"
  },
  {
    "objectID": "codes/EDA + Naive Bayes.html",
    "href": "codes/EDA + Naive Bayes.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import  pandas  as  pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport missingno as msno\n\n\nindia=pd.read_csv(\"/Users/sheebamoghal/Downloads/india.csv\")\nrussia=pd.read_csv(\"/Users/sheebamoghal/Downloads/russia.csv\")\nchina=pd.read_csv(\"/Users/sheebamoghal/Downloads/china.csv\")\nbrazil=pd.read_csv(\"/Users/sheebamoghal/Downloads/brazil.csv\")\nsouthafrica=pd.read_csv(\"/Users/sheebamoghal/Downloads/southafrica.csv\")\nstacked_df = pd.concat([india, russia, china, brazil, southafrica])\n\n\nstacked_df.isna().sum()\n\nyear                              0\nadj_NNI_g                         0\nadj_NNI_c                         0\nadj_savings_fix_cap_GNI           0\nadj_savings_edu_GNI               0\nadj_NNS_GNI                       0\ncurr_acc_bal                      0\nex_imp_gdp                        0\nex_imp_growth                     0\nex_debt_shocks                    0\nfinal_consump_exp_gdp            34\nfinal_consump_exp_growth          0\nfdi_net_inflows                   0\nfdi_net_outflows                  0\ngdp_growth                        0\ngdp_per_capita_growth             0\ngener_govt_fin_consump_exp        0\ngni_growth                        0\ngoods_exp_bop                     0\ngoods_imp_bop                    34\nimports_goods_services_gdp        0\nimports_goods_services_growth     0\nservices_gdp                      0\nservices_growth                   0\nshort_term_debt_tot_reserves     34\ntrade_gdp                         0\ncpi                               0\ninflation                         0\nreal_interest_rate                0\nlending_interest_rate             0\nlife_exp_birth                    0\nexpense_gdp                       0\ninterest_payments                 0\nmilitary expenditure              0\nyear.1                           50\nlabels                           11\ndtype: int64\n\n\n\n# normalise the data \n\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\n\nnumerical_columns = stacked_df.select_dtypes(include=['float64', 'int64']).columns\n\nscaler = StandardScaler()\ndf_standardized = pd.DataFrame(scaler.fit_transform(stacked_df[numerical_columns]), columns=numerical_columns)\n\n# Add standardized columns back to the original DataFrame\nstacked_df[df_standardized.columns] = df_standardized\n\nprint(stacked_df)\n\n        year  adj_NNI_g  adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0  -1.647859   1.230366  -0.584186                 0.270892   \n1  -1.572340  -1.216110  -0.587317                 0.313510   \n2  -1.496821  -0.510146  -0.585389                 0.367195   \n3  -1.421301   1.160350  -0.571455                 0.316780   \n4  -1.345782  -0.472199  -0.568965                 0.362786   \n..       ...        ...        ...                      ...   \n45 -0.364032   2.527897  -0.512882                 1.759849   \n46 -0.288513  -0.118473  -0.505246                -0.224029   \n47 -0.212994  -1.870050  -0.518213                -1.539088   \n48 -0.137474   2.674116  -0.479613                 1.894557   \n49 -0.061955   3.005168  -0.428619                 2.160723   \n\n    adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0             -0.277537    -0.052004     -1.431497   -0.575405       0.419580   \n1             -0.277537     0.103127     -1.461364   -0.595831      -0.481153   \n2             -0.277537     0.049534     -1.451971   -0.591086       0.536099   \n3             -0.277537     0.046547     -1.426664   -0.605706      -0.495731   \n4             -0.277537     0.058430     -1.440478   -0.560968       0.726138   \n..                  ...          ...           ...         ...            ...   \n45            -0.277537    -0.518910      0.515624   -2.052646       0.024080   \n46            -0.277537    -0.518910      0.168654   -2.220329      -0.390300   \n47            -0.277537    -0.518910      0.016460   -2.339903      -0.355711   \n48            -0.277537    -0.518732      0.646093   -0.322323       1.376085   \n49            -0.277537    -0.518555      1.173862    0.855100       2.240148   \n\n    ex_debt_shocks  ...       cpi  inflation  real_interest_rate  \\\n0        -1.270470  ... -0.233992  -0.710643           -1.482124   \n1        -1.204634  ... -0.201048  -0.685047           -1.448189   \n2        -0.969857  ... -0.178623  -0.760710           -1.307713   \n3        -0.889487  ... -0.142234  -0.703079           -1.331706   \n4        -0.708319  ... -0.113700  -0.754506           -1.298597   \n..             ...  ...       ...        ...                 ...   \n45        0.628001  ... -0.501653   0.205699            0.815326   \n46        0.457744  ... -0.443525  -0.375942            0.780130   \n47        1.280590  ... -0.577392   0.927162            1.230426   \n48        2.801555  ... -0.427215   0.961900            1.950714   \n49        2.908093  ... -0.302204  -0.056144            1.882002   \n\n    lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0               -0.845342       -0.112698    -0.121526          -2.585569   \n1               -0.845342       -0.110878    -0.141348          -2.568657   \n2               -0.845342       -0.109081    -0.105898          -2.482726   \n3               -0.845342       -0.107310    -0.098738          -2.373275   \n4               -0.845342       -0.105584    -0.034063          -2.283824   \n..                    ...             ...          ...                ...   \n45              -0.979266       -0.131598    -0.824782           0.418079   \n46              -0.953380       -0.238025     0.064149           0.466798   \n47              -0.897663       -0.196331     0.358975           0.485889   \n48              -0.677325       -0.009030    -1.982792           0.425465   \n49              -0.578051       -0.218548    -1.416990           0.396709   \n\n    military expenditure    year.1            labels  \n0              -0.167829 -1.808466       High Growth  \n1              -0.151690 -1.729441       High Growth  \n2              -0.102821 -1.650415   Moderate Growth  \n3              -0.109603 -1.571390  Very High Growth  \n4              -0.080748 -1.492364   Moderate Growth  \n..                   ...       ...               ...  \n45              0.023742 -0.465034        Low Growth  \n46              0.110872 -0.386009        Low Growth  \n47             -0.291221 -0.306983        Low Growth  \n48             -0.186438 -0.227958  Very High Growth  \n49             -0.114537 -0.148933   Moderate Growth  \n\n[206 rows x 36 columns]\n\n\n\nstacked_df = stacked_df.dropna()\n\n\nstacked_df.isna().sum()\n\nyear                             0\nadj_NNI_g                        0\nadj_NNI_c                        0\nadj_savings_fix_cap_GNI          0\nadj_savings_edu_GNI              0\nadj_NNS_GNI                      0\ncurr_acc_bal                     0\nex_imp_gdp                       0\nex_imp_growth                    0\nex_debt_shocks                   0\nfinal_consump_exp_gdp            0\nfinal_consump_exp_growth         0\nfdi_net_inflows                  0\nfdi_net_outflows                 0\ngdp_growth                       0\ngdp_per_capita_growth            0\ngener_govt_fin_consump_exp       0\ngni_growth                       0\ngoods_exp_bop                    0\ngoods_imp_bop                    0\nimports_goods_services_gdp       0\nimports_goods_services_growth    0\nservices_gdp                     0\nservices_growth                  0\nshort_term_debt_tot_reserves     0\ntrade_gdp                        0\ncpi                              0\ninflation                        0\nreal_interest_rate               0\nlending_interest_rate            0\nlife_exp_birth                   0\nexpense_gdp                      0\ninterest_payments                0\nmilitary expenditure             0\nyear.1                           0\nlabels                           0\ndtype: int64\n\n\n\nstacked_df.drop(columns='year')\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\nlabels\n\n\n\n\n0\n1.230366\n-0.584186\n0.270892\n-0.277537\n-0.052004\n-1.431497\n-0.575405\n0.419580\n-1.270470\n2.105233\n...\n-0.233992\n-0.710643\n-1.482124\n-0.845342\n-0.112698\n-0.121526\n-2.585569\n-0.167829\n-1.808466\nHigh Growth\n\n\n1\n-1.216110\n-0.587317\n0.313510\n-0.277537\n0.103127\n-1.461364\n-0.595831\n-0.481153\n-1.204634\n2.049838\n...\n-0.201048\n-0.685047\n-1.448189\n-0.845342\n-0.110878\n-0.141348\n-2.568657\n-0.151690\n-1.729441\nHigh Growth\n\n\n2\n-0.510146\n-0.585389\n0.367195\n-0.277537\n0.049534\n-1.451971\n-0.591086\n0.536099\n-0.969857\n2.035450\n...\n-0.178623\n-0.760710\n-1.307713\n-0.845342\n-0.109081\n-0.105898\n-2.482726\n-0.102821\n-1.650415\nModerate Growth\n\n\n3\n1.160350\n-0.571455\n0.316780\n-0.277537\n0.046547\n-1.426664\n-0.605706\n-0.495731\n-0.889487\n2.045585\n...\n-0.142234\n-0.703079\n-1.331706\n-0.845342\n-0.107310\n-0.098738\n-2.373275\n-0.109603\n-1.571390\nVery High Growth\n\n\n4\n-0.472199\n-0.568965\n0.362786\n-0.277537\n0.058430\n-1.440478\n-0.560968\n0.726138\n-0.708319\n2.023954\n...\n-0.113700\n-0.754506\n-1.298597\n-0.845342\n-0.105584\n-0.034063\n-2.283824\n-0.080748\n-1.492364\nModerate Growth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n45\n2.527897\n-0.512882\n1.759849\n-0.277537\n-0.518910\n0.515624\n-2.052646\n0.024080\n0.628001\n-0.581674\n...\n-0.501653\n0.205699\n0.815326\n-0.979266\n-0.131598\n-0.824782\n0.418079\n0.023742\n-0.465034\nLow Growth\n\n\n46\n-0.118473\n-0.505246\n-0.224029\n-0.277537\n-0.518910\n0.168654\n-2.220329\n-0.390300\n0.457744\n-0.713473\n...\n-0.443525\n-0.375942\n0.780130\n-0.953380\n-0.238025\n0.064149\n0.466798\n0.110872\n-0.386009\nLow Growth\n\n\n47\n-1.870050\n-0.518213\n-1.539088\n-0.277537\n-0.518910\n0.016460\n-2.339903\n-0.355711\n1.280590\n-0.636601\n...\n-0.577392\n0.927162\n1.230426\n-0.897663\n-0.196331\n0.358975\n0.485889\n-0.291221\n-0.306983\nLow Growth\n\n\n48\n2.674116\n-0.479613\n1.894557\n-0.277537\n-0.518732\n0.646093\n-0.322323\n1.376085\n2.801555\n-0.338714\n...\n-0.427215\n0.961900\n1.950714\n-0.677325\n-0.009030\n-1.982792\n0.425465\n-0.186438\n-0.227958\nVery High Growth\n\n\n49\n3.005168\n-0.428619\n2.160723\n-0.277537\n-0.518555\n1.173862\n0.855100\n2.240148\n2.908093\n-0.393170\n...\n-0.302204\n-0.056144\n1.882002\n-0.578051\n-0.218548\n-1.416990\n0.396709\n-0.114537\n-0.148933\nModerate Growth\n\n\n\n\n195 rows × 35 columns\n\n\n\n\nstacked_df.describe\n\n&lt;bound method NDFrame.describe of         year  adj_NNI_g  adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0  -1.647859   1.230366  -0.584186                 0.270892   \n1  -1.572340  -1.216110  -0.587317                 0.313510   \n2  -1.496821  -0.510146  -0.585389                 0.367195   \n3  -1.421301   1.160350  -0.571455                 0.316780   \n4  -1.345782  -0.472199  -0.568965                 0.362786   \n..       ...        ...        ...                      ...   \n45 -0.364032   2.527897  -0.512882                 1.759849   \n46 -0.288513  -0.118473  -0.505246                -0.224029   \n47 -0.212994  -1.870050  -0.518213                -1.539088   \n48 -0.137474   2.674116  -0.479613                 1.894557   \n49 -0.061955   3.005168  -0.428619                 2.160723   \n\n    adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0             -0.277537    -0.052004     -1.431497   -0.575405       0.419580   \n1             -0.277537     0.103127     -1.461364   -0.595831      -0.481153   \n2             -0.277537     0.049534     -1.451971   -0.591086       0.536099   \n3             -0.277537     0.046547     -1.426664   -0.605706      -0.495731   \n4             -0.277537     0.058430     -1.440478   -0.560968       0.726138   \n..                  ...          ...           ...         ...            ...   \n45            -0.277537    -0.518910      0.515624   -2.052646       0.024080   \n46            -0.277537    -0.518910      0.168654   -2.220329      -0.390300   \n47            -0.277537    -0.518910      0.016460   -2.339903      -0.355711   \n48            -0.277537    -0.518732      0.646093   -0.322323       1.376085   \n49            -0.277537    -0.518555      1.173862    0.855100       2.240148   \n\n    ex_debt_shocks  ...       cpi  inflation  real_interest_rate  \\\n0        -1.270470  ... -0.233992  -0.710643           -1.482124   \n1        -1.204634  ... -0.201048  -0.685047           -1.448189   \n2        -0.969857  ... -0.178623  -0.760710           -1.307713   \n3        -0.889487  ... -0.142234  -0.703079           -1.331706   \n4        -0.708319  ... -0.113700  -0.754506           -1.298597   \n..             ...  ...       ...        ...                 ...   \n45        0.628001  ... -0.501653   0.205699            0.815326   \n46        0.457744  ... -0.443525  -0.375942            0.780130   \n47        1.280590  ... -0.577392   0.927162            1.230426   \n48        2.801555  ... -0.427215   0.961900            1.950714   \n49        2.908093  ... -0.302204  -0.056144            1.882002   \n\n    lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0               -0.845342       -0.112698    -0.121526          -2.585569   \n1               -0.845342       -0.110878    -0.141348          -2.568657   \n2               -0.845342       -0.109081    -0.105898          -2.482726   \n3               -0.845342       -0.107310    -0.098738          -2.373275   \n4               -0.845342       -0.105584    -0.034063          -2.283824   \n..                    ...             ...          ...                ...   \n45              -0.979266       -0.131598    -0.824782           0.418079   \n46              -0.953380       -0.238025     0.064149           0.466798   \n47              -0.897663       -0.196331     0.358975           0.485889   \n48              -0.677325       -0.009030    -1.982792           0.425465   \n49              -0.578051       -0.218548    -1.416990           0.396709   \n\n    military expenditure    year.1            labels  \n0              -0.167829 -1.808466       High Growth  \n1              -0.151690 -1.729441       High Growth  \n2              -0.102821 -1.650415   Moderate Growth  \n3              -0.109603 -1.571390  Very High Growth  \n4              -0.080748 -1.492364   Moderate Growth  \n..                   ...       ...               ...  \n45              0.023742 -0.465034        Low Growth  \n46              0.110872 -0.386009        Low Growth  \n47             -0.291221 -0.306983        Low Growth  \n48             -0.186438 -0.227958  Very High Growth  \n49             -0.114537 -0.148933   Moderate Growth  \n\n[195 rows x 36 columns]&gt;\n\n\n\n# Visual Data Representation\n\n\n# Histograms\n\n\nfig, ax = plt.subplots()\nax.hist(india[\"inflation\"], bins=30, alpha=0.5, label='India')\nax.hist(china[\"inflation\"], bins=30, alpha=0.5, label='China')\nax.hist(russia[\"inflation\"], bins=30, alpha=0.5, label='Russia')\nax.hist(brazil[\"inflation\"], bins=30, alpha=0.5, label='Brazil')\nax.hist(southafrica[\"inflation\"], bins=30, alpha=0.5, label='South Africa')\n\nax.set_xlabel('Inflation')\nax.set_ylabel('Percentage')\nax.set_title('BRICS')\nax.legend()\nplt.show()\n\n\n\n\n\n# Scatterplots\n\n\nfig= plt.figure(figsize=(18, 9))\nfig.suptitle('Trade Analysis')\n\nax1= fig.add_subplot(331)\nax1.set_title('India')\nax1.plot(india['year'],\n        india['trade_gdp'],\n        color='blue')\nax2= fig.add_subplot(332)\nax2.set_title('China')\nax2.plot(china['year'],\n        china['trade_gdp'],\n        color='brown')\nax3= fig.add_subplot(333)\nax3.set_title('Russia')\nax3.plot(russia['year'],\n        russia['trade_gdp'],\n        color='pink')\nax4= fig.add_subplot(334)\nax4.set_title('South Africa')\nax4.plot(southafrica['year'],\n        southafrica['trade_gdp'],\n        color='pink')\nax5= fig.add_subplot(335)\nax5.set_title('Brazil')\nax5.plot(brazil['year'],\n        brazil['trade_gdp'],\n        color='orange')\n\n\n\n\n\n# Create a Matplotlib figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a boxplot for all numerical columns in the DataFrame\nindia.boxplot(ax=ax)\n\n# Add labels and a title\nax.set_ylabel('Value')\nax.set_title('India')\n\n# Show the plot\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nrussia.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('Russia')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nchina.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('China')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nsouthafrica.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('South Africa')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbrazil.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('Brazil')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = india.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = china.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = russia.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = southafrica.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = brazil.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nfig, axes = plt.subplots(1, 5, figsize=(15, 5))\nsns.scatterplot(data=india, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[0])\naxes[0].set_title('India')\nsns.scatterplot(data=russia, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[1])\naxes[1].set_title('Russia')\nsns.scatterplot(data=china, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[2])\naxes[2].set_title('China')\nsns.scatterplot(data=brazil, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[3])\naxes[3].set_title('Brazil')\nsns.scatterplot(data=southafrica, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[4])\naxes[4].set_title('South Africa')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nsns.scatterplot(data=china, x=\"year\", y=\"adj_NNI_g\", hue='cpi')\n\n&lt;Axes: xlabel='year', ylabel='adj_NNI_g'&gt;\n\n\n\n\n\n\nsns.scatterplot(data=southafrica, x=\"year\", y=\"adj_NNI_g\", hue='cpi')\n\n&lt;Axes: xlabel='year', ylabel='adj_NNI_g'&gt;\n\n\n\n\n\n\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=india,palette='rainbow')\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_36001/431432563.py:1: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.violinplot(x=\"labels\", y=\"gni_growth\", data=india,palette='rainbow')\n\n\n&lt;Axes: xlabel='labels', ylabel='gni_growth'&gt;\n\n\n\n\n\n\nfig, axes = plt.subplots(1, 5, figsize=(15, 5))\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=india, ax=axes[0])\naxes[0].set_title('India')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=russia, ax=axes[1])\naxes[1].set_title('Russia')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=china, ax=axes[2])\naxes[2].set_title('China')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=brazil, ax=axes[3])\naxes[3].set_title('Brazil')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=southafrica, ax=axes[4])\naxes[4].set_title('South Africa')\nfor ax in axes:\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nplt.tight_layout()\nplt.show()\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_36001/980302243.py:13: UserWarning: FixedFormatter should only be used together with FixedLocator\n  ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\n\n\n\n\n\n# links used \n# https://towardsdatascience.com/data-visualization-using-matplotlib-16f1aae5ce70\n# https://nbviewer.org/github/BadreeshShetty/Data-Visualization-using-Matplotlib/blob/master/%281%29Histograms.ipynb\n\n\n# finding correlations - top 10 and bottom 10\ncorr = stacked_df.corr()\n\npositive_corr = corr[corr &gt; 0].stack().sort_values(ascending=True).head(10)\nprint(\"Top 10 Positive Correlations:\")\nprint(positive_corr)\n\nnegative_corr = corr[corr &lt; 0].stack().sort_values(ascending=True).head(10)\nprint(\"\\nTop 10 Negative Correlations:\")\nprint(negative_corr)\n\nTop 10 Positive Correlations:\nservices_growth          ex_imp_growth              0.002156\nex_imp_growth            services_growth            0.002156\nyear                     fdi_net_inflows            0.004391\nfdi_net_inflows          year                       0.004391\n                         year.1                     0.004391\nyear.1                   fdi_net_inflows            0.004391\nexpense_gdp              fdi_net_outflows           0.008516\nfdi_net_outflows         expense_gdp                0.008516\nadj_savings_fix_cap_GNI  trade_gdp                  0.010122\ntrade_gdp                adj_savings_fix_cap_GNI    0.010122\ndtype: float64\n\nTop 10 Negative Correlations:\nfdi_net_inflows                final_consump_exp_gdp           -0.951428\nfinal_consump_exp_gdp          fdi_net_inflows                 -0.951428\nadj_savings_edu_GNI            gener_govt_fin_consump_exp      -0.940114\ngener_govt_fin_consump_exp     adj_savings_edu_GNI             -0.940114\nimports_goods_services_growth  final_consump_exp_gdp           -0.932700\nfinal_consump_exp_gdp          imports_goods_services_growth   -0.932700\nservices_gdp                   final_consump_exp_gdp           -0.926872\nfinal_consump_exp_gdp          services_gdp                    -0.926872\n                               curr_acc_bal                    -0.899807\ncurr_acc_bal                   final_consump_exp_gdp           -0.899807\ndtype: float64\n\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_36001/471868201.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  corr = stacked_df.corr()\n\n\n\ncorrelation_threshold = 0.8  # Adjust as needed\nnegative_correlation_threshold = -0.8  # Adjust as needed\n\ncolumns_to_drop = set()\n\nfor i in range(len(corr.columns)):\n    for j in range(i):\n        if abs(corr.iloc[i, j]) &gt; correlation_threshold or corr.iloc[i, j] &lt; negative_correlation_threshold:\n            colname = corr.columns[i]\n            columns_to_drop.add(colname)\n\n\nstacked_df_dropped = stacked_df.drop(columns=columns_to_drop)\n\nprint(stacked_df_dropped)\n\n        year  adj_NNI_g  adj_savings_fix_cap_GNI  adj_savings_edu_GNI  \\\n0  -1.647859   1.230366                 0.270892            -0.277537   \n1  -1.572340  -1.216110                 0.313510            -0.277537   \n2  -1.496821  -0.510146                 0.367195            -0.277537   \n3  -1.421301   1.160350                 0.316780            -0.277537   \n4  -1.345782  -0.472199                 0.362786            -0.277537   \n..       ...        ...                      ...                  ...   \n45 -0.364032   2.527897                 1.759849            -0.277537   \n46 -0.288513  -0.118473                -0.224029            -0.277537   \n47 -0.212994  -1.870050                -1.539088            -0.277537   \n48 -0.137474   2.674116                 1.894557            -0.277537   \n49 -0.061955   3.005168                 2.160723            -0.277537   \n\n    adj_NNS_GNI  ex_imp_growth  ex_debt_shocks  fdi_net_outflows  gdp_growth  \\\n0     -0.052004       0.419580       -1.270470         -0.842531    1.595002   \n1      0.103127      -0.481153       -1.204634         -0.842808    1.304262   \n2      0.049534       0.536099       -0.969857         -0.842942    0.295912   \n3      0.046547      -0.495731       -0.889487         -0.842495    1.815392   \n4      0.058430       0.726138       -0.708319         -0.842596    0.433390   \n..          ...            ...             ...               ...         ...   \n45    -0.518910       0.024080        0.628001         -1.331112   -0.826727   \n46    -0.518910      -0.390300        0.457744         -0.144805   -0.610388   \n47    -0.518910      -0.355711        1.280590         -1.366720   -0.683008   \n48    -0.518732       1.376085        2.801555         -1.142294   -0.426718   \n49    -0.518555       2.240148        2.908093          0.553344   -0.678209   \n\n    short_term_debt_tot_reserves  lending_interest_rate  life_exp_birth  \\\n0                      -0.032164              -0.845342       -0.112698   \n1                       0.403253              -0.845342       -0.110878   \n2                       0.851964              -0.845342       -0.109081   \n3                       1.403674              -0.845342       -0.107310   \n4                       1.517825              -0.845342       -0.105584   \n..                           ...                    ...             ...   \n45                     -0.526985              -0.979266       -0.131598   \n46                     -0.518753              -0.953380       -0.238025   \n47                     -1.369414              -0.897663       -0.196331   \n48                     -1.350293              -0.677325       -0.009030   \n49                      1.010385              -0.578051       -0.218548   \n\n    expense_gdp  military expenditure            labels  \n0     -0.121526             -0.167829       High Growth  \n1     -0.141348             -0.151690       High Growth  \n2     -0.105898             -0.102821   Moderate Growth  \n3     -0.098738             -0.109603  Very High Growth  \n4     -0.034063             -0.080748   Moderate Growth  \n..          ...                   ...               ...  \n45    -0.824782              0.023742        Low Growth  \n46     0.064149              0.110872        Low Growth  \n47     0.358975             -0.291221        Low Growth  \n48    -1.982792             -0.186438  Very High Growth  \n49    -1.416990             -0.114537   Moderate Growth  \n\n[195 rows x 15 columns]\n\n\n\nY = stacked_df_dropped['labels']\nX =  stacked_df_dropped.drop(['labels'],axis =1)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42, test_size=0.2)\nx_train_valid, x_valid_test, y_train_valid, y_valid_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\n\n# Print the shapes of the datasets\nprint('Train data    : ' + str(X_train.shape))\nprint('Test data     : ' + str(X_test.shape))\nprint('Train Output  : ' + str(y_train.shape))\nprint('Test Output   : ' + str(y_test.shape))\nprint('Valid Train data    : ' + str(x_train_valid.shape))\nprint('Valid Test data     : ' + str(x_valid_test.shape))\nprint('Valid Train Output  : ' + str(y_train_valid.shape))\nprint('Valid Test Output   : ' + str(y_valid_test.shape))\n\nfrom sklearn import preprocessing\n\n# Assuming Y is your target variable\nyop = [str(i) for i in Y]  # Convert labels to strings\n\nle = preprocessing.LabelEncoder()\nY_op = le.fit_transform(yop)\n\n# Print the classes learned by the LabelEncoder\nprint(le.classes_)\n\nTrain data    : (156, 14)\nTest data     : (39, 14)\nTrain Output  : (156,)\nTest Output   : (39,)\nValid Train data    : (19, 14)\nValid Test data     : (20, 14)\nValid Train Output  : (19,)\nValid Test Output   : (20,)\n['High Growth' 'Low Growth' 'Moderate Growth' 'Very High Growth']\n\n\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay\n\n\nnaive_bayes = GaussianNB()\nnaive_bayes.fit(X_train, y_train)\n\nGaussianNB()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GaussianNBGaussianNB()\n\n\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n# Instantiate Gaussian Naive Bayes model\nnaive_bayes = GaussianNB()\n\n# Train the model on the training set\nnaive_bayes.fit(X_train, y_train)\n\n# Make predictions on the training, validation, and test sets\npred_train = naive_bayes.predict(X_train)\npred_valid = naive_bayes.predict(x_train_valid)\npred_test = naive_bayes.predict(X_test)\n\n# Function to calculate and print metrics\ndef print_metrics(y_true, y_pred, set_name):\n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true, y_pred, average='weighted')\n    recall = recall_score(y_true, y_pred, average='weighted')\n    f1 = f1_score(y_true, y_pred, average='weighted')\n\n    print(f\"{set_name} Set Metrics:\")\n    print(f\"Accuracy: {accuracy:.4f}\")\n    print(f\"Precision: {precision:.4f}\")\n    print(f\"Recall: {recall:.4f}\")\n    print(f\"F1 Score: {f1:.4f}\")\n    print(\"\\n\")\n\n# Print metrics for each set\nprint_metrics(y_train, pred_train, \"Training\")\nprint_metrics(y_train_valid, pred_valid, \"Validation\")\nprint_metrics(y_test, pred_test, \"Testing\")\n\nTraining Set Metrics:\nAccuracy: 0.3013\nPrecision: 0.5200\nRecall: 0.3013\nF1 Score: 0.3258\n\n\nValidation Set Metrics:\nAccuracy: 0.4211\nPrecision: 0.8585\nRecall: 0.4211\nF1 Score: 0.4842\n\n\nTesting Set Metrics:\nAccuracy: 0.3333\nPrecision: 0.6312\nRecall: 0.3333\nF1 Score: 0.3477\n\n\n\n\n\nConfusionMatrixDisplay.from_predictions(y_test, pred_test)\nConfusionMatrixDisplay.from_predictions(y_train, pred_train)\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x12d715360&gt;\n\n\n\n\n\n\n\n\nPCA\n\n# Import necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler\n\n\n# PCA \n\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport matplotlib.pyplot as plt\n\ny = stacked_df_dropped['labels']\nx = stacked_df_dropped.drop(['labels'], axis=1)\n\nlabel_encoder = LabelEncoder()\ny_numeric = label_encoder.fit_transform(y)\n\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(x)\n\npca = PCA()\npca_result = pca.fit_transform(scaled_data)\n\n\n\ncumulative_variance = np.cumsum(pca.explained_variance_ratio_)\nthreshold = 0.75\noptimal_components = np.argmax(cumulative_variance &gt;= threshold) + 1\n\n# Print the optimal number of components\nprint(\"Optimal Number of Components:\", optimal_components)\n\n# Visualize the scree plot\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(cumulative_variance) + 1), cumulative_variance, marker='o', linestyle='--')\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\n\nOptimal Number of Components: 5\n\n\n\n\n\n\n# pca with optimal components\n\npca_optimal = PCA(n_components=5)\npca_scaled = pca_optimal.fit_transform(scaled_data)\n\n\n\npca_optimal = PCA(n_components=10)\npca_scaled = pca_optimal.fit_transform(scaled_data)\n\nexplained_variance_ratio = pca_optimal.explained_variance_ratio_\ncumulative_explained_variance = np.cumsum(explained_variance_ratio)\n\n# Print explained variance ratio for each component\nprint(\"Explained Variance Ratio for Each Component:\")\nprint(explained_variance_ratio)\n\n# Print cumulative explained variance\nprint(\"\\nCumulative Explained Variance:\")\nprint(cumulative_explained_variance)\n\n# overall explained ratio\nexplained_variance_ratio = pca_optimal.explained_variance_ratio_\n\n# Print overall explained variance ratio\nprint(\"Overall Explained Variance Ratio:\", sum(explained_variance_ratio))\n\n# Plot scree plot\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(explained_variance_ratio) + 1), cumulative_explained_variance, marker='o', linestyle='--')\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\n# Visualize the reduced-dimensional data (2D for simplicity)\nplt.figure(figsize=(10, 6))\nplt.scatter(pca_scaled[:, 0], pca_scaled[:, 1], c=y_numeric, cmap='viridis')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('Reduced-Dimensional Data with PCA')\nplt.show()\n\nExplained Variance Ratio for Each Component:\n[0.28853879 0.21301008 0.13840716 0.08018878 0.0725367  0.06157796\n 0.04929693 0.03358696 0.02872127 0.01295779]\n\nCumulative Explained Variance:\n[0.28853879 0.50154887 0.63995603 0.7201448  0.7926815  0.85425946\n 0.90355639 0.93714336 0.96586462 0.97882242]\nOverall Explained Variance Ratio: 0.9788224152268657\n\n\n\n\n\n\n\n\n\n# t-sne\n\nperplexity_values = [5, 20, 50]\n\n# Create subplots to compare t-SNE results with different perplexities\nplt.figure(figsize=(15, 5))\n\nfor i, perplexity in enumerate(perplexity_values, 1):\n    tsne = TSNE(n_components=2, perplexity=perplexity, random_state=42)\n    X_tsne = tsne.fit_transform(scaled_data)\n\n    plt.subplot(1, len(perplexity_values), i)\n    plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_numeric, cmap='viridis', alpha=0.5)\n    plt.title(f't-SNE with Perplexity {perplexity}')\n    plt.xlabel('t-SNE Component 1')\n    plt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n# Try a range of perplexity values\nfrom sklearn.metrics import silhouette_score\nperplexity_values = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 100]\n\n# Evaluate t-SNE embeddings using Silhouette Score\nfor perplexity in perplexity_values:\n    tsne = TSNE(n_components=2, perplexity=perplexity, random_state=42)\n    X_tsne = tsne.fit_transform(scaled_data)\n    \n    silhouette_avg = silhouette_score(X_tsne, y)\n    \n    print(f\"Perplexity {perplexity}: Silhouette Score = {silhouette_avg}\")\n\nPerplexity 5: Silhouette Score = -0.08615632355213165\nPerplexity 10: Silhouette Score = -0.07540111243724823\nPerplexity 15: Silhouette Score = -0.08221957087516785\nPerplexity 20: Silhouette Score = -0.08641752600669861\nPerplexity 25: Silhouette Score = -0.0903933197259903\nPerplexity 30: Silhouette Score = -0.07546039670705795\nPerplexity 35: Silhouette Score = -0.0892048254609108\nPerplexity 40: Silhouette Score = -0.09243091940879822\nPerplexity 45: Silhouette Score = -0.07154285907745361\nPerplexity 50: Silhouette Score = -0.1005205363035202\nPerplexity 55: Silhouette Score = -0.08898735791444778\nPerplexity 60: Silhouette Score = -0.0836510956287384\nPerplexity 100: Silhouette Score = -0.10491596907377243\n\n\n\n# Apply PCA for comparison\npca = PCA(n_components=10)\nX_pca = pca.fit_transform(scaled_data)\n\n# Visualize PCA results\nplt.figure(figsize=(15, 5))\n\nplt.subplot(1, 2, 1)\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_numeric, cmap='viridis', alpha=0.5)\nplt.title('PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# Visualize t-SNE results with the best perplexity\nbest_perplexity = 100  # You can choose the best perplexity based on your observations\ntsne = TSNE(n_components=2, perplexity=best_perplexity, random_state=42)\nX_tsne = tsne.fit_transform(scaled_data)\n\nplt.subplot(1, 2, 2)\nplt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_numeric, cmap='viridis', alpha=0.5)\nplt.title(f't-SNE with Perplexity {best_perplexity}')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nimport pandas as pd\nfrom sklearn.metrics import silhouette_score\n\n# Apply t-SNE with the best perplexity\ntsne = TSNE(n_components=2, perplexity=45, random_state=42)\nX_tsne = tsne.fit_transform(scaled_data)\n\n# Calculate silhouette scores\nsilhouette_pca = silhouette_score(X_pca, y_numeric)\nsilhouette_tsne = silhouette_score(X_tsne, y_numeric)\n\n# Create a summary table\nsummary_table = pd.DataFrame({\n    'Method': ['PCA', f't-SNE (Perplexity {best_perplexity})'],\n    'Silhouette Score': [silhouette_pca, silhouette_tsne],\n    'Explained Variance Ratio': [sum(pca.explained_variance_ratio_), None]  # Replace None if t-SNE has a comparable metric\n})\n\n# Display the summary table\nprint(summary_table)\n\n                   Method  Silhouette Score  Explained Variance Ratio\n0                     PCA         -0.124699                  0.978822\n1  t-SNE (Perplexity 100)         -0.071543                       NaN\n\n\n\nfrom sklearn.metrics import silhouette_score, make_scorer\nfrom sklearn.model_selection import GridSearchCV\n\n# Define a custom scoring function using silhouette score\ndef silhouette_scorer(estimator, X):\n    try:\n        labels = estimator.fit_transform(X)\n        score = silhouette_score(X, labels)\n        return score\n    except Exception as e:\n        print(f\"Error calculating silhouette score: {e}\")\n        return float('-inf')  # Return a very low score for cases where silhouette score cannot be computed\n\n# Assuming 'scaled_data' is your scaled dataset\nparam_grid = {'perplexity': [5, 10, 20, 30, 40, 50]}\n\n# Use the custom scorer in GridSearchCV\ngrid_search = GridSearchCV(TSNE(n_components=2, random_state=42), param_grid, cv=5, scoring=make_scorer(silhouette_scorer))\ngrid_search.fit(scaled_data)\n\n# Print the best hyperparameters\nprint(\"Best Perplexity:\", grid_search.best_params_['perplexity'])\n\n\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 765, in _score\n    scores = scorer(estimator, X_test)\nTypeError: _BaseScorer.__call__() missing 1 required positional argument: 'y_true'\n\n  warnings.warn(\n/opt/homebrew/anaconda3/lib/python3.10/site-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan]\n  warnings.warn(\n\n\nBest Perplexity: 5\n\n\n\n# clustering \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\n# Ignore the FutureWarning about n_init\nwarnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"sklearn.cluster._kmeans\")\n\n\n# Find the optimal number of clusters using the elbow method\ndistortions = []\nK_range = range(1, 11)  # You can adjust the range based on your dataset\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans.fit(scaled_data)\n    distortions.append(kmeans.inertia_)\n\n# Plot the elbow method\nplt.plot(K_range, distortions, marker='o')\nplt.title('Elbow Method for Optimal K')\nplt.xlabel('Number of Clusters (K)')\nplt.ylabel('Distortion')\nplt.show()\n\n# Find the optimal number of clusters using silhouette score\nsilhouette_scores = []\nK_range = range(2, 11)  # You can adjust the range based on your dataset\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    labels = kmeans.fit_predict(scaled_data)\n    silhouette_avg = silhouette_score(scaled_data, labels)\n    silhouette_scores.append(silhouette_avg)\n\n# Plot silhouette scores\nplt.plot(K_range, silhouette_scores, marker='o')\nplt.title('Silhouette Score for Optimal K')\nplt.xlabel('Number of Clusters (K)')\nplt.ylabel('Silhouette Score')\nplt.show()\n\n# Choose the optimal number of clusters based on the analysis of elbow method and silhouette score\noptimal_k = 3  # Adjust based on the visualizations\n\n# Perform k-means clustering with the optimal number of clusters\nkmeans_optimal = KMeans(n_clusters=optimal_k, n_init=10, random_state=42)\nlabels_optimal = kmeans_optimal.fit_predict(scaled_data)\n\n# Visualize the clusters (for 2D data)\nif scaled_data.shape[1] == 2:\n    plt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels_optimal, cmap='viridis')\n    plt.title(f'K-Means Clustering (Optimal K={optimal_k})')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n    plt.show()\n\n# Optionally, you can add further analysis or evaluation steps based on your specific goals.\n\n\n\n\n\n\n\n\n\n# k means first \n\n# since we know k is optimal at 5, \n\n# Perform k-means clustering with the optimal number of clusters\nkmeans_optimal = KMeans(n_clusters=5, random_state=42)\nlabels_optimal = kmeans_optimal.fit_predict(scaled_data)\n\n# Visualize the clusters (for 2D data)\n\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels_optimal, cmap='viridis')\nplt.title('K-Means Clustering (Optimal K=5)')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.show()\n\n\n\n\n\n\n# with pca\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\n# Assuming X is your feature matrix\n# It's a good practice to standardize the data before applying PCA\n\n# Apply PCA and select the number of components\nn_components = 5  # Adjust the number of components based on your requirement\npca = PCA(n_components=n_components)\nX_pca = pca.fit_transform(scaled_data)\n\n# Choose the number of clusters for k-means\nn_clusters = 5  # Adjust the number of clusters based on your requirement\n\n# Apply k-means clustering to the PCA-transformed data\nkmeans = KMeans(n_clusters=n_clusters, random_state=42)\nlabels = kmeans.fit_predict(X_pca)\n\n# Evaluate clustering performance (silhouette score)\nsilhouette_score_value = silhouette_score(X_pca, labels)\nprint(f\"Silhouette Score: {silhouette_score_value:.4f}\")\n\nSilhouette Score: 0.4997\n\n\n\n# with pca and without pca \n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.decomposition import PCA\n\n# Assuming scaled_data is your feature matrix\n# It's a good practice to standardize the data before applying PCA\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(scaled_data)\n\n# Choose the number of clusters for k-means before PCA\nn_clusters_before_pca = 5  # Adjust the number of clusters based on your requirement\n\n# Apply k-means clustering before PCA\nkmeans_before_pca = KMeans(n_clusters=n_clusters_before_pca, random_state=42)\nlabels_before_pca = kmeans_before_pca.fit_predict(scaled_data)\n\n# Evaluate clustering performance before PCA (silhouette score)\nsilhouette_score_before_pca = silhouette_score(scaled_data, labels_before_pca)\nprint(f\"Silhouette Score before PCA: {silhouette_score_before_pca:.4f}\")\n\n# Apply PCA and select the number of components\nn_components = 5  # Adjust the number of components based on your requirement\npca = PCA(n_components=n_components)\nX_pca = pca.fit_transform(scaled_data)\n\n# Choose the number of clusters for k-means after PCA\nn_clusters_after_pca = 5  # Adjust the number of clusters based on your requirement\n\n# Apply k-means clustering to the PCA-transformed data\nkmeans_after_pca = KMeans(n_clusters=n_clusters_after_pca, random_state=42)\nlabels_after_pca = kmeans_after_pca.fit_predict(X_pca)\n\n# Evaluate clustering performance after PCA (silhouette score)\nsilhouette_score_after_pca = silhouette_score(X_pca, labels_after_pca)\nprint(f\"Silhouette Score after PCA: {silhouette_score_after_pca:.4f}\")\n\nSilhouette Score before PCA: 0.3791\nSilhouette Score after PCA: 0.4997\n\n\n\n# viz of w and w/o pca\n\nimport matplotlib.pyplot as plt\n\n# Visualize clusters before PCA\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels_before_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters Before PCA')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\n\n# Visualize clusters after PCA\nplt.subplot(1, 2, 2)\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=labels_after_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters After PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n# with variance threshold\n\nfrom sklearn.feature_selection import VarianceThreshold\n\n# Assuming X is your feature matrix\n# Apply Variance Thresholding\nvariance_threshold = VarianceThreshold(threshold=0.1)  # Adjust the threshold based on your requirement\nX_selected = variance_threshold.fit_transform(scaled_data)\n\n# Apply k-means clustering\nkmeans = KMeans(n_clusters=5, random_state=42)  # Adjust 'n_clusters' based on your requirement\nkmeans.fit(X_selected)\n\n# Predict clusters for the entire dataset\nclusters = kmeans.predict(X_selected)\n\n# Evaluate clustering performance (silhouette score)\nsilhouette_score_value = silhouette_score(X_selected, clusters)\n\nprint(f\"Silhouette Score: {silhouette_score_value:.4f}\")\n\nSilhouette Score: 0.3791\n\n\n\n# optimal parameter tuning for dbscan \n\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import silhouette_score\nimport numpy as np\n\n# Assuming you have your data in db_scaled_features\n# If not, replace db_scaled_features with your data\n# db_scaled_features = ...\n\nfor eps in [i/10 for i in range(4, 14)]:\n    for min_samples in range(4, 12):\n        print(\"\\neps={}\".format(eps))\n        print(\"min_samples={}\".format(min_samples))\n        \n        # Apply DBSCAN\n        dbscan = DBSCAN(eps=eps, min_samples=min_samples)\n        labels = dbscan.fit_predict(scaled_data)\n        \n        # Check if there is only one unique label\n        if len(np.unique(labels)) == 1:\n            print(\"Only one cluster found.\")\n        else:\n            # Calculate Silhouette Score\n            silh = silhouette_score(scaled_data, labels)\n        \n            # Print cluster information\n            print(\"Clusters present: {}\".format(np.unique(labels)))\n            print(\"Cluster sizes: {}\".format(np.bincount(labels + 1)))\n            print(\"Silhouette Score: {}\".format(silh))\n\n\neps=0.4\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29 30 31 32 33]\nCluster sizes: [40  5  5  5  5  4  4  4  4  5  5  5  5  4  4  4  5  4  4  5  5  5  5  5\n  5  5  5  5  5  4  4  4  4  4  4]\nSilhouette Score: 0.6942339996450013\n\neps=0.4\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [100   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5\n   5   5]\nSilhouette Score: 0.231257752015161\n\neps=0.4\nmin_samples=6\nOnly one cluster found.\n\neps=0.4\nmin_samples=7\nOnly one cluster found.\n\neps=0.4\nmin_samples=8\nOnly one cluster found.\n\neps=0.4\nmin_samples=9\nOnly one cluster found.\n\neps=0.4\nmin_samples=10\nOnly one cluster found.\n\neps=0.4\nmin_samples=11\nOnly one cluster found.\n\neps=0.5\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29 30 31 32 33]\nCluster sizes: [40  5  5  5  5  4  4  4  4  5  5  5  5  4  4  4  5  4  4  5  5  5  5  5\n  5  5  5  5  5  4  4  4  4  4  4]\nSilhouette Score: 0.6942339996450013\n\neps=0.5\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [100   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5\n   5   5]\nSilhouette Score: 0.231257752015161\n\neps=0.5\nmin_samples=6\nOnly one cluster found.\n\neps=0.5\nmin_samples=7\nOnly one cluster found.\n\neps=0.5\nmin_samples=8\nOnly one cluster found.\n\neps=0.5\nmin_samples=9\nOnly one cluster found.\n\neps=0.5\nmin_samples=10\nOnly one cluster found.\n\neps=0.5\nmin_samples=11\nOnly one cluster found.\n\neps=0.6\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29 30 31 32 33]\nCluster sizes: [40  5  5  5  5  4  4  4  4  5  5  5  5  4  4  4  5  4  4  5  5  5  5  5\n  5  5  5  5  5  4  4  4  4  4  4]\nSilhouette Score: 0.6942339996450013\n\neps=0.6\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [100   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5\n   5   5]\nSilhouette Score: 0.231257752015161\n\neps=0.6\nmin_samples=6\nOnly one cluster found.\n\neps=0.6\nmin_samples=7\nOnly one cluster found.\n\neps=0.6\nmin_samples=8\nOnly one cluster found.\n\neps=0.6\nmin_samples=9\nOnly one cluster found.\n\neps=0.6\nmin_samples=10\nOnly one cluster found.\n\neps=0.6\nmin_samples=11\nOnly one cluster found.\n\neps=0.7\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29 30]\nCluster sizes: [34  5  5  9  5  4  4  4  5  5  5  5  4  4  4  5  4  4  5  5 10  5  5 10\n  5  5  4  4  4  4  8  6]\nSilhouette Score: 0.6842546671665266\n\neps=0.7\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [82  5  5  9  5  5  5  5  5  5  5  5 10  5  5 10  5  5  8  6]\nSilhouette Score: 0.2978964348902478\n\neps=0.7\nmin_samples=6\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [152   9  10  10   8   6]\nSilhouette Score: -0.16114765640424009\n\neps=0.7\nmin_samples=7\nClusters present: [-1  0  1  2  3]\nCluster sizes: [158   9  10  10   8]\nSilhouette Score: -0.1867045502747072\n\neps=0.7\nmin_samples=8\nClusters present: [-1  0  1  2  3]\nCluster sizes: [158   9  10  10   8]\nSilhouette Score: -0.1867045502747072\n\neps=0.7\nmin_samples=9\nClusters present: [-1  0  1  2]\nCluster sizes: [166   9  10  10]\nSilhouette Score: -0.16932957855178282\n\neps=0.7\nmin_samples=10\nClusters present: [-1  0  1]\nCluster sizes: [175  10  10]\nSilhouette Score: -0.14067850948261917\n\neps=0.7\nmin_samples=11\nOnly one cluster found.\n\neps=0.8\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29 30]\nCluster sizes: [34  5  5  9  5  4  4  4  5  5  5  5  4  4  4  5  4  4  5  5 10  5  5 10\n  5  5  4  4  4  4  8  6]\nSilhouette Score: 0.6842546671665266\n\neps=0.8\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [82  5  5  9  5  5  5  5  5  5  5  5 10  5  5 10  5  5  8  6]\nSilhouette Score: 0.2978964348902478\n\neps=0.8\nmin_samples=6\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [152   9  10  10   8   6]\nSilhouette Score: -0.16114765640424009\n\neps=0.8\nmin_samples=7\nClusters present: [-1  0  1  2  3]\nCluster sizes: [158   9  10  10   8]\nSilhouette Score: -0.1867045502747072\n\neps=0.8\nmin_samples=8\nClusters present: [-1  0  1  2  3]\nCluster sizes: [158   9  10  10   8]\nSilhouette Score: -0.1867045502747072\n\neps=0.8\nmin_samples=9\nClusters present: [-1  0  1  2]\nCluster sizes: [166   9  10  10]\nSilhouette Score: -0.16932957855178282\n\neps=0.8\nmin_samples=10\nClusters present: [-1  0  1]\nCluster sizes: [175  10  10]\nSilhouette Score: -0.14067850948261917\n\neps=0.8\nmin_samples=11\nOnly one cluster found.\n\neps=0.9\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29 30 31]\nCluster sizes: [25  5  5  9  5  4  4  4  5  5  5  5  4  4  4  5  4  4  5  5 10  5  5 10\n  5  5  4  4  4  4  8  9  6]\nSilhouette Score: 0.7375007117207241\n\neps=0.9\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\nCluster sizes: [73  5  5  9  5  5  5  5  5  5  5  5 10  5  5 10  5  5  8  9  6]\nSilhouette Score: 0.34833577961304124\n\neps=0.9\nmin_samples=6\nClusters present: [-1  0  1  2  3  4  5]\nCluster sizes: [143   9  10  10   8   9   6]\nSilhouette Score: -0.11088368676364659\n\neps=0.9\nmin_samples=7\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [149   9  10  10   8   9]\nSilhouette Score: -0.14874274354211867\n\neps=0.9\nmin_samples=8\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [149   9  10  10   8   9]\nSilhouette Score: -0.14874274354211867\n\neps=0.9\nmin_samples=9\nClusters present: [-1  0  1  2  3]\nCluster sizes: [157   9  10  10   9]\nSilhouette Score: -0.18254670389235966\n\neps=0.9\nmin_samples=10\nClusters present: [-1  0  1]\nCluster sizes: [175  10  10]\nSilhouette Score: -0.14067850948261917\n\neps=0.9\nmin_samples=11\nOnly one cluster found.\n\neps=1.0\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28 29 30]\nCluster sizes: [22  5  5  9  5  4  4  4  5  5  5  5  4  4  4  5  4  4  5  5 10  5  5 10\n  5  5  4  4  4  4  8 18]\nSilhouette Score: 0.7248877449567327\n\neps=1.0\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [70  5  5  9  5  5  5  5  5  5  5  5 10  5  5 10  5  5  8 18]\nSilhouette Score: 0.33548064056233046\n\neps=1.0\nmin_samples=6\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [140   9  10  10   8  18]\nSilhouette Score: -0.12045842914366023\n\neps=1.0\nmin_samples=7\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [140   9  10  10   8  18]\nSilhouette Score: -0.12045842914366023\n\neps=1.0\nmin_samples=8\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [140   9  10  10   8  18]\nSilhouette Score: -0.12045842914366023\n\neps=1.0\nmin_samples=9\nClusters present: [-1  0  1  2  3]\nCluster sizes: [148   9  10  10  18]\nSilhouette Score: -0.12416950959948524\n\neps=1.0\nmin_samples=10\nClusters present: [-1  0  1  2]\nCluster sizes: [160  10  10  15]\nSilhouette Score: -0.11093620551972055\n\neps=1.0\nmin_samples=11\nClusters present: [-1  0]\nCluster sizes: [180  15]\nSilhouette Score: -0.07641552739966306\n\neps=1.1\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28]\nCluster sizes: [22  5  5  9  5  4  8  5  5  5  5  4  4  4  5  4  4  5  5 10  5  5 10  5\n  5  4  4  4  4 26]\nSilhouette Score: 0.7050907365394723\n\neps=1.1\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [62  5  5  9  5  8  5  5  5  5  5  5  5 10  5  5 10  5  5 26]\nSilhouette Score: 0.39603488662909336\n\neps=1.1\nmin_samples=6\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [132   9   8  10  10  26]\nSilhouette Score: -0.04466434293265843\n\neps=1.1\nmin_samples=7\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [132   9   8  10  10  26]\nSilhouette Score: -0.04466434293265843\n\neps=1.1\nmin_samples=8\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [132   9   8  10  10  26]\nSilhouette Score: -0.04466434293265843\n\neps=1.1\nmin_samples=9\nClusters present: [-1  0  1  2  3]\nCluster sizes: [140   9  10  10  26]\nSilhouette Score: -0.08238113847227989\n\neps=1.1\nmin_samples=10\nClusters present: [-1  0  1  2]\nCluster sizes: [152  10  10  23]\nSilhouette Score: -0.06551746038274969\n\neps=1.1\nmin_samples=11\nClusters present: [-1  0]\nCluster sizes: [172  23]\nSilhouette Score: -0.04289314504747451\n\neps=1.2\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24 25 26 27 28]\nCluster sizes: [22  5  5  9  5  4  8  5  5  5  5  4  4  4  5  4  4  5  5 10  5  5 10  5\n  5  4  4  4  4 26]\nSilhouette Score: 0.7050907365394723\n\neps=1.2\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]\nCluster sizes: [62  5  5  9  5  8  5  5  5  5  5  5  5 10  5  5 10  5  5 26]\nSilhouette Score: 0.39603488662909336\n\neps=1.2\nmin_samples=6\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [132   9   8  10  10  26]\nSilhouette Score: -0.04466434293265843\n\neps=1.2\nmin_samples=7\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [132   9   8  10  10  26]\nSilhouette Score: -0.04466434293265843\n\neps=1.2\nmin_samples=8\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [132   9   8  10  10  26]\nSilhouette Score: -0.04466434293265843\n\neps=1.2\nmin_samples=9\nClusters present: [-1  0  1  2  3]\nCluster sizes: [140   9  10  10  26]\nSilhouette Score: -0.08238113847227989\n\neps=1.2\nmin_samples=10\nClusters present: [-1  0  1  2]\nCluster sizes: [149  10  10  26]\nSilhouette Score: -0.048337364902971615\n\neps=1.2\nmin_samples=11\nClusters present: [-1  0]\nCluster sizes: [169  26]\nSilhouette Score: -0.019763743893895826\n\neps=1.3\nmin_samples=4\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n 23 24]\nCluster sizes: [22  5  5  9  5  4  8  5  5  5  5  4  4 19  5  4  4  5  5  5 10  9  5  4\n  4 30]\nSilhouette Score: 0.6158662947417409\n\neps=1.3\nmin_samples=5\nClusters present: [-1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]\nCluster sizes: [50  5  5  9  5  8  5  5  5  5 19  5  5  5  5 10  9  5 30]\nSilhouette Score: 0.4011855532915028\n\neps=1.3\nmin_samples=6\nClusters present: [-1  0  1  2  3  4  5]\nCluster sizes: [110   9   8  19  10   9  30]\nSilhouette Score: 0.025178122665266447\n\neps=1.3\nmin_samples=7\nClusters present: [-1  0  1  2  3  4  5]\nCluster sizes: [110   9   8  19  10   9  30]\nSilhouette Score: 0.025178122665266447\n\neps=1.3\nmin_samples=8\nClusters present: [-1  0  1  2  3  4  5]\nCluster sizes: [110   9   8  19  10   9  30]\nSilhouette Score: 0.025178122665266447\n\neps=1.3\nmin_samples=9\nClusters present: [-1  0  1  2  3  4]\nCluster sizes: [118   9  19  10   9  30]\nSilhouette Score: -0.010816906167269968\n\neps=1.3\nmin_samples=10\nClusters present: [-1  0  1  2]\nCluster sizes: [136  19  10  30]\nSilhouette Score: -0.025512142792620478\n\neps=1.3\nmin_samples=11\nClusters present: [-1  0  1]\nCluster sizes: [146  19  30]\nSilhouette Score: -0.07573111172922117\n\n\n\n# dbscan \n\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import silhouette_score\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Perform DBSCAN clustering with the optimal parameters\ndbscan_optimal = DBSCAN(eps=0.9, min_samples=4)\nlabels_optimal_dbscan = dbscan_optimal.fit_predict(scaled_data)\n\n# Visualize the clusters (for 2D data)\n\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels_optimal_dbscan, cmap='viridis')\nplt.title('DBSCAN Clustering (Optimal Parameters)')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.show()\n\n\n\n\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\n# Assuming scaled_data is your feature matrix\n# It's a good practice to standardize the data before applying DBSCAN\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(scaled_data)\n\n# Choose the parameters for DBSCAN before PCA\neps_before_pca = 0.9  # Adjust the epsilon parameter based on your requirement\nmin_samples_before_pca = 4  # Adjust the min_samples parameter based on your requirement\n\n# Apply DBSCAN clustering before PCA\ndbscan_before_pca = DBSCAN(eps=eps_before_pca, min_samples=min_samples_before_pca)\nlabels_before_pca = dbscan_before_pca.fit_predict(scaled_data)\n\n# Apply PCA and select the number of components\nn_components = 10  # Adjust the number of components based on your requirement\npca = PCA(n_components=n_components)\nX_pca = pca.fit_transform(scaled_data)\n\n# Choose the parameters for DBSCAN after PCA\neps_after_pca = 0.9  # Adjust the epsilon parameter based on your requirement\nmin_samples_after_pca = 4  # Adjust the min_samples parameter based on your requirement\n\n# Apply DBSCAN clustering to the PCA-transformed data\ndbscan_after_pca = DBSCAN(eps=eps_after_pca, min_samples=min_samples_after_pca)\nlabels_after_pca = dbscan_after_pca.fit_predict(X_pca)\n\n# Visualize clusters before DBSCAN\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels_before_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters Before DBSCAN')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\n\n# Visualize clusters after DBSCAN\nplt.subplot(1, 2, 2)\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=labels_after_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters After DBSCAN')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n# hierarchial clustering \n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\n# Assuming scaled_data is your feature matrix\n# It's a good practice to standardize the data before applying hierarchical clustering\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(scaled_data)\n\n# Choose the number of clusters before PCA\nn_clusters_before_pca = 3  # Adjust the number of clusters based on your requirement\n\n# Apply hierarchical clustering before PCA\nhierarchical_before_pca = AgglomerativeClustering(n_clusters=n_clusters_before_pca)\nlabels_before_pca = hierarchical_before_pca.fit_predict(scaled_data)\n\n# Apply PCA and select the number of components\nn_components = 2  # Adjust the number of components based on your requirement\npca = PCA(n_components=n_components)\nX_pca = pca.fit_transform(scaled_data)\n\n# Choose the number of clusters after PCA\nn_clusters_after_pca = 3  # Adjust the number of clusters based on your requirement\n\n# Apply hierarchical clustering to the PCA-transformed data\nhierarchical_after_pca = AgglomerativeClustering(n_clusters=n_clusters_after_pca)\nlabels_after_pca = hierarchical_after_pca.fit_predict(X_pca)\n\n# Visualize clusters before hierarchical clustering\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels_before_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters Before Hierarchical Clustering')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\n\n# Visualize clusters after hierarchical clustering\nplt.subplot(1, 2, 2)\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=labels_after_pca, cmap='viridis', edgecolor='k')\nplt.title('Clusters After Hierarchical Clustering')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nfrom scipy.cluster.hierarchy import linkage, dendrogram\nimport matplotlib.pyplot as plt\n\n# Assuming scaled_data is your feature matrix\n# It's a good practice to standardize the data before applying hierarchical clustering\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(scaled_data)\n\n# Create a dendrogram to visualize hierarchical clustering\ndendrogram(linkage(scaled_data, method='ward'))\nplt.title('Dendrogram')\nplt.xlabel('Data Points')\nplt.ylabel('Distance')\nplt.show()\n\n\n\n\n\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nimport matplotlib.pyplot as plt\n\n# Assuming you have your data in scaled_data (already standardized)\n# If not, replace scaled_data with your standardized data\n# scaled_data = ...\n\n# Apply PCA to the standardized data\npca = PCA(n_components=2)\npca_result = pca.fit_transform(scaled_data)\n\n# Create subplots for before and after PCA\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n# Dendrogram before PCA\ndendrogram(linkage(scaled_data, method='ward'), ax=axes[0])\naxes[0].set_title('Hierarchical Clustering Dendrogram (Before PCA)')\naxes[0].set_xlabel('Data Points')\naxes[0].set_ylabel('Distance')\n\n# Dendrogram after PCA\ndendrogram(linkage(pca_result, method='ward'), ax=axes[1])\naxes[1].set_title('Hierarchical Clustering Dendrogram (After PCA)')\naxes[1].set_xlabel('Data Points')\naxes[1].set_ylabel('Distance')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage, fcluster\nimport matplotlib.pyplot as plt\n\n# Assuming you have your data in scaled_data (already standardized)\n# If not, replace scaled_data with your standardized data\n# scaled_data = ...\n\n# Apply PCA to the standardized data\npca = PCA(n_components=2)\npca_result = pca.fit_transform(scaled_data)\n\n# Perform hierarchical clustering without PCA\nlinkage_matrix = linkage(scaled_data, method='ward')\nlabels_no_pca = fcluster(linkage_matrix, t=3, criterion='maxclust')\n\n# Perform hierarchical clustering with PCA\nlinkage_matrix_pca = linkage(pca_result, method='ward')\nlabels_pca = fcluster(linkage_matrix_pca, t=3, criterion='maxclust')\n\n# Plot dendrogram and scatter plots for both cases\nfig, axes = plt.subplots(2, 2, figsize=(15, 12))\n\n# Dendrogram without PCA\ndendrogram(linkage_matrix, leaf_rotation=90., leaf_font_size=8., color_threshold=None, above_threshold_color='y', ax=axes[0, 0])\naxes[0, 0].set_title('Hierarchical Clustering Dendrogram (Without PCA)')\naxes[0, 0].set_xlabel('Data Points')\naxes[0, 0].set_ylabel('Distance')\n\n# Scatter plot without PCA\naxes[0, 1].scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels_no_pca, cmap='viridis')\naxes[0, 1].set_title('Hierarchical Clustering - Scatter Plot (Without PCA)')\naxes[0, 1].set_xlabel('Feature 1')\naxes[0, 1].set_ylabel('Feature 2')\n\n# Dendrogram with PCA\ndendrogram(linkage_matrix_pca, leaf_rotation=90., leaf_font_size=8., color_threshold=None, above_threshold_color='y', ax=axes[1, 0])\naxes[1, 0].set_title('Hierarchical Clustering Dendrogram (With PCA)')\naxes[1, 0].set_xlabel('Data Points')\naxes[1, 0].set_ylabel('Distance')\n\n# Scatter plot with PCA\naxes[1, 1].scatter(pca_result[:, 0], pca_result[:, 1], c=labels_pca, cmap='viridis')\naxes[1, 1].set_title('Hierarchical Clustering - Scatter Plot (With PCA)')\naxes[1, 1].set_xlabel('Principal Component 1')\naxes[1, 1].set_ylabel('Principal Component 2')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "codes/fredapi.html",
    "href": "codes/fredapi.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "from fredapi import Fred\nimport pandas as pd\n\nfred = Fred(api_key='10fbe66f8f62ad7f44097cca867bf01f')\n\n\nseries_id_1 = 'GDP' # for GDP US\nseries_id_2='GDPC1' # for Real Gross GDP\nseries_id_3='W207RC1Q156SBEA' # Adjusted Saving (% of GNI)\nseries_id_4='USAB6BLTT02STSAQ' # Current account balance (% of GDP)\nseries_id_5='A019RE1Q156NBEA' # Export of Goods and Services as percentage of GDP\nseries_id_6='MKTGNIUSA646NWDB' # GNI\n\n\n# Set the start and end dates where I need data from 1990 to 2023\nstart_date = '1973'\nend_date = '2023'\n\n\n# Fetch the data\ngdp_u = fred.get_series(series_id_1, start_date, end_date)\nrealgdp_u = fred.get_series(series_id_2, start_date, end_date)\nadjsavings_u = fred.get_series(series_id_3, start_date, end_date)\ncurrentaccbalance_u = fred.get_series(series_id_4, start_date, end_date)\nexportsofgoods_u = fred.get_series(series_id_5, start_date, end_date)\ngni_u= fred.get_series(series_id_6, start_date, end_date)\n\n\n# for GDP\ndf1= gdp_u.to_frame(name=('GDP'))\nannual_gdp_u = df1.resample('A').mean()\nannual_gdp_u['Year'] = annual_gdp_u.index.year\nannual_gdp_u=annual_gdp_u[['Year', 'GDP']]\nannual_gdp_u.reset_index(drop=True, inplace=True)\nprint(annual_gdp_u.head(5))\n\n   Year        GDP\n0  1973  1425.3760\n1  1974  1545.2425\n2  1975  1684.9050\n3  1976  1873.4125\n4  1977  2081.8250\n\n\n\nadjsavings_u\n\n1973-01-01    10.5\n1973-04-01    10.6\n1973-07-01    10.9\n1973-10-01    11.7\n1974-01-01    10.7\n              ... \n2022-01-01     1.9\n2022-04-01     1.8\n2022-07-01     1.7\n2022-10-01     0.7\n2023-01-01    -0.2\nLength: 201, dtype: float64\n\n\n\n# Real GDP\ndf2= realgdp_u.to_frame(name=('Real GDP'))\nannual_realgdp_u = df2.resample('A').mean()\nannual_realgdp_u['Year'] = annual_realgdp_u.index.year\nannual_realgdp_u.reset_index(drop=True, inplace=True)\nannual_realgdp_u.head(16)\n\n\n\n\n\n\n\n\nReal GDP\nYear\n\n\n\n\n0\n6106.37050\n1973\n\n\n1\n6073.36275\n1974\n\n\n2\n6060.87525\n1975\n\n\n3\n6387.43650\n1976\n\n\n4\n6682.80450\n1977\n\n\n5\n7052.71125\n1978\n\n\n6\n7275.99925\n1979\n\n\n7\n7257.31650\n1980\n\n\n8\n7441.48500\n1981\n\n\n9\n7307.31400\n1982\n\n\n10\n7642.26550\n1983\n\n\n11\n8195.29525\n1984\n\n\n12\n8537.00375\n1985\n\n\n13\n8832.61125\n1986\n\n\n14\n9137.74475\n1987\n\n\n15\n9519.42675\n1988\n\n\n\n\n\n\n\n\n# Adjusted Savings\ndf3= adjsavings_u.to_frame(name=('Adjusted Savings'))\nannual_adjsavings_u = df3.resample('A').mean()\nannual_adjsavings_u['Year'] = annual_adjsavings_u.index.year\nannual_adjsavings_u.reset_index(drop=True, inplace=True)\nannual_adjsavings_u.head(2)\n\n\n\n\n\n\n\n\nAdjusted Savings\nYear\n\n\n\n\n0\n10.925\n1973\n\n\n1\n9.200\n1974\n\n\n\n\n\n\n\n\n# Current Account Balance % of GDP\ndf4= currentaccbalance_u.to_frame(name=('Current Account Balance'))\nannual_currentaccbalance_u = df4.resample('A').mean()\nannual_currentaccbalance_u['Year'] = annual_currentaccbalance_u.index.year\nannual_currentaccbalance_u.reset_index(drop=True, inplace=True)\nannual_currentaccbalance_u.head(2)\n\n\n\n\n\n\n\n\nCurrent Account Balance\nYear\n\n\n\n\n0\n0.492313\n1973\n\n\n1\n0.129574\n1974\n\n\n\n\n\n\n\n\n# Current Account Balance % of GDP\ndf5= exportsofgoods_u.to_frame(name=('Exports of Goods and Services'))\nannual_exportsofgoods_u = df5.resample('A').mean()\nannual_exportsofgoods_u['Year'] = annual_exportsofgoods_u.index.year\nannual_exportsofgoods_u.reset_index(drop=True, inplace=True)\nannual_exportsofgoods_u.head(2)\n\n\n\n\n\n\n\n\nExports of Goods and Services\nYear\n\n\n\n\n0\n0.275\n1973\n\n\n1\n-0.050\n1974\n\n\n\n\n\n\n\n\n# GNI\ndf6= gni_u.to_frame(name=('GNI'))\nannual_gni_u = df6.resample('A').mean()\nannual_gni_u['Year'] = annual_gni_u.index.year\nannual_gni_u.reset_index(drop=True, inplace=True)\nannual_gni_u.head(10)\n\n\n\n\n\n\n\n\nGNI\nYear\n\n\n\n\n0\n1.431848e+12\n1973\n\n\n1\n1.553300e+12\n1974\n\n\n2\n1.684554e+12\n1975\n\n\n3\n1.869603e+12\n1976\n\n\n4\n2.082670e+12\n1977\n\n\n5\n2.349856e+12\n1978\n\n\n6\n2.614202e+12\n1979\n\n\n7\n2.847055e+12\n1980\n\n\n8\n3.201886e+12\n1981\n\n\n9\n3.371448e+12\n1982\n\n\n\n\n\n\n\n\nmerged_df= pd.merge(annual_gdp_u, annual_realgdp_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_adjsavings_u, how= 'outer', on= 'Year')\nmerged_df= pd.merge(merged_df, annual_currentaccbalance_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_exportsofgoods_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_gni_u, how= 'outer', on= 'Year' )\n\nmerged_df.isna().sum()\n\nYear                             0\nGDP                              0\nReal GDP                         0\nAdjusted Savings                 0\nCurrent Account Balance          0\nExports of Goods and Services    0\nGNI                              1\ndtype: int64\n\n\n\nmerged_df['GNI'] = merged_df['GNI'].fillna(merged_df['GNI'].mean())\nmerged_df.isna().sum()\n\nYear                             0\nGDP                              0\nReal GDP                         0\nAdjusted Savings                 0\nCurrent Account Balance          0\nExports of Goods and Services    0\nGNI                              0\ndtype: int64\n\n\n\nmerged_df.head(10)\n\n\n\n\n\n\n\n\nYear\nGDP\nReal GDP\nAdjusted Savings\nCurrent Account Balance\nExports of Goods and Services\nGNI\n\n\n\n\n0\n1970-01-01 00:00:00.000001973\n1425.37600\n6106.37050\n10.925\n0.492313\n0.275\n1.431848e+12\n\n\n1\n1970-01-01 00:00:00.000001974\n1545.24250\n6073.36275\n9.200\n0.129574\n-0.050\n1.553300e+12\n\n\n2\n1970-01-01 00:00:00.000001975\n1684.90500\n6060.87525\n6.500\n1.075657\n0.950\n1.684554e+12\n\n\n3\n1970-01-01 00:00:00.000001976\n1873.41250\n6387.43650\n7.450\n0.233895\n-0.050\n1.869603e+12\n\n\n4\n1970-01-01 00:00:00.000001977\n2081.82500\n6682.80450\n8.125\n-0.683540\n-1.125\n2.082670e+12\n\n\n5\n1970-01-01 00:00:00.000001978\n2351.59875\n7052.71125\n9.375\n-0.661201\n-1.125\n2.349856e+12\n\n\n6\n1970-01-01 00:00:00.000001979\n2627.32625\n7275.99925\n9.200\n-0.012445\n-0.875\n2.614202e+12\n\n\n7\n1970-01-01 00:00:00.000001980\n2857.30850\n7257.31650\n7.050\n0.073883\n-0.450\n2.847055e+12\n\n\n8\n1970-01-01 00:00:00.000001981\n3207.04125\n7441.48500\n8.000\n0.156610\n-0.375\n3.201886e+12\n\n\n9\n1970-01-01 00:00:00.000001982\n3343.78925\n7307.31400\n5.625\n-0.161860\n-0.600\n3.371448e+12\n\n\n\n\n\n\n\n\nmerged_df.describe()\n\n\n\n\n\n\n\n\nYear\nGDP\nReal GDP\nAdjusted Savings\nCurrent Account Balance\nExports of Goods and Services\nGNI\n\n\n\n\ncount\n51.000000\n51.000000\n51.000000\n51.000000\n51.000000\n51.000000\n5.100000e+01\n\n\nmean\n1998.000000\n10487.486853\n13148.741608\n4.161765\n-2.213121\n-2.372549\n1.023250e+13\n\n\nstd\n14.866069\n7054.335235\n4980.312765\n2.823656\n1.676165\n1.603280\n6.750381e+12\n\n\nmin\n1973.000000\n1425.376000\n6060.875250\n-2.575000\n-5.912146\n-5.700000\n1.431848e+12\n\n\n25%\n1985.500000\n4459.306500\n8684.807500\n2.487500\n-3.205764\n-3.450000\n4.413304e+12\n\n\n50%\n1998.000000\n9062.816750\n12924.875750\n3.675000\n-2.126816\n-2.700000\n9.135464e+12\n\n\n75%\n2010.500000\n15324.351250\n16921.080500\n6.112500\n-1.140441\n-1.150000\n1.494509e+13\n\n\nmax\n2023.000000\n26813.601000\n22112.329000\n10.925000\n1.075657\n0.950000\n2.583890e+13\n\n\n\n\n\n\n\n\nmerged_df.info()\nmerged_df['Year']=pd.to_datetime(merged_df['Year'])\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 51 entries, 0 to 50\nData columns (total 7 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Year                           51 non-null     int64  \n 1   GDP                            51 non-null     float64\n 2   Real GDP                       51 non-null     float64\n 3   Adjusted Savings               51 non-null     float64\n 4   Current Account Balance        51 non-null     float64\n 5   Exports of Goods and Services  51 non-null     float64\n 6   GNI                            51 non-null     float64\ndtypes: float64(6), int64(1)\nmemory usage: 3.2 KB"
  },
  {
    "objectID": "codes/decisiontree_c.html",
    "href": "codes/decisiontree_c.html",
    "title": "Decision Trees- Classification",
    "section": "",
    "text": "A supervised learning classifier is a machine learning model that has been trained on labelled data and has learned to associate input features with corresponding output labels. It extrapolates from the training set to predict labels for fresh, previously unknown data. During training, the classifier learns patterns and optimises parameters to minimise prediction errors. It is used for classification and regression tasks, such as classifying data into predetermined groups or predicting continuous values. Decision trees, support vector machines, and neural networks are examples of common classifiers. By exploiting learnt patterns from labelled samples, they enable automated decision-making and insight extraction in a variety of fields such as spam detection, picture recognition, and predictive analytics. For this project, decision tree and random forest classifiers are explored.\nFor my economic data essentially, since it is not categorical in nature, trying to find a categorical realm within the dataset was difficult, hence it was soley categorised on basis of performance keeping in mind the GDP growth rate. Hence, the Y variables are categorical in nature and the X taken is numerical in nature. An attempt here is made to understand the predictive capabilities of the Decision Tree and Random Forest Classifiers."
  },
  {
    "objectID": "codes/decisiontree_c.html#baseline-decision-tree-classifier",
    "href": "codes/decisiontree_c.html#baseline-decision-tree-classifier",
    "title": "Decision Trees- Classification",
    "section": "Baseline Decision Tree Classifier",
    "text": "Baseline Decision Tree Classifier\nHaving a classifier with default parameters is important to analyse the predictive capabilities of the model. It helps us understand how the original tree would look like.\n\n\nCode\n# splitting into training, testing and validation\nX_train, X_temp, y_train, y_temp = train_test_split(X, Y, test_size=0.4, random_state=42)\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\n# baseline decisoon tree classifier\nbaseline_decision_tree = DecisionTreeClassifier(random_state=42)\n\n# Train the base model on the training set\nbaseline_decision_tree.fit(X_train, y_train)\n\n# predictions on training test\nbaseline_train_pred = baseline_decision_tree.predict(X_train)\n\n# predictions on test set\nbaseline_test_pred = baseline_decision_tree.predict(X_test)\n\n# predictions on validation set\nbaseline_validation_pred = baseline_decision_tree.predict(X_val)\n\n\n\n\nCode\n# accuracy for training \nbaseline_training_acc = accuracy_score(y_train, baseline_train_pred)\nprint(\"Base Decision Tree Accuracy on Training Set:\", baseline_training_acc)\n\n# accuracy for testing \nbaseline_testing_acc = accuracy_score(y_test, baseline_test_pred)\nprint(\"Base Decision Tree Accuracy on Testing Set:\", baseline_testing_acc)\n\n# accuracy for validation \nbaseline_validation_acc = accuracy_score(y_val, baseline_validation_pred)\nprint(\"Base Decision Tree Accuracy on Validation Set:\", baseline_validation_acc)\n\n\nBase Decision Tree Accuracy on Training Set: 0.6410256410256411\nBase Decision Tree Accuracy on Testing Set: 0.2564102564102564\nBase Decision Tree Accuracy on Validation Set: 0.3333333333333333\n\n\nAccuracy on the Validation Set: The accuracy is the ratio of correctly predicted instances to the total number of instances. In this case, the base decision tree model achieved an accuracy of 0.33, which means that it correctly predicted the class labels for approximately 33% of the instances in the validation set.\nPrecision: Precision is the ratio of correctly predicted positive observations to the total predicted positives. Precision is relevant when the cost of false positives is high. For each class, precision is calculated. For example, for the “Low Growth” class, the precision is 0.45, indicating that 45% of instances predicted as “Low Growth” were indeed “Low Growth.”\nRecall (Sensitivity): Recall is the ratio of correctly predicted positive observations to the all observations in actual class. It is also called True Positive Rate or Sensitivity. For example, for the “Low Growth” class, the recall is 0.56, indicating that the model correctly identified 56% of the actual instances of “Low Growth.”\nF1-Score: The F1-score is the weighted average of precision and recall. It is a metric that considers both false positives and false negatives. It is a good way to show that a classifer has a good value for both precision and recall. It ranges from 0 to 1, where a higher value indicates better performance.\nIn summary, the base decision tree model, as evaluated on the validation set, has limitations in accurately predicting the different classes. The low precision and recall values indicate that there is room for improvement, and hyperparameter tuning or other model adjustments may be necessary to enhance its performance.\n\n\nCode\n# classification report on training\nprint(\"Classification Report for Basal Decision Tree on Training Set:\")\nprint(classification_report(y_train, baseline_train_pred))\n\n# classification report on testing\nprint(\"Classification Report for Basal Decision Tree on Testing Set:\")\nprint(classification_report(y_test, baseline_test_pred))\n\n# classification report on validation\nprint(\"Classification Report for Basal Decision Tree on Validation Set:\")\nprint(classification_report(y_val, baseline_validation_pred))\n\n\nClassification Report for Basal Decision Tree on Training Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.36      0.56      0.43         9\n      Low Growth       0.61      0.84      0.70        51\n Moderate Growth       0.83      0.51      0.63        49\nVery High Growth       1.00      0.25      0.40         8\n\n        accuracy                           0.64       117\n       macro avg       0.70      0.54      0.54       117\n    weighted avg       0.71      0.64      0.63       117\n\nClassification Report for Basal Decision Tree on Testing Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         4\n      Low Growth       0.33      0.32      0.32        19\n Moderate Growth       0.33      0.33      0.33        12\nVery High Growth       0.00      0.00      0.00         4\n\n        accuracy                           0.26        39\n       macro avg       0.17      0.16      0.16        39\n    weighted avg       0.26      0.26      0.26        39\n\nClassification Report for Basal Decision Tree on Validation Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         4\n      Low Growth       0.45      0.56      0.50        18\n Moderate Growth       0.21      0.27      0.24        11\nVery High Growth       0.00      0.00      0.00         6\n\n        accuracy                           0.33        39\n       macro avg       0.17      0.21      0.18        39\n    weighted avg       0.27      0.33      0.30        39\n\n\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n\n\n\n\nCode\n# defined function for confusion matrix\ndef plot_confusion_matrix(y_true, y_pred, classes, title):\n    cm = confusion_matrix(y_true, y_pred, labels=classes)\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n    disp.plot(cmap=\"Blues\")\n    plt.title(title)\n    plt.xticks(rotation=45)  # Rotate x-axis labels for better visibility\n    plt.show()\n    \nplot_confusion_matrix(y_train, baseline_train_pred, classes=np.unique(Y), title=\"Confusion Matrix - Baseline - Training Set\")\nplot_confusion_matrix(y_test, baseline_test_pred, classes=np.unique(Y), title=\"Confusion Matrix - Baseline - Test Set\")\nplot_confusion_matrix(y_val, baseline_validation_pred, classes=np.unique(Y), title=\"Confusion Matrix - Baseline - Validation Set\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplt.figure(figsize=(12, 8))\nplot_tree(baseline_decision_tree, filled=True, feature_names=[str(i) for i in range(X.shape[1])], class_names=np.unique(Y).astype(str), rounded=True)\nplt.title(\"Base Decision Tree Visualization\")\nplt.show()"
  },
  {
    "objectID": "codes/decisiontree_c.html#random-forest-classifer---baseline-model",
    "href": "codes/decisiontree_c.html#random-forest-classifer---baseline-model",
    "title": "Decision Trees- Classification",
    "section": "Random Forest Classifer - Baseline Model",
    "text": "Random Forest Classifer - Baseline Model\n\n\nCode\n# Create a baseline Random Forest classifier\nbaseline_rf_model = RandomForestClassifier(random_state=42)\n\n# Fit the model on the training data\nbaseline_rf_model.fit(X_train, y_train)\n\n\nRandomForestClassifier(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier(random_state=42)\n\n\n\n\nCode\n# Make predictions on the training, test, and validation data\ntrain_predictions = baseline_rf_model.predict(X_train)\ntest_predictions = baseline_rf_model.predict(X_test)\nval_predictions = baseline_rf_model.predict(X_val)\n\n\n\n\nCode\n# Calculate accuracy for the training set\naccuracy_train = accuracy_score(y_train, train_predictions)\n\n# Calculate accuracy for the test set\naccuracy_test = accuracy_score(y_test, test_predictions)\n\n# Calculate accuracy for the validation set\naccuracy_val = accuracy_score(y_val, val_predictions)\n\n# Print the accuracy for each set\nprint(f\"Training Set Accuracy: {accuracy_train:.2f}\")\nprint(f\"Test Set Accuracy: {accuracy_test:.2f}\")\nprint(f\"Validation Set Accuracy: {accuracy_val:.2f}\")\n\n\nTraining Set Accuracy: 0.64\nTest Set Accuracy: 0.36\nValidation Set Accuracy: 0.36\n\n\n\n\nCode\n# Print classification report for the model on the training set\nprint(\"Classification Report for Random Forest on Training Set:\")\nprint(classification_report(y_train, train_predictions))\n\n# Print classification report for the model on the test set\nprint(\"Classification Report for Random Forest on Test Set:\")\nprint(classification_report(y_test, test_predictions))\n\n# Print classification report for the model on the validation set\nprint(\"Classification Report for Random Forest on Validation Set:\")\nprint(classification_report(y_val, val_predictions))\n\n\nClassification Report for Random Forest on Training Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         9\n      Low Growth       0.63      0.65      0.64        51\n Moderate Growth       0.64      0.80      0.71        49\nVery High Growth       0.75      0.38      0.50         8\n\n        accuracy                           0.64       117\n       macro avg       0.51      0.45      0.46       117\n    weighted avg       0.60      0.64      0.61       117\n\nClassification Report for Random Forest on Test Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         4\n      Low Growth       0.47      0.37      0.41        19\n Moderate Growth       0.35      0.58      0.44        12\nVery High Growth       0.00      0.00      0.00         4\n\n        accuracy                           0.36        39\n       macro avg       0.20      0.24      0.21        39\n    weighted avg       0.34      0.36      0.34        39\n\nClassification Report for Random Forest on Validation Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         4\n      Low Growth       0.62      0.44      0.52        18\n Moderate Growth       0.26      0.55      0.35        11\nVery High Growth       0.00      0.00      0.00         6\n\n        accuracy                           0.36        39\n       macro avg       0.22      0.25      0.22        39\n    weighted avg       0.36      0.36      0.34        39\n\n\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n\n\n\n\nCode\nplot_confusion_matrix(y_train, train_predictions, classes=np.unique(Y), title=\"Confusion Matrix - RandomisedSearchCV - Training Set\")\nplot_confusion_matrix(y_test, test_predictions, classes=np.unique(Y), title=\"Confusion Matrix - RandomisedSearchCV - Test Set\")\nplot_confusion_matrix(y_val, val_predictions, classes=np.unique(Y), title=\"Confusion Matrix - RandomisedSearchCV -Validation Set\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplt.figure(figsize=(20, 10))\nplot_tree(baseline_rf_model.estimators_[0], filled=True, feature_names=X.columns, class_names=np.unique(Y), rounded=True)\nplt.title(\"Decision Tree within Random Forest\")\nplt.show()"
  },
  {
    "objectID": "codes/decisiontree_c.html#random-forest-classifer---gridsearchcv",
    "href": "codes/decisiontree_c.html#random-forest-classifer---gridsearchcv",
    "title": "Decision Trees- Classification",
    "section": "Random Forest Classifer - GridSearchCV",
    "text": "Random Forest Classifer - GridSearchCV\n\n\nCode\nparam_grid = {\n    'n_estimators': [50, 100, 150],\n    'max_depth': [5, 10, 20],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\n\n\n\n\nCode\ngrid_search = GridSearchCV(baseline_rf_model, param_grid, cv=5, scoring='accuracy')\ngrid_search.fit(X_train, y_train)\n\n\nGridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n             param_grid={'max_depth': [5, 10, 20],\n                         'min_samples_leaf': [1, 2, 4],\n                         'min_samples_split': [2, 5, 10],\n                         'n_estimators': [50, 100, 150]},\n             scoring='accuracy')In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GridSearchCVGridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n             param_grid={'max_depth': [5, 10, 20],\n                         'min_samples_leaf': [1, 2, 4],\n                         'min_samples_split': [2, 5, 10],\n                         'n_estimators': [50, 100, 150]},\n             scoring='accuracy')estimator: RandomForestClassifierRandomForestClassifier(random_state=42)RandomForestClassifierRandomForestClassifier(random_state=42)\n\n\n\n\nCode\nbest_rf_model = grid_search.best_estimator_\nbest_rf_model\n\n\nRandomForestClassifier(max_depth=5, min_samples_leaf=2, min_samples_split=10,\n                       n_estimators=50, random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier(max_depth=5, min_samples_leaf=2, min_samples_split=10,\n                       n_estimators=50, random_state=42)\n\n\n\n\nCode\nrf_model= RandomForestClassifier(max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=50, random_state=42)\n\n\n\n\nCode\ntrain_predictions1 = best_rf_model.predict(X_train)\ntest_predictions1 = best_rf_model.predict(X_test)\nval_predictions1 = best_rf_model.predict(X_val)\n\n\n\n\nCode\n# Calculate accuracy for training, test, and validation sets\ntrain_accuracy1 = accuracy_score(y_train, train_predictions)\ntest_accuracy1 = accuracy_score(y_test, test_predictions)\nval_accuracy1 = accuracy_score(y_val, val_predictions)\n\n# Display accuracy for training, test, and validation sets\nprint(f\"\\nAccuracy - Training Set: {train_accuracy1:.4f}\")\nprint(f\"Accuracy - Test Set: {test_accuracy1:.4f}\")\nprint(f\"Accuracy - Validation Set: {val_accuracy1:.4f}\")\n\n\n\nAccuracy - Training Set: 0.6410\nAccuracy - Test Set: 0.3590\nAccuracy - Validation Set: 0.3590\n\n\n\n\nCode\n# Print classification report for the model on the training set\nprint(\"Classification Report for Random Forest on Training Set:\")\nprint(classification_report(y_train, train_predictions1))\n\n# Print classification report for the model on the test set\nprint(\"Classification Report for Random Forest on Test Set:\")\nprint(classification_report(y_test, test_predictions1))\n\n# Print classification report for the model on the validation set\nprint(\"Classification Report for Random Forest on Validation Set:\")\nprint(classification_report(y_val, val_predictions1))\n\n\nClassification Report for Random Forest on Training Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         9\n      Low Growth       0.63      0.57      0.60        51\n Moderate Growth       0.61      0.88      0.72        49\nVery High Growth       0.00      0.00      0.00         8\n\n        accuracy                           0.62       117\n       macro avg       0.31      0.36      0.33       117\n    weighted avg       0.53      0.62      0.56       117\n\nClassification Report for Random Forest on Test Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         4\n      Low Growth       0.43      0.32      0.36        19\n Moderate Growth       0.32      0.67      0.43        12\nVery High Growth       0.00      0.00      0.00         4\n\n        accuracy                           0.36        39\n       macro avg       0.19      0.25      0.20        39\n    weighted avg       0.31      0.36      0.31        39\n\nClassification Report for Random Forest on Validation Set:\n                  precision    recall  f1-score   support\n\n     High Growth       0.00      0.00      0.00         4\n      Low Growth       0.62      0.44      0.52        18\n Moderate Growth       0.27      0.64      0.38        11\nVery High Growth       0.00      0.00      0.00         6\n\n        accuracy                           0.38        39\n       macro avg       0.22      0.27      0.22        39\n    weighted avg       0.36      0.38      0.34        39\n\n\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n\n\n\n\nCode\nplot_confusion_matrix(y_train, train_predictions1, classes=np.unique(Y), title=\"Confusion Matrix - RandomisedSearchCV - Training Set\")\nplot_confusion_matrix(y_test, test_predictions1, classes=np.unique(Y), title=\"Confusion Matrix - RandomisedSearchCV - Test Set\")\nplot_confusion_matrix(y_val, val_predictions1, classes=np.unique(Y), title=\"Confusion Matrix - RandomisedSearchCV -Validation Set\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplt.figure(figsize=(20, 10))\nplot_tree(best_rf_model.estimators_[0], filled=True, feature_names=X.columns, class_names=np.unique(Y), rounded=True)\nplt.title(\"Decision Tree within Random Forest\")\nplt.show()"
  },
  {
    "objectID": "codes/decisiontree_c.html#results-and-discussion",
    "href": "codes/decisiontree_c.html#results-and-discussion",
    "title": "Decision Trees- Classification",
    "section": "Results and Discussion",
    "text": "Results and Discussion"
  },
  {
    "objectID": "info/data.html",
    "href": "info/data.html",
    "title": "Data",
    "section": "",
    "text": "Build out your website tab for “clustering”. hi"
  },
  {
    "objectID": "info/introduction.html",
    "href": "info/introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "As an economics student, international economics and geopolitics has been an area of interest to me. The book by “Silk Roads” by Franklin Frankopan is one of the most interesting books I’ve read. Researchers K. Laug and S. Rance argued that the introduction of the Silk Road drove countries to seek similar interests as a result of European countries’ lack of collaboration. Fascism’s growth mirrored a shift in the economic balance of power. Frankopan correctly identifies the limitations of liberal democracy in the changing economic and political structures of Western countries. (cite: https://reinventionjournal.org/index.php/reinvention/article/view/617/481)\nThis led me to explore and think about the complex dynamics of gepolitics and the powerplay of the hegemonic nations. The hegemonic nations are defined as those with the strongest military, greatest superpower and is a developed economy. Yet, the emerging nations have always been a threat to the global superpowers, due to their rapidly increasing growth, increase in exports and an increased in the overall quality of life. For instance, India was not like how it was 15 years ago. Frankopan’s proclamation is a perceptive and comprehensive examination of global power dynamics and economics that is conspicuously absent from mainstream Western discourses and media landscapes.\nThe term BRICS was first coined by a Goldman Chief Economist named Jim O’Neill in a research paper that underlined the growth potential of Brazil, Russia, India and China. (cite: https://www.reuters.com/world/what-is-brics-who-are-its-members-2023-08-21/). The bloc was founded as an informal club in 2009 to challenge the hegemonic domination of the US and it’s western allies. The leaders of the governments and states of the member countries meet once a year, with each country having a one-year alternating presidency of the group.\nThis got me interested to understand the cross-country comparison of BRICS in terms it’s fiscal and macroeconomic policies.\n{mention the reserach}"
  },
  {
    "objectID": "info/introduction.html#problem-statement",
    "href": "info/introduction.html#problem-statement",
    "title": "Introduction",
    "section": "",
    "text": "As an economics student, international economics and geopolitics has been an area of interest to me. The book by “Silk Roads” by Franklin Frankopan is one of the most interesting books I’ve read. Researchers K. Laug and S. Rance argued that the introduction of the Silk Road drove countries to seek similar interests as a result of European countries’ lack of collaboration. Fascism’s growth mirrored a shift in the economic balance of power. Frankopan correctly identifies the limitations of liberal democracy in the changing economic and political structures of Western countries. (cite: https://reinventionjournal.org/index.php/reinvention/article/view/617/481)\nThis led me to explore and think about the complex dynamics of gepolitics and the powerplay of the hegemonic nations. The hegemonic nations are defined as those with the strongest military, greatest superpower and is a developed economy. Yet, the emerging nations have always been a threat to the global superpowers, due to their rapidly increasing growth, increase in exports and an increased in the overall quality of life. For instance, India was not like how it was 15 years ago. Frankopan’s proclamation is a perceptive and comprehensive examination of global power dynamics and economics that is conspicuously absent from mainstream Western discourses and media landscapes.\nThe term BRICS was first coined by a Goldman Chief Economist named Jim O’Neill in a research paper that underlined the growth potential of Brazil, Russia, India and China. (cite: https://www.reuters.com/world/what-is-brics-who-are-its-members-2023-08-21/). The bloc was founded as an informal club in 2009 to challenge the hegemonic domination of the US and it’s western allies. The leaders of the governments and states of the member countries meet once a year, with each country having a one-year alternating presidency of the group.\nThis got me interested to understand the cross-country comparison of BRICS in terms it’s fiscal and macroeconomic policies.\n{mention the reserach}"
  },
  {
    "objectID": "info/introduction.html#research-questions",
    "href": "info/introduction.html#research-questions",
    "title": "Introduction",
    "section": "Research Questions",
    "text": "Research Questions\n\nHow has the GDP growth rate varied among the BRICS countries over the past decade, and what are the key drivers of this growth?\nWhat is the inflation rate in each BRICS country, and how have their central banks managed monetary policy to control inflation?\nHow do interest rates differ among BRICS nations, and how do these rates affect investment and economic growth?\nWhat are the levels of public debt in the BRICS countries, and how do these debts impact fiscal policies and economic stability?\nHow have exchange rates fluctuated in the BRICS nations, and what is the role of currency exchange in international trade and finance?\nAre there significant disparities in unemployment rates among the BRICS countries, and what policies have been implemented to address unemployment?\nWhat is the balance of trade in each BRICS nation, and how do these trade balances impact foreign exchange reserves and economic stability?\nHow have foreign direct investments (FDI) evolved in the BRICS nations, and what is their role in economic development?\nWhat are the major industry sectors contributing to GDP in each BRICS country, and how have these sectors evolved over time?\nHow do the BRICS countries compare in terms of income distribution and poverty reduction efforts?\nWhat are the trends in foreign exchange reserves in BRICS countries, and how do these reserves impact their exchange rate stability and financial security?\nHow do government policies and regulations in each BRICS nation impact foreign direct investment (FDI) inflows and outflows?\nCan we identify any commonalities or differences in fiscal policy approaches among the BRICS countries, and how have these policies evolved over time?\nHow do energy prices and consumption patterns in the BRICS nations affect their economic performance and energy security?\nWhat is the level of economic inequality within each BRICS country, and what strategies have been employed to address income inequality?\nHow have trade agreements and trade diversification efforts impacted the balance of trade in the BRICS countries?\nWhat role do international financial institutions (e.g., IMF, World Bank) play in the economic policies and stability of the BRICS nations?\nAre there regional economic disparities within each BRICS country, and how are governments addressing these disparities?\nWhat impact have recent global economic events (e.g., financial crises, pandemics) had on the macroeconomic variables of the BRICS nations?\nHow do each of the BRICS countries manage their foreign debt, and what strategies do they employ to ensure debt sustainability?"
  },
  {
    "objectID": "info/regression.html",
    "href": "info/regression.html",
    "title": "Regression",
    "section": "",
    "text": "Build out your website tab for “clustering”"
  },
  {
    "objectID": "info/conclusion.html",
    "href": "info/conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "Build out your website tab for “clustering”"
  },
  {
    "objectID": "info/decision_trees.html",
    "href": "info/decision_trees.html",
    "title": "Your Document Title",
    "section": "",
    "text": "Welcome to Your Document\n\n\nYour browser does not support the video tag."
  },
  {
    "objectID": "info/data_gathering.html",
    "href": "info/data_gathering.html",
    "title": "Data Gathering",
    "section": "",
    "text": "Since the entire nature of the data is focused on purely data that is quantitative in nature as we are attempting to understand the macro-economic nature of the BRICS, we need data that is retreived from a data bank consisting of a lot of columns. For this topic, the most reliable websites for data collection were either to physically search for the data or through the usage of APIs (Application Programming Interface)."
  },
  {
    "objectID": "info/data_gathering.html#data-source",
    "href": "info/data_gathering.html#data-source",
    "title": "Data Gathering",
    "section": "Data Source",
    "text": "Data Source\nFor this project, the data is that is majorly required is numerical data. I am retrieving data through API’s and by downloading data from World Bank.\n\nQuantitative Data\nThe data required for this project is a culmunation of macroeconomic and fiscal indicators of all the five emerging economics for which individual data has to be retrived using various sources.\n\nPython API\nThe Python API used for this project is the FRED API. The FRED-API is a web service that allows developers to create programmes and construct apps that retrieve statistical information about the economy from the FRED and ALFRED websites hosted by the Federal Reserve Bank of St. Louis’ Economic Research Division using Python.\nSince we are using data of the 5 countries, it can be interesting to compare it with a hegemonic and the most powerful country in the world, The United States of America so using the FRED-API, you can clone few macroeconomic indicators from here.\nThe FRED API has been called and the series IDs have been added to the data.\n\n\n#pip install fredapi\nfrom fredapi import Fred\nimport pandas as pd\nfred = Fred(api_key='10fbe66f8f62ad7f44097cca867bf01f')\n\n\n\nseries_id_1 = 'GDP' # for GDP US\nseries_id_2='GDPC1' # for Real Gross GDP\nseries_id_3='W207RC1Q156SBEA' # Adjusted Saving (% of GNI)\nseries_id_4='USAB6BLTT02STSAQ' # Current account balance (% of GDP)\nseries_id_5='A019RE1Q156NBEA' # Export of Goods and Services as percentage of GDP\nseries_id_6='MKTGNIUSA646NWDB' # GNI\nstart_date = '1973'\nend_date = '2023'\n\nThe data has been fetched using the ‘fred.get_series’ function.\n\n\n# Fetch the data\ngdp_u = fred.get_series(series_id_1, start_date, end_date)\nrealgdp_u = fred.get_series(series_id_2, start_date, end_date)\nadjsavings_u = fred.get_series(series_id_3, start_date, end_date)\ncurrentaccbalance_u = fred.get_series(series_id_4, start_date, end_date)\nexportsofgoods_u = fred.get_series(series_id_5, start_date, end_date)\ngni_u= fred.get_series(series_id_6, start_date, end_date)\n\n\nThe image shown above, that was how the individual data had been called.\n\nAfter regrouping the data, this is how the final data of each dataframe looks like.\n\nThis is the final view after merging the entire dataset.\nTo access the code: Click here To access the files: Click here\n\n\nR API\nFor R API, to retrieve more data about the US, R API, wbstats() API has been used.\nAfter the ‘wbstats’ library has been called, the series IDs are inserted and then the final data is merged. The data is being collected from 1974 to 2023\n\n#install.packages(\"wbstats\")\nlibrary(wbstats)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\n# Specify the indicators you want to fetch\nindicator_a= (\"BN.KLT.DINV.CD\") #FDI Current Expenditure for the United States\nindicator_b= (\"NY.GDP.PCAP.KD.ZG\") # GDP per capita growth for the United States\nindicator_c= (\"NE.CON.GOVT.ZS\") # Government Final Consumption Expenditure for the United States\nindicator_d= (\"NE.EXP.GNFS.ZS\") # Imports of Goods and Services as a Percentage of GDP for the United States\nindicator_e= (\"FP.CPI.TOTL.ZG\") # Inflation (consumer prices) for the United States\nindicator_f= (\"FR.INR.RINR\") # Real Interest Rate for the United States\nindicator_g= (\"GC.DOD.TOTL.GD.ZS\") # Central Government Debt Total (% of GDP) for the United States\nindicator_h= (\"SL.UEM.TOTL.ZS\")  # Unemployment Rate for the United States\nindicator_i= (\"MS.MIL.XPND.GD.ZS\") # Military Expenditure for the United States\n\n\ndata1 &lt;- wb(indicator = indicator_a, country = \"US\", startdate = 1973, enddate = 2023)\n\nWarning: `wb()` was deprecated in wbstats 1.0.0.\nℹ Please use `wb_data()` instead.\n\ndata2 &lt;- wb(indicator = indicator_b, country = \"US\", startdate = 1973, enddate = 2023)\ndata3 &lt;- wb(indicator = indicator_c, country = \"US\", startdate = 1973, enddate = 2023)\ndata4 &lt;- wb(indicator = indicator_d, country = \"US\", startdate = 1973, enddate = 2023)\ndata5&lt;- wb(indicator = indicator_e, country = \"US\", startdate = 1973, enddate = 2023)\ndata6 &lt;- wb(indicator = indicator_f, country = \"US\", startdate = 1973, enddate = 2023)\ndata7 &lt;- wb(indicator = indicator_g, country = \"US\", startdate = 1973, enddate = 2023)\ndata8 &lt;- wb(indicator = indicator_h, country = \"US\", startdate = 1973, enddate = 2023)\ndata9 &lt;- wb(indicator = indicator_i, country = \"US\", startdate = 1973, enddate = 2023)\n\n\nThe following is the final snapshot of the data.\n\n\n\nTextual Data\n\nPython API\nUnderstanding the perspective of people on the emergence of BRICS is just as crucial, hence we need to ensure that the public opinions have also been catered and taken into consideration. For this, the REDDIT API for the subreddits have been used. REDDIT API with limited access helps us extract the subreddits for that specific day with the ragin subreddits. The Python PRAW has been used to retrieve the data.\n\n\n#!pip install spacy\n#!python -m spacy download en_core_web_sm\n#nltk.download('wordnet')\n#nltk.download('omw-1.4')\nfrom pprint import pprint\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n\n\nimport praw\nfrom praw.models import MoreComments\n\nuser_agent='Sheeba_Economic'\nreddit= praw.Reddit(\n    client_id=\"rszab0dBkcT7NdZr6MftpQ\",\n    client_secret=\"mBFjTSN3YXoSimkU7eZ1H0SoD-f2Yw\",\n    user_agent=user_agent)\n\n\nposts = []\nfor submission in reddit.subreddit(\"Brics\").top(\"all\"):\n    for top_level_comment in submission.comments:\n        if isinstance(top_level_comment, praw.models.MoreComments):\n            continue\n        posts.append(top_level_comment.body)\n\n&lt;string&gt;:1: DeprecationWarning: Positional arguments for 'BaseListingMixin.top' will no longer be supported in PRAW 8.\nCall this function with 'time_filter' as a keyword argument.\n\n\n\nThis is how the data looks.\n\nRecord Data\nThe record data which is the gist or the main skeleton of my project focuses on understanding individual data points of all entire data. It has been retrieved using almost 152 columns in hand which are important for the EDA. The EDA for my project is a never-ending process and will become better at time. Since for my regression, I’m predicting GDP, having a holistic understanding of current and constant sources of data is just as important. The way economic data is wired is completely different to how the other data works, which is why, it has to be worked with caution.\nThe data collected is in 5 parts.\n\nINDIA\nBRAZIL\nCHINA\nRUSSIA\nSOUTH AFRICA\n\nThis is how the gist of one of the datasets looks like:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Me",
    "section": "",
    "text": "I hope you’re having a great day today! I’m Moghal Sheeba, a 23-year old from Hyderabad, India. I love animals, beaches and hiking. I’m currently a full-time Masters student from Georgetown University’s Masters in Data Science and Analytics.\nAs a graduate in Economics, I loved the questions that data made me ask the efficent methods I learnt in my undergradate classes, especially the Python class. Economics, especially International Economics made me appreciate data science and it’s ability to understand humans and the science of harnessing data driven insights. I wish to find myself working in that bracket one day!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nGeorgetown University | Washington DC Masters in Data Science and Analytics | Aug 2023 - May 2025\nIndira Gandhi National Open University | Hyderabad Post Graduate Diploma in Applied Statistics | June 2022 - June 2023\nSRM University- AP | Amaravati B.A in Economics | July 2018 - June 2021"
  },
  {
    "objectID": "index.html#growing-up",
    "href": "index.html#growing-up",
    "title": "About Me",
    "section": "Growing up",
    "text": "Growing up\nGrowing up, the three most things I loved doing the most was gardening, reading and writing. From Don Quixote’s Miguel de Cervantes to the Brontë sister’s work, I have read more than 500 books in my whole life and have collected more than 1900 books. More than author’s craft in their enunciation of words, I fell in love with the story they try to weave about the political and socio-economic atmosphere. In addition to that, I have loved gardening all my life to an extent that my room has 15 little plants that I love with all my heart!\n\n\n\nChilling with the plants\n\n\nIn addition to these, I have also been a volunteer at Blue Cross, an animal welfare organisation since the past seven years and I also run an adoptions page called @adoptionsforhyd on instagram. This is Laila, one of my favourite dogs we’ve rescued. Her leg was amputated due to severe abuse from her owner but she’s the sweetest little baby you will ever see. She loves peanut better and stealing hairties from your hair.\n\n\n\nOur little Laila!\n\n\nMy favourite animals are ducks and pandas. This is me fistbumping a panda!\n\n\n\nsay hi!\n\n\nI also love photography and these are the most recent pictures I have taken!\n\n\n\nSince I work closer to Downtown\n\n\n\n\n\nClouds\n\n\nA few from back home\n\n\n\nThis is one secret passageway from the 4th and abandoned Golconda gate that almost nobody knows how to access. Well, almost nobody except me!\n\n\n\n\n\nThis is Osamania University, the infamous place where George Reddy died! He’s one of my icons"
  },
  {
    "objectID": "info/code.html",
    "href": "info/code.html",
    "title": "Code",
    "section": "",
    "text": "This is the link to my respository"
  },
  {
    "objectID": "info/arm.html",
    "href": "info/arm.html",
    "title": "ARM",
    "section": "",
    "text": "Build out your website tab for “clustering”"
  },
  {
    "objectID": "info/data_exploration.html",
    "href": "info/data_exploration.html",
    "title": "Data Exploration",
    "section": "",
    "text": "Build out your website tab for “clustering”"
  },
  {
    "objectID": "info/data_cleaning.html",
    "href": "info/data_cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "The cleaning of both textual and quantitative as no simple solution as each dataset has to be treated separately. Hence, the data will be tackled separately.\n\nQuantitative Data\nFor the quantitative data, the way you clean is completely dependent on the nature of the text. Sometimes, cleaning can take a very small period of time and sometimes, it can get a bit too much. As a data scientist, caution has to be taken to ensure each dataset is handled separately. Using the Python and R API, since we have pulled in the US data, this is show it looks.\n\nPython API\nFor the Python API, where the data had been retrieved from FREDAPI, there was not a lot of cleaning that was required. After merging the data, there was one missing value that was imputed using the Mean Value Imputation. While the MVA is not a recommended method for dealing with missing values, and usually for economic data, missing values are not imputed for the data as it combats the purpose of analysis. If our main gist is to analyse the data and their trends across the nations, the imputing could give us biased estimates. Yet, since the amount of missing values are really less, MVA seems like a better option.\n\nfrom fredapi import Fred\nimport pandas as pd\n\nfred = Fred(api_key='10fbe66f8f62ad7f44097cca867bf01f')\n\nseries_id_1 = 'GDP' # for GDP US\nseries_id_2='GDPC1' # for Real Gross GDP\nseries_id_3='W207RC1Q156SBEA' # Adjusted Saving (% of GNI)\nseries_id_4='USAB6BLTT02STSAQ' # Current account balance (% of GDP)\nseries_id_5='A019RE1Q156NBEA' # Export of Goods and Services as percentage of GDP\nseries_id_6='MKTGNIUSA646NWDB' # GNI\n\n# Set the start and end dates where I need data from 1990 to 2023\nstart_date = '1973'\nend_date = '2023'\n\n# Fetch the data\ngdp_u = fred.get_series(series_id_1, start_date, end_date)\nrealgdp_u = fred.get_series(series_id_2, start_date, end_date)\nadjsavings_u = fred.get_series(series_id_3, start_date, end_date)\ncurrentaccbalance_u = fred.get_series(series_id_4, start_date, end_date)\nexportsofgoods_u = fred.get_series(series_id_5, start_date, end_date)\ngni_u= fred.get_series(series_id_6, start_date, end_date)\n\n# for GDP\ndf1= gdp_u.to_frame(name=('GDP'))\nannual_gdp_u = df1.resample('A').mean()\nannual_gdp_u['Year'] = annual_gdp_u.index.year\nannual_gdp_u=annual_gdp_u[['Year', 'GDP']]\nannual_gdp_u.reset_index(drop=True, inplace=True)\nprint(annual_gdp_u.head(5))\n\n# Real GDP\ndf2= realgdp_u.to_frame(name=('Real GDP'))\nannual_realgdp_u = df2.resample('A').mean()\nannual_realgdp_u['Year'] = annual_realgdp_u.index.year\nannual_realgdp_u.reset_index(drop=True, inplace=True)\nannual_realgdp_u.head(16)\n\n# Adjusted Savings\ndf3= adjsavings_u.to_frame(name=('Adjusted Savings'))\nannual_adjsavings_u = df3.resample('A').mean()\nannual_adjsavings_u['Year'] = annual_adjsavings_u.index.year\nannual_adjsavings_u.reset_index(drop=True, inplace=True)\nannual_adjsavings_u.head(2)\n\n# Current Account Balance % of GDP\ndf4= currentaccbalance_u.to_frame(name=('Current Account Balance'))\nannual_currentaccbalance_u = df4.resample('A').mean()\nannual_currentaccbalance_u['Year'] = annual_currentaccbalance_u.index.year\nannual_currentaccbalance_u.reset_index(drop=True, inplace=True)\nannual_currentaccbalance_u.head(2)\n\n# Current Account Balance % of GDP\ndf5= exportsofgoods_u.to_frame(name=('Exports of Goods and Services'))\nannual_exportsofgoods_u = df5.resample('A').mean()\nannual_exportsofgoods_u['Year'] = annual_exportsofgoods_u.index.year\nannual_exportsofgoods_u.reset_index(drop=True, inplace=True)\nannual_exportsofgoods_u.head(2)\n\n# GNI\ndf6= gni_u.to_frame(name=('GNI'))\nannual_gni_u = df6.resample('A').mean()\nannual_gni_u['Year'] = annual_gni_u.index.year\nannual_gni_u.reset_index(drop=True, inplace=True)\nannual_gni_u.head(10)\n\nmerged_df= pd.merge(annual_gdp_u, annual_realgdp_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_adjsavings_u, how= 'outer', on= 'Year')\nmerged_df= pd.merge(merged_df, annual_currentaccbalance_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_exportsofgoods_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_gni_u, how= 'outer', on= 'Year' )\n\n   Year        GDP\n0  1973  1425.3760\n1  1974  1545.2425\n2  1975  1684.9050\n3  1976  1873.4125\n4  1977  2081.8250\n\n\n\nimport pandas as pd\n\nmerged_df= pd.merge(annual_gdp_u, annual_realgdp_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_adjsavings_u, how= 'outer', on= 'Year')\nmerged_df= pd.merge(merged_df, annual_currentaccbalance_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_exportsofgoods_u, how= 'outer', on= 'Year' )\nmerged_df= pd.merge(merged_df, annual_gni_u, how= 'outer', on= 'Year' )\n\n\nmerged_df.isna().sum()\n\nYear                             0\nGDP                              0\nReal GDP                         0\nAdjusted Savings                 0\nCurrent Account Balance          0\nExports of Goods and Services    0\nGNI                              1\ndtype: int64\n\n\n\nmerged_df['GNI'] = merged_df['GNI'].fillna(merged_df['GNI'].mean())\n\nmerged_df.isna().sum()\n\nYear                             0\nGDP                              0\nReal GDP                         0\nAdjusted Savings                 0\nCurrent Account Balance          0\nExports of Goods and Services    0\nGNI                              0\ndtype: int64\n\n\n\nmerged_df.head(10)\n\n\n\n\n\n\n\n\nYear\nGDP\nReal GDP\nAdjusted Savings\nCurrent Account Balance\nExports of Goods and Services\nGNI\n\n\n\n\n0\n1973\n1425.37600\n6106.37050\n10.925\n0.492313\n0.275\n1.431848e+12\n\n\n1\n1974\n1545.24250\n6073.36275\n9.200\n0.129574\n-0.050\n1.553300e+12\n\n\n2\n1975\n1684.90500\n6060.87525\n6.500\n1.075657\n0.950\n1.684554e+12\n\n\n3\n1976\n1873.41250\n6387.43650\n7.450\n0.233895\n-0.050\n1.869603e+12\n\n\n4\n1977\n2081.82500\n6682.80450\n8.125\n-0.683540\n-1.125\n2.082670e+12\n\n\n5\n1978\n2351.59875\n7052.71125\n9.375\n-0.661201\n-1.125\n2.349856e+12\n\n\n6\n1979\n2627.32625\n7275.99925\n9.200\n-0.012445\n-0.875\n2.614202e+12\n\n\n7\n1980\n2857.30850\n7257.31650\n7.050\n0.073883\n-0.450\n2.847055e+12\n\n\n8\n1981\n3207.04125\n7441.48500\n8.000\n0.156610\n-0.375\n3.201886e+12\n\n\n9\n1982\n3343.78925\n7307.31400\n5.625\n-0.161860\n-0.600\n3.371448e+12\n\n\n\n\n\n\n\n\n\nR API\nFor the R API, a similar aspect is seen. When a set of macroeconomic and fiscal variables have been pulled from python, few were also pulled from R using the ‘wbstats’ API.\nSimilar to the Python API, the data retrieved from here also didn’t have a lot of data cleaning steps.\n\nHere you can see the amount of missing values wherein, we similarly cleaned it through missing value imputation through mean.\n\n# Using mean value imputation \nfor (x in names(merged_df)) {\n  mean &lt;- mean(merged_df[[x], na.rm = TRUE)  # Calculate column mean ignoring NA\n  merged_df[[x]][is.na(merged_df[[x]])] &lt;- mean    # Replace NA with column mean\n}\n\nHere is no missing of the data\n\nThe final representation of the data\n\n\n\n\nTextual Data\n\nPython API\nFor the textual data, the python wrapper of PRAW has been used. This is how the output looks\n\nThis was used to clean and vectorise the data.\n\nimport string\nimport re\nfrom nltk.corpus import stopwords\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\n\n#nltk.download('punkt')\n#nltk.download('stopwords')\n\ndef clean_string(text):\n    # lowercase the text\n    text = text.lower()\n    \n    # replace with regular quotations, added this since there were few texts that weren't cleaned\n    text = text.replace('’', \"'\")\n    \n    # remove emojis, saw a list of them online so just added them.\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F700-\\U0001F77F\"  # alchemical symbols\n                           u\"\\U0001F780-\\U0001F7FF\"  # Geometric Shapes Extended\n                           u\"\\U0001F800-\\U0001F8FF\"  # Supplemental Arrows-C\n                           u\"\\U0001F900-\\U0001F9FF\"  # Supplemental Symbols and Pictographs\n                           u\"\\U0001FA00-\\U0001FA6F\"  # Chess Symbols\n                           u\"\\U0001FA70-\\U0001FAFF\"  # Symbols and Pictographs Extended-A\n                           u\"\\U0001F004-\\U0001F0CF\"  # Miscellaneous Symbols and Pictographs\n                           u\"\\U0001F0D0-\\U0001F0FF\"  # Emoticons\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # Regional Indicator Symbols\n                           u\"\\U0001F200-\\U0001F251\"  # Enclosed Ideographic Supplement\n                           \"]+\", flags=re.UNICODE)\n    text = emoji_pattern.sub(r'', text)  # Remove emojis\n    \n    # line breaks removal\n    text = text.replace('\\n', ' ')\n    \n    #  punctuation removal\n    text = ''.join([char for char in text if char not in string.punctuation])\n    \n    #  tokenize the text\n    words = nltk.word_tokenize(text)\n    \n    # remove stopwords\n    words = [word for word in words if word not in stopwords.words('english')]\n    \n    # rejoin the words into a cleaned string\n    cleaned_text = ' '.join(words)\n    \n    return cleaned_text\n\nThen apply the clean string in addition.\n\ndf['cleaned_tweets'] = df['body'].apply(clean_string)\n\n\nWe then vectorise the data using the ‘CountVectoriser’ from sklearn\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nvalue = [str(element) for element in df2]\nvectorizer=CountVectorizer()\nXs  =  vectorizer.fit_transform(value)   \nprint(type(Xs))\nprint(\"vocabulary = \",vectorizer.vocabulary_)   \nprint(\"stop words =\", vectorizer.stop_words)\ncol_names=vectorizer.get_feature_names_out()\nprint(\"col_names=\",col_names)\n\nThis is how the actual output looks like\n\nIn addition to that, since we are also looking for perform Naive Bayes next, which is often used for categorical data, we use the SIA, or the Sentiment Intensity Analyser from the NLTK that automatically calculates the polarity scores on basis of the tweets. This is required as the data I retrieved didn’t have any labels to it. This seemed like the best option.\n\nsia = SIA()\nresults = []\n\nfor tweet in df['cleaned_tweets']:  \n    polarity = sia.polarity_scores(tweet)\n    polarity['cleaned_tweets'] = tweet  cores\n    results.append(polarity)\n\n\nsentiment_df = pd.DataFrame(results)\npprint(sentiment_df.head())\n\n\n\n\n\nRecord Data\nFor the record data, using the world bank data bank, the data was retrieved. There is a lot of cleaning that was supposed to be done. The entire data as seen under data_gathering section was transposed and had 152 columns. I had to individually transpose. Below, a similar method was imposed to clean all the 5 individual datasets.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#pip install xlrd\ndf=pd.read_excel('../data/india.xlsx')\ndf.head(10)\n\n\n\n\n\n\n\n\nSeries Name\nSeries Code\nCountry Name\nCountry Code\n1979 [YR1979]\n1980 [YR1980]\n1981 [YR1981]\n1982 [YR1982]\n1983 [YR1983]\n1984 [YR1984]\n...\n2013 [YR2013]\n2014 [YR2014]\n2015 [YR2015]\n2016 [YR2016]\n2017 [YR2017]\n2018 [YR2018]\n2019 [YR2019]\n2020 [YR2020]\n2021 [YR2021]\n2022 [YR2022]\n\n\n\n\n0\nAdjusted net national income (annual % growth)\nNY.ADJ.NNTY.KD.ZG\nIndia\nIND\n-4.294464e+00\n1.197854e+01\n-2.572689e+00\n1.626264e+00\n1.156210e+01\n1.851968e+00\n...\n5.743356e+00\n7.013968e+00\n8.865576e+00\n7.532403e+00\n8.398101e+00\n5.840102e+00\n4.233916\n-6.952693\n..\n..\n\n\n1\nAdjusted net national income (constant 2015 US$)\nNY.ADJ.NNTY.KD\nIndia\nIND\n2.211879e+11\n2.476830e+11\n2.413109e+11\n2.452352e+11\n2.735896e+11\n2.786564e+11\n...\n1.579994e+12\n1.690815e+12\n1.840715e+12\n1.979365e+12\n2.145594e+12\n2.270899e+12\n2367046992096.234863\n2202473491333.981445\n..\n..\n\n\n2\nAdjusted savings: consumption of fixed capital...\nNY.ADJ.DKAP.GN.ZS\nIndia\nIND\n8.340217e+00\n8.055168e+00\n8.393346e+00\n8.819348e+00\n8.419293e+00\n8.784357e+00\n...\n1.082108e+01\n1.087247e+01\n1.062772e+01\n1.053878e+01\n1.054180e+01\n1.071598e+01\n10.84664\n11.088283\n..\n..\n\n\n3\nAdjusted savings: education expenditure (% of ...\nNY.ADJ.AEDU.GN.ZS\nIndia\nIND\n2.600000e+00\n2.600000e+00\n2.600000e+00\n3.051058e+00\n3.153437e+00\n2.700000e+00\n...\n3.080000e+00\n3.080000e+00\n3.080000e+00\n3.080000e+00\n3.080000e+00\n3.080000e+00\n3.08\n3.08\n..\n..\n\n\n4\nAdjusted savings: net national savings (% of GNI)\nNY.ADJ.NNAT.GN.ZS\nIndia\nIND\n7.427910e+00\n6.418183e+00\n7.373027e+00\n7.043158e+00\n7.024774e+00\n7.097912e+00\n...\n2.398766e+01\n2.288990e+01\n2.220882e+01\n2.088344e+01\n2.155743e+01\n2.096942e+01\n19.364627\n19.896565\n..\n..\n\n\n5\nCurrent account balance (% of GDP)\nBN.CAB.XOKA.GD.ZS\nIndia\nIND\n3.290178e-02\n-9.580692e-01\n-1.394549e+00\n-1.257273e+00\n-8.874382e-01\n-1.089317e+00\n...\n-2.645667e+00\n-1.339509e+00\n-1.067549e+00\n-5.278806e-01\n-1.439488e+00\n-2.426975e+00\n-1.049612\n1.225112\n-1.060924\n-2.335269\n\n\n6\nExports of goods and services (% of GDP)\nNE.EXP.GNFS.ZS\nIndia\nIND\n6.749638e+00\n6.139551e+00\n5.936027e+00\n5.983300e+00\n5.837629e+00\n6.283401e+00\n...\n2.543086e+01\n2.296796e+01\n1.981319e+01\n1.915823e+01\n1.879176e+01\n1.992783e+01\n18.664265\n18.705247\n21.514389\n22.449438\n\n\n7\nExports of goods and services (annual % growth)\nNE.EXP.GNFS.KD.ZG\nIndia\nIND\n1.115419e+01\n5.237330e+00\n-8.169341e-01\n6.020508e+00\n-9.149183e-01\n7.297852e+00\n...\n7.792389e+00\n1.777591e+00\n-5.647087e+00\n4.984258e+00\n4.564708e+00\n1.193187e+01\n-3.384978\n-9.135286\n29.293893\n11.502775\n\n\n8\nExternal debt stocks (% of GNI)\nDT.DOD.DECT.GN.ZS\nIndia\nIND\n1.187508e+01\n1.109611e+01\n1.161548e+01\n1.346761e+01\n1.410165e+01\n1.553087e+01\n...\n2.330087e+01\n2.270491e+01\n2.302951e+01\n2.026309e+01\n1.950102e+01\n1.948509e+01\n20.000281\n21.470538\n19.618194\n..\n\n\n9\nFinal consumption expenditure (% of GDP)\nNE.CON.TOTL.ZS\nIndia\nIND\n8.569155e+01\n8.749802e+01\n8.576861e+01\n8.531944e+01\n8.563585e+01\n8.496053e+01\n...\n6.794093e+01\n6.856857e+01\n6.943557e+01\n6.960383e+01\n6.949235e+01\n7.011154e+01\n71.913963\n72.88427\n72.300662\n71.036559\n\n\n\n\n10 rows × 48 columns\n\n\n\nI had to transpose the data.\n\ndf = df.T\ndf.columns = df.iloc[0]\n\nThe tranposed data is shown below.\n\ndf.head()\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital...\nAdjusted savings: education expenditure (% of ...\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\nSeries Code\nNY.ADJ.NNTY.KD.ZG\nNY.ADJ.NNTY.KD\nNY.ADJ.DKAP.GN.ZS\nNY.ADJ.AEDU.GN.ZS\nNY.ADJ.NNAT.GN.ZS\nBN.CAB.XOKA.GD.ZS\nNE.EXP.GNFS.ZS\nNE.EXP.GNFS.KD.ZG\nDT.DOD.DECT.GN.ZS\nNE.CON.TOTL.ZS\n...\nDT.DOD.DSTC.IR.ZS\nNE.TRD.GNFS.ZS\nFP.CPI.TOTL\nFP.CPI.TOTL.ZG\nFR.INR.RINR\nFR.INR.LEND\nSP.DYN.LE00.IN\nGC.XPN.TOTL.GD.ZS\nGC.XPN.INTP.RV.ZS\nMS.MIL.XPND.GD.ZS\n\n\nCountry Name\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\n...\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\n\n\nCountry Code\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\n...\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\n\n\n1979 [YR1979]\n-4.294464\n221187904202.083466\n8.340217\n2.6\n7.42791\n0.032902\n6.749638\n11.154191\n11.875085\n85.691548\n...\n5.907537\n14.918805\n8.745175\n6.275683\n-1.061146\n14.5\n53.06\n12.314448\n12.925728\n3.261329\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[4:]\ndf.head()\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\n\n\n1979 [YR1979]\n-4.294464\n221187904202.083466\n8.340217\n2.6\n7.42791\n0.032902\n6.749638\n11.154191\n11.875085\n85.691548\n...\n5.907537\n14.918805\n8.745175\n6.275683\n-1.061146\n14.5\n53.06\n12.314448\n12.925728\n3.261329\n\n\n1980 [YR1980]\n11.978544\n247682993937.674408\n8.055168\n2.6\n6.418183\n-0.958069\n6.139551\n5.23733\n11.096107\n87.498021\n...\n10.583034\n15.384577\n9.737409\n11.346073\n4.476508\n16.5\n53.611\n11.702478\n13.780033\n3.133781\n\n\n1981 [YR1981]\n-2.572689\n241310879910.579712\n8.393346\n2.6\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n19.694561\n14.507265\n11.014232\n13.112547\n5.118237\n16.5\n54.175\n11.376034\n14.073244\n3.186248\n\n\n1982 [YR1982]\n1.626264\n245235232731.58252\n8.819348\n3.051058\n7.043158\n-1.257273\n5.9833\n6.020508\n13.467614\n85.319441\n...\n29.084294\n14.125928\n11.883336\n7.890743\n7.774707\n16.5\n54.732\n11.959873\n15.563031\n3.345118\n\n\n1983 [YR1983]\n11.562099\n273589572947.595245\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n40.629366\n13.690594\n13.29366\n11.868081\n7.320987\n16.5\n55.281\n12.077793\n17.460567\n3.323069\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[1:]\ndf.head()\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\n\n\n1980 [YR1980]\n11.978544\n247682993937.674408\n8.055168\n2.6\n6.418183\n-0.958069\n6.139551\n5.23733\n11.096107\n87.498021\n...\n10.583034\n15.384577\n9.737409\n11.346073\n4.476508\n16.5\n53.611\n11.702478\n13.780033\n3.133781\n\n\n1981 [YR1981]\n-2.572689\n241310879910.579712\n8.393346\n2.6\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n19.694561\n14.507265\n11.014232\n13.112547\n5.118237\n16.5\n54.175\n11.376034\n14.073244\n3.186248\n\n\n1982 [YR1982]\n1.626264\n245235232731.58252\n8.819348\n3.051058\n7.043158\n-1.257273\n5.9833\n6.020508\n13.467614\n85.319441\n...\n29.084294\n14.125928\n11.883336\n7.890743\n7.774707\n16.5\n54.732\n11.959873\n15.563031\n3.345118\n\n\n1983 [YR1983]\n11.562099\n273589572947.595245\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n40.629366\n13.690594\n13.29366\n11.868081\n7.320987\n16.5\n55.281\n12.077793\n17.460567\n3.323069\n\n\n1984 [YR1984]\n1.851968\n278656365651.448975\n8.784357\n2.7\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n43.018087\n14.009376\n14.399548\n8.318907\n7.9471\n16.5\n55.816\n13.14296\n19.011381\n3.416876\n\n\n\n\n5 rows × 33 columns\n\n\n\n\nprint(df.isnull().sum())\n\nSeries Name\nAdjusted net national income (annual % growth)                 0\nAdjusted net national income (constant 2015 US$)               0\nAdjusted savings: consumption of fixed capital (% of GNI)      0\nAdjusted savings: education expenditure (% of GNI)             0\nAdjusted savings: net national savings (% of GNI)              0\nCurrent account balance (% of GDP)                             0\nExports of goods and services (% of GDP)                       0\nExports of goods and services (annual % growth)                0\nExternal debt stocks (% of GNI)                                0\nFinal consumption expenditure (% of GDP)                       0\nFinal consumption expenditure (annual % growth)                0\nForeign direct investment, net inflows (% of GDP)              0\nForeign direct investment, net outflows (% of GDP)             0\nGDP growth (annual %)                                          0\nGDP per capita growth (annual %)                               0\nGeneral government final consumption expenditure (% of GDP)    0\nGNI growth (annual %)                                          0\nGoods exports (BoP, current US$)                               0\nGoods imports (BoP, current US$)                               0\nImports of goods and services (% of GDP)                       0\nImports of goods and services (annual % growth)                0\nServices, value added (% of GDP)                               0\nServices, value added (annual % growth)                        0\nShort-term debt (% of total reserves)                          0\nTrade (% of GDP)                                               0\nConsumer price index (2010 = 100)                              0\nInflation, consumer prices (annual %)                          0\nReal interest rate (%)                                         0\nLending interest rate (%)                                      0\nLife expectancy at birth, total (years)                        0\nExpense (% of GDP)                                             0\nInterest payments (% of revenue)                               0\nMilitary expenditure (% of GDP)                                0\ndtype: int64\n\n\nIn the dataset, there was a problem of the dataframe having row indexes and column indexes and hence, I worked on it drop the index and create a yearly column from scratch.\n\n# creating a new index rather than treating it\nnew_index = range(1979, 2022)\n\n# Reset the index with the new range\ndf = df.reset_index(drop=True)\ndf.index = new_index\ndf.index.name = \"year\"\n\ndf.shape\n\n(43, 33)\n\n\nI renamed all the columns\n\ncols= ['adj_NNI_g', 'adj_NNI_c', 'adj_savings_fix_cap_GNI', 'adj_savings_edu_GNI', 'adj_NNS_GNI',\n                    'curr_acc_bal', 'ex_imp_gdp', 'ex_imp_growth', 'ex_debt_shocks', 'final_consump_exp_gdp',\n                    'final_consump_exp_growth', 'fdi_net_inflows', 'fdi_net_outflows', 'gdp_growth', 'gdp_per_capita_growth',\n                    'gener_govt_fin_consump_exp', 'gni_growth', 'goods_exp_bop','goods_imp_bop', 'imports_goods_services_gdp', 'imports_goods_services_growth','services_gdp', 'services_growth', \n                       'short_term_debt_tot_reserves','trade_gdp', 'cpi', 'inflation','real_interest_rate','lending_interest_rate','life_exp_birth','expense_gdp','interest_payments', 'military expenditure']\n\ndf.columns = cols\ndf.head(5)\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\nshort_term_debt_tot_reserves\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1979\n11.978544\n247682993937.674408\n8.055168\n2.6\n6.418183\n-0.958069\n6.139551\n5.23733\n11.096107\n87.498021\n...\n10.583034\n15.384577\n9.737409\n11.346073\n4.476508\n16.5\n53.611\n11.702478\n13.780033\n3.133781\n\n\n1980\n-2.572689\n241310879910.579712\n8.393346\n2.6\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n19.694561\n14.507265\n11.014232\n13.112547\n5.118237\n16.5\n54.175\n11.376034\n14.073244\n3.186248\n\n\n1981\n1.626264\n245235232731.58252\n8.819348\n3.051058\n7.043158\n-1.257273\n5.9833\n6.020508\n13.467614\n85.319441\n...\n29.084294\n14.125928\n11.883336\n7.890743\n7.774707\n16.5\n54.732\n11.959873\n15.563031\n3.345118\n\n\n1982\n11.562099\n273589572947.595245\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n40.629366\n13.690594\n13.29366\n11.868081\n7.320987\n16.5\n55.281\n12.077793\n17.460567\n3.323069\n\n\n1983\n1.851968\n278656365651.448975\n8.784357\n2.7\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n43.018087\n14.009376\n14.399548\n8.318907\n7.9471\n16.5\n55.816\n13.14296\n19.011381\n3.416876\n\n\n\n\n5 rows × 33 columns\n\n\n\nUsed mean value imputation for missing value imputation.\n\nvalue_to_replace = \"..\"\nfor col in df.columns:\n    df[col] = df[col].replace(value_to_replace, np.nan)\n\nmissing= df.isnull().sum()\n\n\nmissing_vals = pd.DataFrame({'Missing Values': missing.index, 'Missing Values Sum': missing.values})\nmissing_vals = missing_vals.sort_values(by='Missing Values Sum', ascending=False)\n\nprint(missing_vals)\n\n                   Missing Values  Missing Values Sum\n31              interest_payments                   4\n30                    expense_gdp                   4\n0                       adj_NNI_g                   2\n2         adj_savings_fix_cap_GNI                   2\n3             adj_savings_edu_GNI                   2\n4                     adj_NNS_GNI                   2\n1                       adj_NNI_c                   2\n29                 life_exp_birth                   1\n8                  ex_debt_shocks                   1\n23   short_term_debt_tot_reserves                   1\n24                      trade_gdp                   0\n21                   services_gdp                   0\n22                services_growth                   0\n28          lending_interest_rate                   0\n25                            cpi                   0\n26                      inflation                   0\n27             real_interest_rate                   0\n19     imports_goods_services_gdp                   0\n20  imports_goods_services_growth                   0\n16                     gni_growth                   0\n18                  goods_imp_bop                   0\n17                  goods_exp_bop                   0\n15     gener_govt_fin_consump_exp                   0\n14          gdp_per_capita_growth                   0\n13                     gdp_growth                   0\n12               fdi_net_outflows                   0\n11                fdi_net_inflows                   0\n10       final_consump_exp_growth                   0\n9           final_consump_exp_gdp                   0\n7                   ex_imp_growth                   0\n6                      ex_imp_gdp                   0\n5                    curr_acc_bal                   0\n32           military expenditure                   0\n\n\n\nfor cols in df.columns:\n    mean = df[cols].mean()\n    df[cols] = df[cols].fillna(mean)\n\n\nprint(df.isnull().sum())\n\nadj_NNI_g                        0\nadj_NNI_c                        0\nadj_savings_fix_cap_GNI          0\nadj_savings_edu_GNI              0\nadj_NNS_GNI                      0\ncurr_acc_bal                     0\nex_imp_gdp                       0\nex_imp_growth                    0\nex_debt_shocks                   0\nfinal_consump_exp_gdp            0\nfinal_consump_exp_growth         0\nfdi_net_inflows                  0\nfdi_net_outflows                 0\ngdp_growth                       0\ngdp_per_capita_growth            0\ngener_govt_fin_consump_exp       0\ngni_growth                       0\ngoods_exp_bop                    0\ngoods_imp_bop                    0\nimports_goods_services_gdp       0\nimports_goods_services_growth    0\nservices_gdp                     0\nservices_growth                  0\nshort_term_debt_tot_reserves     0\ntrade_gdp                        0\ncpi                              0\ninflation                        0\nreal_interest_rate               0\nlending_interest_rate            0\nlife_exp_birth                   0\nexpense_gdp                      0\ninterest_payments                0\nmilitary expenditure             0\ndtype: int64\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 43 entries, 1979 to 2021\nData columns (total 33 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   adj_NNI_g                      43 non-null     float64\n 1   adj_NNI_c                      43 non-null     float64\n 2   adj_savings_fix_cap_GNI        43 non-null     float64\n 3   adj_savings_edu_GNI            43 non-null     float64\n 4   adj_NNS_GNI                    43 non-null     float64\n 5   curr_acc_bal                   43 non-null     float64\n 6   ex_imp_gdp                     43 non-null     float64\n 7   ex_imp_growth                  43 non-null     float64\n 8   ex_debt_shocks                 43 non-null     float64\n 9   final_consump_exp_gdp          43 non-null     float64\n 10  final_consump_exp_growth       43 non-null     float64\n 11  fdi_net_inflows                43 non-null     float64\n 12  fdi_net_outflows               43 non-null     float64\n 13  gdp_growth                     43 non-null     float64\n 14  gdp_per_capita_growth          43 non-null     float64\n 15  gener_govt_fin_consump_exp     43 non-null     float64\n 16  gni_growth                     43 non-null     float64\n 17  goods_exp_bop                  43 non-null     float64\n 18  goods_imp_bop                  43 non-null     float64\n 19  imports_goods_services_gdp     43 non-null     float64\n 20  imports_goods_services_growth  43 non-null     float64\n 21  services_gdp                   43 non-null     float64\n 22  services_growth                43 non-null     float64\n 23  short_term_debt_tot_reserves   43 non-null     float64\n 24  trade_gdp                      43 non-null     float64\n 25  cpi                            43 non-null     float64\n 26  inflation                      43 non-null     float64\n 27  real_interest_rate             43 non-null     float64\n 28  lending_interest_rate          43 non-null     float64\n 29  life_exp_birth                 43 non-null     float64\n 30  expense_gdp                    43 non-null     float64\n 31  interest_payments              43 non-null     float64\n 32  military expenditure           43 non-null     float64\ndtypes: float64(33)\nmemory usage: 11.2 KB\n\n\n\ndf['year'] = df.index\n\nNext for the purpose of Naive Bayes, binning has to be done for which I looked at the maximum and minimum values of the gdp growth and binned them accordingly.\n\ndf[\"gdp_growth\"].min()\n\n-5.8310532203120715\n\n\n\ndf[\"gdp_growth\"].max()\n\n9.627782916078445\n\n\n\nbins = [0, 2, 5, 7, float('inf')]\n\n\nlabels = ['Low Growth', 'Moderate Growth', 'High Growth', 'Very High Growth']\n\n\ndf['labels'] = pd.cut(df['gdp_growth'], bins=bins, labels=labels)\n\nThis is the final cleaned df\n\ndf.head(10)\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear\nlabels\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1979\n11.978544\n2.476830e+11\n8.055168\n2.600000\n6.418183\n-0.958069\n6.139551\n5.237330\n11.096107\n87.498021\n...\n9.737409\n11.346073\n4.476508\n16.5\n53.611\n11.702478\n13.780033\n3.133781\n1979\nHigh Growth\n\n\n1980\n-2.572689\n2.413109e+11\n8.393346\n2.600000\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n11.014232\n13.112547\n5.118237\n16.5\n54.175\n11.376034\n14.073244\n3.186248\n1980\nHigh Growth\n\n\n1981\n1.626264\n2.452352e+11\n8.819348\n3.051058\n7.043158\n-1.257273\n5.983300\n6.020508\n13.467614\n85.319441\n...\n11.883336\n7.890743\n7.774707\n16.5\n54.732\n11.959873\n15.563031\n3.345118\n1981\nModerate Growth\n\n\n1982\n11.562099\n2.735896e+11\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n13.293660\n11.868081\n7.320987\n16.5\n55.281\n12.077793\n17.460567\n3.323069\n1982\nVery High Growth\n\n\n1983\n1.851968\n2.786564e+11\n8.784357\n2.700000\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n14.399548\n8.318907\n7.947100\n16.5\n55.816\n13.142960\n19.011381\n3.416876\n1983\nModerate Growth\n\n\n1984\n2.568824\n2.858146e+11\n9.353953\n2.900000\n7.554300\n-1.780807\n5.254555\n-6.314911\n16.829824\n83.909108\n...\n15.199648\n5.556424\n8.681674\n16.5\n56.334\n14.378945\n19.624125\n3.569030\n1984\nHigh Growth\n\n\n1985\n4.529744\n2.987612e+11\n9.396312\n3.000000\n6.454966\n-1.834521\n5.196222\n5.432381\n18.139780\n84.709376\n...\n16.526534\n8.729721\n9.093224\n16.5\n56.835\n15.338638\n20.586555\n4.106469\n1985\nModerate Growth\n\n\n1986\n6.629877\n3.185687e+11\n9.730683\n2.900000\n7.376519\n-1.853242\n5.604581\n12.727279\n19.285986\n83.378616\n...\n17.981055\n8.801126\n6.560180\n16.5\n57.315\n15.767219\n22.398962\n4.231318\n1986\nModerate Growth\n\n\n1987\n8.303368\n3.450207e+11\n9.652199\n2.700000\n8.727017\n-2.408456\n6.035220\n7.473063\n20.201660\n81.723887\n...\n19.668303\n9.383472\n7.638633\n16.5\n57.777\n15.519503\n23.934797\n3.728672\n1987\nVery High Growth\n\n\n1988\n6.679085\n3.680649e+11\n9.735381\n3.300000\n10.618226\n-2.301284\n7.016130\n11.979133\n25.194922\n79.735153\n...\n21.059694\n7.074280\n7.435843\n16.5\n58.233\n15.971534\n24.459015\n3.534180\n1988\nHigh Growth\n\n\n\n\n10 rows × 35 columns"
  },
  {
    "objectID": "info/dimensionalityreduction.html",
    "href": "info/dimensionalityreduction.html",
    "title": "Introduction to Dimensionality Reduction",
    "section": "",
    "text": "When we do predictive analysis mainly, the number of independant that go into the modelling play an important role, in addition to the size of the dataset and the way it has been pre-processed.\nSince the independant variables, or the “predictors” actually play an important role in deciding the course of the outcomes, may it be supervised or unsupervised learning, it’s crucial to choose the correct feature sets that best describes your data.\nThere are several definitions for Dimensionality Reduction, however, all in all, it is a process that reduces the number of features from a dataset whilst retaining the information. Usually, dimensionality reduction is done when you have a feature set that can be highly correlated, highly complex or just doesn’t contribute to the outcome or improve the performance of the algorithm. Hence, our main goal with dimensionality reduction is to make the data less dimensional and preserve the information in the dataset.\nDimensionality Reduction can be done in different ways, with Principal Component Analysis (PCA) and t-SNE being one of them.\nFor this project, two techniques will be used\nAs we often use Dimensionality Reduction as Feature Selection and Feature Extraction methods, in this project, we use it as a Feature Extraction method, where we attempt to derive a new feature set from the existing independant variables to construct an optimal feature subspace."
  },
  {
    "objectID": "info/dimensionalityreduction.html#principal-component-analysis-pca",
    "href": "info/dimensionalityreduction.html#principal-component-analysis-pca",
    "title": "Introduction to Dimensionality Reduction",
    "section": "Principal Component Analysis (PCA)",
    "text": "Principal Component Analysis (PCA)\nPCA (Principal Component Analysis) is a statistical technique that uses linear transformations to discover the most relevant features, or principal components, in high-dimensional datasets. Hence, PCA creates a low-dimensional representation of a dataset and finds the most variable sequence of linear combinations of mutually uncorrelated variables. It can be used to display data in addition to giving derived variables for use in supervised learning tasks.\nThis is particularly true when working with big amounts of data. PCA accomplishes this by transforming the data into a new set of variables known as principal components, which contain the data’s most significant variations. Most researchers and people into data analysis can use PCA to focus on the most important features of data, making it easier to understand and work with.\nSince I have worked with PCA before, the sklearn library is a wonderful tool for this.\nFor PCA, one of the important things is to get rid of any labels within the data. Hence, there is only a set of numerical variables. For this dataset, the highly correlated variables have already been removed to reduce multicollinearity of the dataset as much as possible.\n\n# Import Libraries \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import LabelEncoder\n\n\nstackeddf= pd.read_csv(\"../data/stackeddf.csv\")\n\nstackeddf.head(10)\n\n\n\n\n\n\n\n\nyear\nadj_NNI_g\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\nex_imp_growth\nex_debt_shocks\nfdi_net_outflows\ngdp_growth\nshort_term_debt_tot_reserves\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\nmilitary expenditure\nlabels\n\n\n\n\n0\n-1.647859\n1.230366\n0.270892\n-0.277537\n-0.052004\n0.419580\n-1.270470\n-0.842531\n1.595002\n-0.032164\n-0.845342\n-0.112698\n-0.121526\n-0.167829\nHigh Growth\n\n\n1\n-1.572340\n-1.216110\n0.313510\n-0.277537\n0.103127\n-0.481153\n-1.204634\n-0.842808\n1.304262\n0.403253\n-0.845342\n-0.110878\n-0.141348\n-0.151690\nHigh Growth\n\n\n2\n-1.496821\n-0.510146\n0.367195\n-0.277537\n0.049534\n0.536099\n-0.969857\n-0.842942\n0.295912\n0.851964\n-0.845342\n-0.109081\n-0.105898\n-0.102821\nModerate Growth\n\n\n3\n-1.421301\n1.160350\n0.316780\n-0.277537\n0.046547\n-0.495731\n-0.889487\n-0.842495\n1.815392\n1.403674\n-0.845342\n-0.107310\n-0.098738\n-0.109603\nVery High Growth\n\n\n4\n-1.345782\n-0.472199\n0.362786\n-0.277537\n0.058430\n0.726138\n-0.708319\n-0.842596\n0.433390\n1.517825\n-0.845342\n-0.105584\n-0.034063\n-0.080748\nModerate Growth\n\n\n5\n-1.270263\n-0.351675\n0.434567\n-0.277537\n0.132578\n-1.299124\n-0.543663\n-0.842744\n1.004641\n1.655880\n-0.845342\n-0.103913\n0.040985\n-0.033944\nHigh Growth\n\n\n6\n-1.194744\n-0.021989\n0.439905\n-0.277537\n-0.046028\n0.448600\n-0.377613\n-0.843166\n0.814271\n1.717391\n-0.845342\n-0.102297\n0.099256\n0.131376\nModerate Growth\n\n\n7\n-1.119224\n0.331103\n0.482043\n-0.277537\n0.103695\n1.533911\n-0.232320\n-0.842619\n0.491018\n1.817072\n-0.845342\n-0.100749\n0.125278\n0.169781\nModerate Growth\n\n\n8\n-1.043705\n0.612465\n0.472153\n-0.277537\n0.323107\n0.752206\n-0.116249\n-0.842141\n2.747401\n2.769720\n-0.845342\n-0.099258\n0.110237\n0.015163\nVery High Growth\n\n\n9\n-0.968186\n0.339376\n0.482635\n-0.277537\n0.630367\n1.422604\n0.516698\n-0.842224\n1.280807\n3.915796\n-0.845342\n-0.097787\n0.137684\n-0.044664\nHigh Growth\n\n\n\n\n\n\n\nHere, we see that the data has both numerical and categorical variables which have already been normalised using the standard scalar. It is preprocessing technique that uses the z-score normalisation method to ensure the features are all on a comparible scale, with a mean of zero and a standard deviation of 1. Hemce, we separate the data into ‘x’ and ‘y’ variables.\n\ny = stackeddf['labels']\nx = stackeddf.drop(['labels'], axis=1)\n\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n\n\npca1 = PCA()\npca_result = pca1.fit_transform(x)\n\nprint(pca_result)\n\n[[ 7.62571967e-01 -6.26043200e-01 -2.30866090e-01 ... -3.68266626e-02\n  -9.43207244e-03 -1.16249461e-12]\n [ 1.86852321e+00 -1.42033301e+00  1.23674495e-01 ...  2.85634458e-02\n   2.13734846e-02 -2.92247919e-13]\n [ 1.78069560e+00 -6.75060179e-01 -7.31259179e-01 ...  5.53506048e-03\n   2.15628745e-03 -1.56198277e-12]\n ...\n [ 2.00350774e+00 -3.63942297e+00 -1.87451963e+00 ...  1.76194346e-01\n  -2.61901427e-02  3.58573041e-12]\n [ 5.11008136e-02 -1.05869012e+00 -2.55586066e+00 ...  7.92424281e-02\n  -4.88649412e-02 -7.00359148e-12]\n [ 6.30703303e-01  1.25498085e+00 -2.37715116e+00 ...  1.25566938e-02\n  -1.50273539e-02  2.09849158e-12]]\n\n\nBut, we need to find the optimal components of the data that best describes the data through the explained variance ratio, hence, we use the explained variance ratio and define our own threshold and see.\n\nevr= pca1.explained_variance_ratio_\ncum_var = np.cumsum(pca1.explained_variance_ratio_)\noptimal = np.argmax(cum_var &gt;= 0.75) + 1\n\nprint(\"Optimal Number of Components:\", optimal)\n\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(cum_var) + 1 ), cum_var, linestyle='--')\nplt.xlabel('Components')\nplt.ylabel('Explained Variance Ratio (cumulative)')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\nOptimal Number of Components: 4\n\n\n\n\n\nThis shows me that the optimal number of components are 4 that attempts to explain at least 75% of the data. I have used ‘Scree Plot’ which visually showcases for a threshold of 0.75. Since we know the optimal components of the data, we can calculate the PCA\n\npca2 = PCA(n_components=4)\npca_optimal2 = pca2.fit_transform(x)\n\nevr2 = pca2.explained_variance_ratio_\ncev2 = np.cumsum(evr2)\n\nprint(pca_optimal2[0:10])\n\n[[ 0.76257197 -0.6260432  -0.23086609 -2.59040608]\n [ 1.86852321 -1.42033301  0.1236745  -1.00166474]\n [ 1.7806956  -0.67506018 -0.73125918 -0.66213051]\n [ 1.73581487  0.08114664  0.88863619 -2.10613841]\n [ 1.91751146 -0.02151058 -0.62973654 -0.38327002]\n [ 2.71648514 -0.68755858  1.03310853 -0.8007282 ]\n [ 1.97349223  0.24045813 -0.25631107 -0.67853068]\n [ 1.42712716  0.85358937 -0.9723162  -0.45607911]\n [ 1.35839281  1.90954496  0.73221295 -1.18362437]\n [ 1.94311949  2.67844446  0.0827333   0.30600975]]\n\n\nThe following are the first few values of the pca.\n\npcadf = pd.DataFrame(data=pca_optimal2, index=x.index, columns= ['PC1','PC2', 'PC3','PC4'])\npcadf.head(10)\n\n\n\n\n\n\n\n\nPC1\nPC2\nPC3\nPC4\n\n\n\n\n0\n0.762572\n-0.626043\n-0.230866\n-2.590406\n\n\n1\n1.868523\n-1.420333\n0.123674\n-1.001665\n\n\n2\n1.780696\n-0.675060\n-0.731259\n-0.662131\n\n\n3\n1.735815\n0.081147\n0.888636\n-2.106138\n\n\n4\n1.917511\n-0.021511\n-0.629737\n-0.383270\n\n\n5\n2.716485\n-0.687559\n1.033109\n-0.800728\n\n\n6\n1.973492\n0.240458\n-0.256311\n-0.678531\n\n\n7\n1.427127\n0.853589\n-0.972316\n-0.456079\n\n\n8\n1.358393\n1.909545\n0.732213\n-1.183624\n\n\n9\n1.943119\n2.678444\n0.082733\n0.306010\n\n\n\n\n\n\n\n\n\nprint(\"Explained Variance Ratio for Each Component:\")\nprint(evr2*100)\n\nprint(\"\\nCumulative Explained Variance:\")\nprint(cev2*100)\n\ne = pca2.explained_variance_ratio_\n\n# Print overall explained variance ratio\nprint(\"Overall Explained Variance Ratio:\", sum(e)*100)\n\nfrom sklearn.metrics import silhouette_samples\n\nsil_val = silhouette_samples(pca_optimal2, y)\nprint(sil_val[0:10])\n\navg_sil_score = np.mean(sil_val)\nprint(f\"Average Silhouette Score for PCA: {avg_sil_score}\")\n\n\n\n\nExplained Variance Ratio for Each Component:\n[34.22972792 22.08761959 14.72048604 11.766315  ]\n\nCumulative Explained Variance:\n[34.22972792 56.31734751 71.03783355 82.80414855]\nOverall Explained Variance Ratio: 82.80414854824097\n[-0.07892657 -0.02874872 -0.09320622 -0.16876901 -0.11519626  0.04725516\n -0.13561769 -0.0658181  -0.15181648  0.02498319]\nAverage Silhouette Score for PCA: -0.09704378289382186\n\n\nAs we have put in our threshold of 0.75, we see that the overall explained variance ratio, which talks about the proportion of variance captured by the dataset is 82%. You see even for each component, there are few points that perform better than the other.\n\n\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(e) + 1), cev2, marker='o', linestyle='--')\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\n\n\n\n\nHere, we see that the the optimal performance was for 4. As the components keep increasing, so did the explained cumulative values.\n\n\nplt.figure(figsize=(10, 10))\n\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('Reduced-Dimensional Data with PCA')\nplt.legend()\nplt.show()\n\n\n\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_46417/3805980677.py:5: UserWarning:\n\nNo data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n\n\n\n\n\n\nHere, we see that for PCA, the clustering looks differentiable enough in some places but overall just overlapping each other. Although the explained variance ratio is around 82%, one of the interesting parts is how as we iterate through each component, we see that explained variance ratio is as minimal as 10% and as high as 80%. But if we look at the components by itself, like PCA1, PCA2, etc, first PCA performs the best. So, cumulatively, they’re almost attempting to capture the variance through the divide and conquer policy. Economic data is extremely highly dimensional, and hence it has done a good job in figuring out the differences."
  },
  {
    "objectID": "info/dimensionalityreduction.html#t-distributed-stochastic-neighbor-embedding-t-sne",
    "href": "info/dimensionalityreduction.html#t-distributed-stochastic-neighbor-embedding-t-sne",
    "title": "Introduction to Dimensionality Reduction",
    "section": "T-distributed Stochastic Neighbor Embedding (t-SNE)",
    "text": "T-distributed Stochastic Neighbor Embedding (t-SNE)\nThe T-distributed Stochastic Neighbor Embedding, also called as t-SNE is another dimensionality reduction technique that focuses on data separation when the data cannot be linearly separated or rather, by a straight line. It helps us understand how the data is arranged and to understand the underlying patterns in the dataset. As t-SNE uses probability distribution to map similar data points, and keep the dissimilar ones apart; it does using the Kullback-Leibler divergence between the low and high dimensional embedding. However, t-SNE with different initialisations can get us different results, due to which although preserves the structure of the original data, we still need to aware of our initial value.\n\nperplex_values = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 100]\n\nfor p in perplex_values:\n    tsne = TSNE(n_components=2, perplexity=p, random_state=2339)\n    X = tsne.fit_transform(x)\n    \n    avg = silhouette_score(X, y)\n    \n    print(f\"Perplexity {p}: Silhouette Score = {avg}\")\n\nPerplexity 1: Silhouette Score = -0.08198484778404236\nPerplexity 2: Silhouette Score = -0.055559705942869186\nPerplexity 3: Silhouette Score = -0.06099412217736244\nPerplexity 4: Silhouette Score = -0.06829451769590378\nPerplexity 5: Silhouette Score = -0.0636918768286705\nPerplexity 10: Silhouette Score = -0.06911653280258179\nPerplexity 15: Silhouette Score = -0.09194755554199219\nPerplexity 20: Silhouette Score = -0.08281858265399933\nPerplexity 25: Silhouette Score = -0.08434560894966125\nPerplexity 30: Silhouette Score = -0.0772019475698471\nPerplexity 35: Silhouette Score = -0.09676646441221237\nPerplexity 40: Silhouette Score = -0.11943919956684113\nPerplexity 45: Silhouette Score = -0.06866727024316788\nPerplexity 50: Silhouette Score = -0.1278223693370819\nPerplexity 55: Silhouette Score = -0.09298355877399445\nPerplexity 60: Silhouette Score = -0.08441784232854843\nPerplexity 100: Silhouette Score = -0.0959368422627449\n\n\n\nval = [2, 50, 100]\n\n# Create subplots to compare t-SNE results with different perplexities\nplt.figure(figsize=(15, 5))\n\nfor i, p in enumerate(val, 1):\n    tsne = TSNE(n_components=3, perplexity=p, random_state=2339)\n    X_tsne = tsne.fit_transform(x)\n\n    plt.subplot(1, len(val), i)\n    plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\n    plt.title(f't-SNE with Perplexity {p}')\n    plt.xlabel('t-SNE Component 1')\n    plt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\nThe hyperparameter choice is perplexity in t-SNE, that controls the balance in preserving both local and glocal structure in a low-dimensional embedding. A higher perplexity value usually focuses on the global structure and lower perplexity on the local structure. As the choice of perplexity can really affect the choice of the output, it is often important to choose the optimal perplexity value which the code above attempts to achieve.\nAll values of perplexity are negative in nature, and shows that all the clusters are going to overlap each other. This suggests poor separation between the clusters. This showcases the importance of the nature of the dataset, maybe due to the inherent structure of the data or due to the fact that there are outliers which cannot be removed when it comes to economic data.\nBut here, it shows, perplexity value of 2 is closer to one so we will choose that.\n\ntsne = TSNE(n_components=3, perplexity=2, random_state=42)\nX_tsne = tsne.fit_transform(x)\n\nsil_tsne = silhouette_samples(X_tsne, y)\nprint(sil_tsne[0:10])\n\navg_tsne_score = np.mean(sil_tsne)\nprint(f\"Average Silhouette Score for t-SNE: {avg_tsne_score}\")\n\n[ 0.00318419  0.01473387 -0.02172711 -0.16240974  0.00434295  0.08726601\n -0.06315608  0.04417509  0.05092624 -0.14183001]\nAverage Silhouette Score for t-SNE: -0.06379585713148117\n\n\n\nplt.figure(figsize=(10, 6))\nplt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title(f't-SNE with Perplexity {2}')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\nHere, we see that t-SNE has done an extremely bad job in predicting the clusters as there is no relation of each other with one another.\n\nPCA vs t-SNE\n\nplt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('Reduced-Dimensional Data with PCA')\nplt.legend()\nplt.show()\n\nplt.subplot(1, 2, 2)\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(X_tsne[indices, 0], X_tsne[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\n# Adding legend\nplt.legend()\n\nplt.title(f't-SNE with Perplexity {2}')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_46417/2199779955.py:6: UserWarning:\n\nNo data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_46417/2199779955.py:17: UserWarning:\n\nNo data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n\n\n\n\n\n\n\n\n\n\n\nPCA vs t-SNE- the curse of dimensionality continued?\nKeeping in mind the fact that dimensionality can improve the model, there are often instances when utilising dimensionality techniques as a feature extraction method does not help the data in itself. This fundamentally showcases the importance of having a good dataset and choosing the feature selection/extraction methods on basis of your dataset’s requirements.\nHowever, if you look at both PCA and t-SNE, in terms of effectiveness, PCA’s CMV or cumulative explained variance ratio is around 82%. One of the problems with t-SNE through my research is that there is no proper metric in my current range of understanding that numerically quanitfies t-SNE well. But, in terms of the silhoute score, either we should calculate for each point and then do the sum of it, or play around with the data. But in terms of the calculation, what I had done for both of them was looking at ‘y’, which is the label value and essentially find out silhoutte scores for each component of the transformed variable and then you find the average of it.\n\nprint(f\"Average Silhouette Score for t-SNE: {avg_tsne_score}\")\nprint(f\"Average Silhouette Score for PCA: {avg_sil_score}\")\n\nAverage Silhouette Score for t-SNE: -0.06379585713148117\nAverage Silhouette Score for PCA: -0.09704378289382186\n\n\nIf you look at the silhoutte scores, we see that t-SNE actually seems to perform better than PCA but visualisation wise, I see more clustering for PCA than t-SNE.\nIn terms of the quality of the cluster-separation, we see that both do a bad job at that since all the clusters are overlapping each other. Although PCA is effective for linear relationships and t-SNE is powerful in capturing the non-linear relationships of the data, both do not do a good job with clustering of my economic data. The reason being is in my opinion, the dataset is not that huge and most of the data is correlated to one another.\nAs PCA is suiltable for larger datasets and t-SNE is suitable for smaller datasets, I wanted to attempt the combined approach\n\n\n\n# t-sne on pca\ntsne_on_pca = TSNE(n_components=3, perplexity=2, random_state=42)\ntsne_pca = tsne_on_pca.fit_transform(pca_optimal2)\n\n# pca on t-sne\npca_on_tsne = PCA(n_components=3)\npca_tsne = pca_on_tsne.fit_transform(tsne_pca)\n\n# Visualize PCA and t-SNE plots together\nplt.figure(figsize=(15, 5))\n\n# orginal pca \nplt.subplot(1, 3, 1)\nplt.scatter(pca_optimal2[:, 0], pca_optimal2[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('Original PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# t-sne on pca\nplt.subplot(1, 3, 2)\nplt.scatter(tsne_pca[:, 0], tsne_pca[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('t-SNE on PCA')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\n# pca on t-sne\nplt.subplot(1, 3, 3)\nplt.scatter(pca_tsne[:, 0], pca_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('PCA on t-SNE')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\nWe can see that, using the combined approach really just messed the data within itself that that pca by itself is the best option to go with.\nTo summarise, the decision between PCA and t-SNE is influenced by the type of the data, the size of the dataset, and the specific goals of the research. Both strategies yield useful insights, and a well-considered mix of both methods can provide a more comprehensive knowledge of complex datasets. Yet, for mine, neither worked.\nSources:\nDimensionality Reduction\n\nhttps://www.geeksforgeeks.org/dimensionality-reduction/\n\nPCA:\n\nhttps://jfh.georgetown.domains/dsan5000/slides-and-labs/_site/content/slides/dimensionality-reduction/notes.html\nhttps://www.stat.cmu.edu/~larry/=sml/dimension_reduction.pdf\nhttps://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html\nhttps://stats.stackexchange.com/questions/376981/cumulative-sum-of-pca-explained-variance-greater-than-1\nhttps://github.com/scikit-learn/scikit-learn/issues/22974\nhttps://jakevdp.github.io/PythonDataScienceHandbook/05.09-principal-component-analysis.html\nhttps://www.researchgate.net/figure/A-scree-plot-for-explained-variance-and-eigenvalues-for-the-ten-Principal-Components_fig1_338833359\n\nTSNE:\n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html\nhttps://jfh.georgetown.domains/dsan5000/slides-and-labs/_site/content/slides/dimensionality-reduction/notes.html#t-distributed-stochastic-neighbor-embedding."
  },
  {
    "objectID": "codes/EDA.html",
    "href": "codes/EDA.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "In BRICS countries, exploratory data analysis (EDA) is a critical procedure for analysing economic data. It assists academics and policymakers in learning about economic trends, inequities, and anomalies. EDA allows for the comparison of economic indicators across different countries, assisting in the assessment of their relative economic performance. It provides vital information for informed decision-making in sectors such as trade, investment, and policy formulation by exposing hidden links and correlations. Additionally, it is critical in a dynamic economic landscape for understanding the complexities of economic data, guiding strategies, and encouraging sustainable growth and collaboration among the BRICS members.\nFor my data, EDA is the only method to uncover the hidden insights within the dataset that will help me explore the data in comparison to all the nations at hand.\n\nimport  pandas  as  pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport missingno as msno\n\n\nindia=pd.read_csv('../data/india.csv')\nrussia=pd.read_csv('../data/russia.csv')\nchina=pd.read_csv('../data/china.csv')\nbrazil=pd.read_csv('../data/brazil.csv')\nsouthafrica=pd.read_csv('../data/southafrica.csv')\n\nI created and treated five separate datasets. In terms of India, you see that there is a greater variation in Exports and Imports as a % of GDP and in Trade GDP. This is due to the developing nature of India, being one of the fastest growing economies of the world.\n\nindia.describe()\n\n\n\n\n\n\n\n\nyear\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\n...\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\n\n\n\n\ncount\n43.000000\n43.000000\n4.300000e+01\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n...\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n43.000000\n\n\nmean\n2000.000000\n5.842249\n9.089853e+11\n10.100195\n3.177411\n16.975547\n-1.348015\n14.313641\n9.439492\n20.750216\n...\n30.948268\n73.732095\n7.656467\n5.631990\n13.114440\n62.858024\n14.942512\n27.081472\n2.901476\n2000.000000\n\n\nstd\n12.556539\n3.928440\n6.357574e+11\n0.737280\n0.360385\n6.502949\n1.209384\n6.769738\n9.631641\n4.938651\n...\n14.657456\n58.271793\n3.027370\n2.572440\n3.092273\n5.115946\n1.271353\n6.641309\n0.439018\n12.556539\n\n\nmin\n1979.000000\n-6.952693\n2.413109e+11\n8.055168\n2.600000\n6.418183\n-5.004890\n5.196222\n-9.135286\n11.096107\n...\n12.219272\n9.737409\n3.328173\n-1.983859\n8.333350\n53.611000\n11.376034\n13.780033\n2.424285\n1979.000000\n\n\n25%\n1989.500000\n4.152437\n3.949670e+11\n9.733032\n3.080000\n11.701860\n-1.902352\n7.773796\n4.728976\n17.849354\n...\n16.246994\n24.540550\n4.927595\n4.406809\n10.270833\n58.853500\n14.600384\n23.190785\n2.563654\n1989.500000\n\n\n50%\n2000.000000\n5.842249\n6.759609e+11\n10.347631\n3.080000\n17.400965\n-1.339509\n12.997236\n7.792389\n20.201660\n...\n26.900923\n56.391926\n7.164252\n5.814777\n12.541667\n62.858024\n15.145108\n27.081472\n2.812528\n2000.000000\n\n\n75%\n2010.500000\n8.350734\n1.284807e+12\n10.621234\n3.210531\n22.549359\n-0.800226\n20.164174\n14.331228\n22.921025\n...\n44.642326\n114.073666\n9.748438\n7.597561\n16.500000\n67.074500\n15.561610\n31.898042\n3.131583\n2010.500000\n\n\nmax\n2021.000000\n12.397011\n2.367047e+12\n11.088283\n4.290000\n26.670888\n1.443561\n25.430861\n31.396073\n33.157433\n...\n55.793722\n205.266241\n13.870246\n9.191247\n18.916667\n70.910000\n17.227670\n40.936291\n4.231318\n2021.000000\n\n\n\n\n8 rows × 35 columns\n\n\n\n\nindia.info() # the data is in correct format except year since it will later be dropped but we need it for analysis now.\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 43 entries, 0 to 42\nData columns (total 36 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   year                           43 non-null     int64  \n 1   adj_NNI_g                      43 non-null     float64\n 2   adj_NNI_c                      43 non-null     float64\n 3   adj_savings_fix_cap_GNI        43 non-null     float64\n 4   adj_savings_edu_GNI            43 non-null     float64\n 5   adj_NNS_GNI                    43 non-null     float64\n 6   curr_acc_bal                   43 non-null     float64\n 7   ex_imp_gdp                     43 non-null     float64\n 8   ex_imp_growth                  43 non-null     float64\n 9   ex_debt_shocks                 43 non-null     float64\n 10  final_consump_exp_gdp          43 non-null     float64\n 11  final_consump_exp_growth       43 non-null     float64\n 12  fdi_net_inflows                43 non-null     float64\n 13  fdi_net_outflows               43 non-null     float64\n 14  gdp_growth                     43 non-null     float64\n 15  gdp_per_capita_growth          43 non-null     float64\n 16  gener_govt_fin_consump_exp     43 non-null     float64\n 17  gni_growth                     43 non-null     float64\n 18  goods_exp_bop                  43 non-null     float64\n 19  goods_imp_bop                  43 non-null     float64\n 20  imports_goods_services_gdp     43 non-null     float64\n 21  imports_goods_services_growth  43 non-null     float64\n 22  services_gdp                   43 non-null     float64\n 23  services_growth                43 non-null     float64\n 24  short_term_debt_tot_reserves   43 non-null     float64\n 25  trade_gdp                      43 non-null     float64\n 26  cpi                            43 non-null     float64\n 27  inflation                      43 non-null     float64\n 28  real_interest_rate             43 non-null     float64\n 29  lending_interest_rate          43 non-null     float64\n 30  life_exp_birth                 43 non-null     float64\n 31  expense_gdp                    43 non-null     float64\n 32  interest_payments              43 non-null     float64\n 33  military expenditure           43 non-null     float64\n 34  year.1                         43 non-null     int64  \n 35  labels                         42 non-null     object \ndtypes: float64(33), int64(2), object(1)\nmemory usage: 12.2+ KB\n\n\nFor Russia, if you see, there were periods in Russia where they were in deficit to the times they in surplus showcasing their evolultion as a nature with the economic and geopolitical wars Russia engages in. In terms of the Adjusted Savings as a % of GNI, you also see the huge difference and a huge variation in the dataset. It talks a reduction in their education expenses due to which they have it as a savings in their GNI% category. Inflation, Lending Interest Rate are also shown to be extremely volatile in nature, thus showcasing their non-linear nature of spending habits and the state of their economy.\n\nrussia.describe()\n\n\n\n\n\n\n\n\nyear\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\n...\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\n\n\n\n\ncount\n29.000000\n29.000000\n2.900000e+01\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n...\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n29.000000\n\n\nmean\n2008.000000\n3.861741\n8.291734e+11\n3.927901\n17.793590\n3.720208\n28.294512\n10.513962\n5.655151\n30.589212\n...\n52.635377\n2.534344\n35.634946\n52.396738\n87.843702\n32.123031\n0.120247\n68.190967\n3.758945\n2008.000000\n\n\nstd\n8.514693\n10.236271\n2.921181e+11\n10.384020\n10.665802\n0.299095\n3.452955\n11.810984\n4.118602\n4.933515\n...\n2.821579\n5.021355\n36.505148\n6.405027\n61.438903\n64.958295\n8.320392\n2.703291\n0.557789\n8.514693\n\n\nmin\n1994.000000\n-20.796923\n3.281460e+11\n-20.769775\n9.545284\n3.544344\n20.202553\n-19.694782\n-0.206268\n24.729842\n...\n44.832608\n-10.125699\n10.364800\n43.774114\n2.128943\n2.878297\n-18.951553\n64.467073\n2.732649\n1994.000000\n\n\n25%\n2001.000000\n-1.349856\n5.790573e+11\n-1.485800\n11.784852\n3.549808\n27.117473\n10.513962\n2.369115\n27.111097\n...\n50.658271\n-0.636282\n13.365498\n47.801341\n37.365785\n6.849392\n-4.078692\n65.529756\n3.331237\n2001.000000\n\n\n50%\n2008.000000\n3.861741\n9.051567e+11\n3.927901\n13.503027\n3.557456\n28.294512\n14.094360\n4.754527\n29.215561\n...\n53.428806\n2.447491\n16.480539\n50.557744\n83.826166\n11.647330\n0.120247\n67.949268\n3.720451\n2008.000000\n\n\n75%\n2015.000000\n10.726779\n1.097922e+12\n11.149953\n17.793590\n3.720208\n29.714409\n17.784660\n7.952329\n33.730475\n...\n54.172944\n5.539901\n38.844163\n55.772253\n131.155273\n20.798761\n4.945604\n70.578780\n4.039809\n2015.000000\n\n\nmax\n2022.000000\n22.534768\n1.157478e+12\n23.051254\n48.011109\n4.413240\n37.116967\n22.081369\n17.474242\n44.060441\n...\n57.012325\n13.621542\n136.909949\n69.393281\n199.372063\n307.722636\n19.616081\n73.083902\n5.425148\n2022.000000\n\n\n\n\n8 rows × 35 columns\n\n\n\n\nrussia.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 29 entries, 0 to 28\nData columns (total 36 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   year                           29 non-null     int64  \n 1   adj_NNI_g                      29 non-null     float64\n 2   adj_NNI_c                      29 non-null     float64\n 3   adj_savings_fix_cap_GNI        29 non-null     float64\n 4   adj_savings_edu_GNI            29 non-null     float64\n 5   adj_NNS_GNI                    29 non-null     float64\n 6   curr_acc_bal                   29 non-null     float64\n 7   ex_imp_gdp                     29 non-null     float64\n 8   ex_imp_growth                  29 non-null     float64\n 9   ex_debt_shocks                 29 non-null     float64\n 10  final_consump_exp_gdp          29 non-null     float64\n 11  final_consump_exp_growth       29 non-null     float64\n 12  fdi_net_inflows                29 non-null     float64\n 13  fdi_net_outflows               29 non-null     float64\n 14  gdp_growth                     29 non-null     float64\n 15  gdp_per_capita_growth          29 non-null     float64\n 16  gener_govt_fin_consump_exp     29 non-null     float64\n 17  gni_growth                     29 non-null     float64\n 18  goods_exp_bop                  29 non-null     float64\n 19  goods_imp_bop                  29 non-null     float64\n 20  imports_goods_services_gdp     29 non-null     float64\n 21  imports_goods_services_growth  29 non-null     float64\n 22  services_gdp                   29 non-null     float64\n 23  services_growth                29 non-null     float64\n 24  short_term_debt_tot_reserves   29 non-null     float64\n 25  trade_gdp                      29 non-null     float64\n 26  cpi                            29 non-null     float64\n 27  inflation                      29 non-null     float64\n 28  real_interest_rate             29 non-null     float64\n 29  lending_interest_rate          29 non-null     float64\n 30  life_exp_birth                 29 non-null     float64\n 31  expense_gdp                    29 non-null     float64\n 32  interest_payments              29 non-null     float64\n 33  military expenditure           29 non-null     float64\n 34  year.1                         29 non-null     int64  \n 35  labels                         28 non-null     object \ndtypes: float64(33), int64(2), object(1)\nmemory usage: 8.3+ KB\n\n\nChina, personally has been one of the most interesting nations to learn about as most of the data that China shares with people is also the data it “chooses” to share. The book of Silk Route has shows China in from a fascinating point of view. If you look at China, there is not much of volatile relations to be seen in China. The way they function being a manufacturing nation has been non-volatile primarily depending on their masses as it is a labour-intensive nation that is now emerging to steer towards knowledge management. One of my most favorite nations from an economics lens.\n\nchina.describe()\n\n\n\n\n\n\n\n\nyear\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\n...\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\n\n\n\n\ncount\n34.000000\n34.000000\n3.400000e+01\n34.000000\n3.400000e+01\n34.000000\n34.000000\n34.000000\n34.000000\n34.000000\n...\n34.000000\n34.000000\n34.000000\n34.000000\n34.000000\n34.000000\n34.000000\n34.000000\n34.000000\n34.000000\n\n\nmean\n2005.500000\n9.020550\n5.132355e+12\n16.290555\n1.013829e+12\n1.774727\n43.537202\n27.237859\n2.643568\n21.768803\n...\n42.792335\n9.143661\n25.335231\n40.718724\n90.500166\n4.287894\n1.955882\n73.560848\n9.693714\n2005.500000\n\n\nstd\n9.958246\n3.063379\n2.753216e+12\n5.047229\n1.176837e+12\n0.098320\n4.676922\n4.451970\n2.597303\n6.628568\n...\n7.114816\n2.918800\n11.593431\n11.671459\n26.687641\n5.787973\n3.226872\n3.291144\n3.867794\n9.958246\n\n\nmin\n1989.000000\n0.043030\n1.227478e+12\n9.402707\n3.274752e+10\n1.500000\n35.858594\n18.788405\n-2.610340\n9.027345\n...\n32.382773\n1.947122\n7.615140\n19.134707\n39.242469\n-1.401473\n-7.989744\n67.838000\n4.772260\n1989.000000\n\n\n25%\n1997.250000\n7.953956\n2.787246e+12\n12.756853\n1.233250e+11\n1.787135\n39.537538\n24.090842\n1.507681\n18.359073\n...\n35.927687\n8.277122\n18.020955\n34.340981\n80.755872\n1.476052\n-0.117685\n70.797000\n5.973111\n1997.250000\n\n\n50%\n2005.500000\n9.020550\n5.132355e+12\n14.564874\n3.661130e+11\n1.790000\n43.716609\n27.359017\n2.108668\n20.128060\n...\n42.138080\n9.368637\n23.923220\n37.888116\n87.222774\n2.519473\n2.579420\n73.929500\n10.208033\n2005.500000\n\n\n75%\n2013.750000\n10.723327\n6.609833e+12\n20.891664\n1.725745e+12\n1.790000\n47.236811\n30.986592\n3.427569\n25.306856\n...\n47.923306\n10.388286\n30.183370\n47.886736\n112.760046\n4.568735\n3.748206\n76.387000\n13.169320\n2013.750000\n\n\nmax\n2022.000000\n15.198015\n1.049563e+13\n26.143102\n3.816893e+12\n2.035901\n51.547499\n35.188528\n9.947890\n36.035026\n...\n54.458536\n16.071495\n55.930751\n64.478884\n131.919357\n24.256990\n7.356478\n78.211000\n16.867626\n2022.000000\n\n\n\n\n8 rows × 35 columns\n\n\n\n\nchina.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 34 entries, 0 to 33\nData columns (total 36 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   year                           34 non-null     int64  \n 1   adj_NNI_g                      34 non-null     float64\n 2   adj_NNI_c                      34 non-null     float64\n 3   adj_savings_fix_cap_GNI        34 non-null     float64\n 4   adj_savings_edu_GNI            34 non-null     float64\n 5   adj_NNS_GNI                    34 non-null     float64\n 6   curr_acc_bal                   34 non-null     float64\n 7   ex_imp_gdp                     34 non-null     float64\n 8   ex_imp_growth                  34 non-null     float64\n 9   ex_debt_shocks                 34 non-null     float64\n 10  final_consump_exp_gdp          0 non-null      float64\n 11  final_consump_exp_growth       34 non-null     float64\n 12  fdi_net_inflows                34 non-null     float64\n 13  fdi_net_outflows               34 non-null     float64\n 14  gdp_growth                     34 non-null     float64\n 15  gdp_per_capita_growth          34 non-null     float64\n 16  gener_govt_fin_consump_exp     34 non-null     float64\n 17  gni_growth                     34 non-null     float64\n 18  goods_exp_bop                  34 non-null     float64\n 19  goods_imp_bop                  0 non-null      float64\n 20  imports_goods_services_gdp     34 non-null     float64\n 21  imports_goods_services_growth  34 non-null     float64\n 22  services_gdp                   34 non-null     float64\n 23  services_growth                34 non-null     float64\n 24  short_term_debt_tot_reserves   0 non-null      float64\n 25  trade_gdp                      34 non-null     float64\n 26  cpi                            34 non-null     float64\n 27  inflation                      34 non-null     float64\n 28  real_interest_rate             34 non-null     float64\n 29  lending_interest_rate          34 non-null     float64\n 30  life_exp_birth                 34 non-null     float64\n 31  expense_gdp                    34 non-null     float64\n 32  interest_payments              34 non-null     float64\n 33  military expenditure           34 non-null     float64\n 34  year.1                         34 non-null     int64  \n 35  labels                         34 non-null     object \ndtypes: float64(33), int64(2), object(1)\nmemory usage: 9.7+ KB\n\n\nSouth Africa has been a country with intense socio-political changes. Due to which the deviations seen from this nation can be quite altering. The inflation and the lending interest rates show us the economy has always been in recession most of the time, often asking for foreign aid from other developed nations. Yet, South Africa, due to this labour and natural capital is now emerging to be one of the competing nations.\n\nsouthafrica.describe()\n\n\n\n\n\n\n\n\nyear\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\n...\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\n\n\n\n\ncount\n50.00000\n50.000000\n5.000000e+01\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n...\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.00000\n\n\nmean\n1997.50000\n2.944993\n1.726618e+11\n1.019058\n14.617378\n5.340494\n19.599354\n4.980877\n-0.977091\n25.449196\n...\n57.961911\n2.920324\n119.946081\n48.797300\n62.701001\n8.937808\n3.317721\n60.457939\n2.295429\n1997.50000\n\n\nstd\n14.57738\n4.186829\n7.426311e+10\n4.208455\n1.600373\n0.483089\n5.516894\n5.373903\n2.918324\n3.539869\n...\n5.748344\n2.180185\n61.294859\n7.353538\n53.653821\n4.429910\n4.321426\n3.316655\n1.372066\n14.57738\n\n\nmin\n1973.00000\n-6.105116\n8.169750e+10\n-8.844539\n12.005429\n4.600000\n13.810482\n-0.595410\n-5.586817\n18.955147\n...\n46.894611\n-4.398186\n60.145736\n34.321353\n2.896167\n-0.692030\n-11.009011\n53.980000\n0.739894\n1973.00000\n\n\n25%\n1985.25000\n0.866885\n1.031776e+11\n-0.602860\n13.568121\n5.039765\n15.241517\n1.154841\n-2.950219\n22.578834\n...\n52.237073\n1.572643\n87.004999\n43.553642\n13.055219\n5.424068\n1.939067\n58.122000\n1.035020\n1985.25000\n\n\n50%\n1997.50000\n2.923929\n1.612442e+11\n0.828012\n14.160999\n5.130000\n17.501936\n3.362576\n-1.163550\n25.792956\n...\n60.182314\n2.983437\n119.946081\n48.838556\n52.323241\n8.639113\n3.610582\n60.869000\n1.555722\n1997.50000\n\n\n75%\n2009.75000\n4.908132\n2.438179e+11\n3.076031\n15.655139\n5.614009\n22.769737\n5.869842\n1.181907\n27.709766\n...\n63.379119\n4.425018\n119.946081\n54.093948\n99.017739\n12.660460\n4.930434\n63.044000\n3.632120\n2009.75000\n\n\nmax\n2022.00000\n15.909859\n2.991770e+11\n13.825588\n18.693445\n6.600000\n33.709562\n21.039421\n5.287891\n33.443871\n...\n64.716759\n6.939034\n462.705392\n65.974524\n183.682744\n18.654919\n12.691034\n66.175000\n5.263335\n2022.00000\n\n\n\n\n8 rows × 35 columns\n\n\n\n\nsouthafrica.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 0 to 49\nData columns (total 36 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   year                           50 non-null     int64  \n 1   adj_NNI_g                      50 non-null     float64\n 2   adj_NNI_c                      50 non-null     float64\n 3   adj_savings_fix_cap_GNI        50 non-null     float64\n 4   adj_savings_edu_GNI            50 non-null     float64\n 5   adj_NNS_GNI                    50 non-null     float64\n 6   curr_acc_bal                   50 non-null     float64\n 7   ex_imp_gdp                     50 non-null     float64\n 8   ex_imp_growth                  50 non-null     float64\n 9   ex_debt_shocks                 50 non-null     float64\n 10  final_consump_exp_gdp          50 non-null     float64\n 11  final_consump_exp_growth       50 non-null     float64\n 12  fdi_net_inflows                50 non-null     float64\n 13  fdi_net_outflows               50 non-null     float64\n 14  gdp_growth                     50 non-null     float64\n 15  gdp_per_capita_growth          50 non-null     float64\n 16  gener_govt_fin_consump_exp     50 non-null     float64\n 17  gni_growth                     50 non-null     float64\n 18  goods_exp_bop                  50 non-null     float64\n 19  goods_imp_bop                  50 non-null     float64\n 20  imports_goods_services_gdp     50 non-null     float64\n 21  imports_goods_services_growth  50 non-null     float64\n 22  services_gdp                   50 non-null     float64\n 23  services_growth                50 non-null     float64\n 24  short_term_debt_tot_reserves   50 non-null     float64\n 25  trade_gdp                      50 non-null     float64\n 26  cpi                            50 non-null     float64\n 27  inflation                      50 non-null     float64\n 28  real_interest_rate             50 non-null     float64\n 29  lending_interest_rate          50 non-null     float64\n 30  life_exp_birth                 50 non-null     float64\n 31  expense_gdp                    50 non-null     float64\n 32  interest_payments              50 non-null     float64\n 33  military expenditure           50 non-null     float64\n 34  year.1                         50 non-null     int64  \n 35  labels                         41 non-null     object \ndtypes: float64(33), int64(2), object(1)\nmemory usage: 14.2+ KB\n\n\nBrazil’s economic context various in accordance to the time, with periods of normal growth and periods of high growth, that also states the nature of it’s geo-political reign. If you look at the indicators, the Adjusted Savings for Fixed Capital and Trade GDP are interesting to look at.\n\nbrazil.describe()\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear\n\n\n\n\ncount\n50.000000\n5.000000e+01\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n50.000000\n...\n50.000000\n50.000000\n50.000000\n50.000000\n5.000000e+01\n50.000000\n50.000000\n50.000000\n50.000000\n50.00000\n\n\nmean\n2.858273\n9.927705e+11\n1.270081\n10.750257\n4.457679\n17.787293\n7.006470\n-2.259920\n11.170290\n6.063046\n...\n53.893826\n3.464068\n84.382637\n22.197876\n6.731385e+01\n280.265403\n38.892255\n68.136286\n1.596424\n1997.50000\n\n\nstd\n5.537414\n3.618374e+11\n5.374688\n0.495756\n0.988642\n3.798667\n3.663059\n2.017774\n3.329268\n7.934414\n...\n9.139374\n3.591394\n86.860088\n5.873609\n5.793798e+01\n591.724093\n10.483542\n5.049809\n0.337717\n14.57738\n\n\nmin\n-13.457070\n4.678463e+11\n-15.009283\n9.925297\n2.800000\n11.179231\n0.949568\n-6.014062\n6.692986\n-10.574251\n...\n38.714484\n-3.738107\n8.731629\n14.390878\n3.572040e-10\n3.195076\n16.728245\n58.472000\n1.053422\n1973.00000\n\n\n25%\n0.329104\n6.674528e+11\n-1.043909\n10.453263\n3.806250\n14.939308\n4.276090\n-3.729127\n8.317338\n0.483849\n...\n43.356767\n1.590630\n21.868827\n16.658106\n2.911174e-01\n6.235493\n35.108576\n64.308500\n1.368802\n1985.25000\n\n\n50%\n2.888449\n9.484250e+11\n1.270081\n10.624243\n4.345000\n18.026720\n7.006470\n-2.545527\n10.866948\n5.625319\n...\n57.590546\n3.012630\n61.252703\n21.441260\n6.731385e+01\n11.997513\n38.892255\n68.611000\n1.521730\n1997.50000\n\n\n75%\n5.450817\n1.315305e+12\n3.548577\n10.981732\n5.082500\n19.508526\n8.286224\n-0.394964\n13.232901\n11.656455\n...\n60.452174\n5.030491\n93.389959\n25.977764\n9.880075e+01\n280.265403\n38.892255\n72.741250\n1.832601\n2009.75000\n\n\nmax\n22.343467\n1.629388e+12\n20.413400\n12.111642\n6.285939\n33.988799\n23.294785\n1.559017\n20.045538\n22.614292\n...\n73.337880\n15.641424\n437.374535\n39.339994\n2.044821e+02\n2947.732772\n77.616838\n75.338000\n2.686250\n2022.00000\n\n\n\n\n8 rows × 34 columns\n\n\n\n\nbrazil.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 0 to 49\nData columns (total 35 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   adj_NNI_g                      50 non-null     float64\n 1   adj_NNI_c                      50 non-null     float64\n 2   adj_savings_fix_cap_GNI        50 non-null     float64\n 3   adj_savings_edu_GNI            50 non-null     float64\n 4   adj_NNS_GNI                    50 non-null     float64\n 5   curr_acc_bal                   50 non-null     float64\n 6   ex_imp_gdp                     50 non-null     float64\n 7   ex_imp_growth                  50 non-null     float64\n 8   ex_debt_shocks                 50 non-null     float64\n 9   final_consump_exp_gdp          50 non-null     float64\n 10  final_consump_exp_growth       50 non-null     float64\n 11  fdi_net_inflows                50 non-null     float64\n 12  fdi_net_outflows               50 non-null     float64\n 13  gdp_growth                     50 non-null     float64\n 14  gdp_per_capita_growth          50 non-null     float64\n 15  gener_govt_fin_consump_exp     50 non-null     float64\n 16  gni_growth                     50 non-null     float64\n 17  goods_exp_bop                  50 non-null     float64\n 18  goods_imp_bop                  50 non-null     float64\n 19  imports_goods_services_gdp     50 non-null     float64\n 20  imports_goods_services_growth  50 non-null     float64\n 21  services_gdp                   50 non-null     float64\n 22  services_growth                50 non-null     float64\n 23  short_term_debt_tot_reserves   50 non-null     float64\n 24  trade_gdp                      50 non-null     float64\n 25  cpi                            50 non-null     float64\n 26  inflation                      50 non-null     float64\n 27  real_interest_rate             50 non-null     float64\n 28  lending_interest_rate          50 non-null     float64\n 29  life_exp_birth                 50 non-null     float64\n 30  expense_gdp                    50 non-null     float64\n 31  interest_payments              50 non-null     float64\n 32  military expenditure           50 non-null     float64\n 33  year                           50 non-null     int64  \n 34  labels                         50 non-null     object \ndtypes: float64(33), int64(1), object(1)\nmemory usage: 13.8+ KB\n\n\n\nVisual Data Representation\n\nHistograms\n\nfig, ax = plt.subplots()\nax.hist(india[\"inflation\"], bins=30, alpha=0.5, label='India')\nax.hist(southafrica[\"inflation\"], bins=30, alpha=0.5, label='South Africa')\nax.hist(brazil[\"inflation\"], bins=30, alpha=0.5, label='Brazil')\nax.hist(russia[\"inflation\"], bins=30, alpha=0.5, label='Russia')\nax.hist(china[\"inflation\"], bins=30, alpha=0.5, label='China')\n\nax.set_xlabel('Inflation')\nax.set_ylabel('Percentage')\nax.set_title('BRICS')\nax.legend()\nplt.show()\n\n\n\n\nIf you look at the inflation, you see South Africa and Brazil having higher bouts of inflation than China or India. This tells us about the nature of their economy and the role of their sustainable and geo-political contexts.\n\n\nScatterplots\n\nfig= plt.figure(figsize=(18, 9))\nfig.suptitle('Trade Analysis')\n\nax1= fig.add_subplot(331)\nax1.set_title('India')\nax1.plot(india['year'],\n        india['trade_gdp'],\n        color='blue')\nax2= fig.add_subplot(332)\nax2.set_title('China')\nax2.plot(china['year'],\n        china['trade_gdp'],\n        color='brown')\nax3= fig.add_subplot(333)\nax3.set_title('Russia')\nax3.plot(russia['year'],\n        russia['trade_gdp'],\n        color='pink')\nax4= fig.add_subplot(334)\nax4.set_title('South Africa')\nax4.plot(southafrica['year'],\n        southafrica['trade_gdp'],\n        color='pink')\nax5= fig.add_subplot(335)\nax5.set_title('Brazil')\nax5.plot(brazil['year'],\n        brazil['trade_gdp'],\n        color='orange')\n\n\n\n\nIn terms of each countries’ Trade GDP, we see Russia performing better than Brazil and South Africa which a linear growth as it is increasing at an increasing rate. In terms of China, it’s trade % of the GDP has been positively rising. India, due to it’s economic crisis and the flush of trade borders opening emphasised on more international trade than it’s other counter-parts during that time. When you look at Brazil, Brazil’s influx of trade was more in the early 1990’s and it casually decreased. In terms of South Africa, you see it’s trade was completely closed in the 1980s due to its dependency on other natures with not have much resources to trade, but over a period of time, that changed.\n\n# Create a Matplotlib figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a boxplot for all numerical columns in the DataFrame\nindia.boxplot(ax=ax)\n\n# Add labels and a title\nax.set_ylabel('Value')\nax.set_title('India')\n\n# Show the plot\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\nIf you look at India’s boxplot graph, the adjusted Net National Income growth, the percentage of goods and the goods imported’s percentages are the data that has shown high variability, showcasing the importance of data bias and data normalisation. Yet,you also see vast differences in the max and min values between the blot points.\n\nfig, ax = plt.subplots(figsize=(10, 6))\nrussia.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('Russia')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\nIt is the same case with russia, but the services GDP % is actually high. If you see, the Imports of Goods and Servies as a % of GDP has greater variability and even the Services as a % of GDP.\n\nfig, ax = plt.subplots(figsize=(10, 6))\nchina.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('China')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\nIn terms of, you don’t see a lot of variability in the dataset except the educational expenses, the Imports of Goods and Services as a percentage of Growth, the % of services as a GDP.\n\nfig, ax = plt.subplots(figsize=(10, 6))\nsouthafrica.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('South Africa')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\nFor South Africa, you see how the data shows the variability for similar ones highlighting the importance of data-normalisation.\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbrazil.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('Brazil')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\nBut the variability is comparitively lesser for Brazil.\n\nsns.set_theme(style=\"white\")\ncorr = india.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\nIf you look at the variables that are correlated with each other, and a lot of variables that are negatively correlated with each other. For instance, Ajusted Net National Income in positively correlated with other variables and Final Consumption Expenditure is negatively correlated to the data.\n\nsns.set_theme(style=\"white\")\ncorr = china.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\nFor China, interest payments are negatively correlated to most of the variables, so that FDI Net Inflows, and even the General Government Final Expenditure. And majority of the variables are positively correlated to each other too.\n\nsns.set_theme(style=\"white\")\ncorr = russia.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\nIf you see for Russia, comparitively, most of the variables are negatively correlated to each other , few of them being Adjusted Savings for Education as a % for GNI, interest payemeets, etc.\n\nsns.set_theme(style=\"white\")\ncorr = southafrica.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\nFor Africa to, there are a lot of variables that are highly correlated to each other and the same for Brazil as well.\n\nsns.set_theme(style=\"white\")\ncorr = brazil.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nfig, axes = plt.subplots(1, 5, figsize=(15, 5))\nsns.scatterplot(data=india, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[0])\naxes[0].set_title('India')\nsns.scatterplot(data=russia, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[1])\naxes[1].set_title('Russia')\nsns.scatterplot(data=china, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[2])\naxes[2].set_title('China')\nsns.scatterplot(data=brazil, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[3])\naxes[3].set_title('Brazil')\nsns.scatterplot(data=southafrica, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[4])\naxes[4].set_title('South Africa')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\nIf you look at the scatterplot to understand the Adjusted Net National Income’s growth, Brazil, India, China and Russia almost show no correlation with the year. It shows that irrespective of the year, they’re parallel to the x axis, showcasing inelasticity.\n\nfig, axes = plt.subplots(1, 5, figsize=(15, 5))\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=india, ax=axes[0])\naxes[0].set_title('India')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=russia, ax=axes[1])\naxes[1].set_title('Russia')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=china, ax=axes[2])\naxes[2].set_title('China')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=brazil, ax=axes[3])\naxes[3].set_title('Brazil')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=southafrica, ax=axes[4])\naxes[4].set_title('South Africa')\nfor ax in axes:\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nplt.tight_layout()\nplt.show()\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_63651/980302243.py:13: UserWarning: FixedFormatter should only be used together with FixedLocator\n  ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\n\n\n\n\nThe violin plots showcase the association of the GDP labels with the GNI growth. There is greater density and spread in Russia, Brazil and South Africa in comparison to India.\nLinks used. 1. https://towardsdatascience.com/data-visualization-using-matplotlib-16f1aae5ce70 2. https://nbviewer.org/github/BadreeshShetty/Data-Visualization-using-Matplotlib/blob/master/%281%29Histograms.ipynb"
  },
  {
    "objectID": "codes/naivebayes.html",
    "href": "codes/naivebayes.html",
    "title": "Naive Bayes",
    "section": "",
    "text": "Naive Bayes is a powerful machine-learning algorithmn which is used for machine-learning and probabilistic modelling. It utilises the Baye’s Theorem and is most useful for textual analysis, for any categorical identification, may it be in the areas of education, security, health and social sector.\nNaive Bayes is built on the Bayes’ theorem, which is a conditional probability model. Wherein, it allows the user to calculate the probabilities of a particular class or a category given a set of features or independant variables. As the features are assumed to be independant, the probability is calculated on basis of that assumption.\nNaive Bayes’ primary goal is to classify data into specified classes or categories based on observed attributes. This is accomplished by taking into account both the prior probability of each class (as informed by historical data or domain knowledge) and the likelihood of witnessing the provided traits under each class. This data is used to compute the conditional probability of each class and determine which class is more likely given the given data.\nThere are various types of Naive Bayes:\n\nThe Gaussian Naive Bayes algorithm is appropriate for continuous or real-valued data, such as medical measures.\nMultinomial Naive Bayes excels at text classification, which makes it useful for tasks such as spam detection and sentiment analysis when features represent word counts or phrase frequencies.\nBernoulli Naive Bayes is an excellent choice for working with binary data, and it is frequently\n\nDue to Naive Bayes’ computational efficiency and the ability to carry it on with simplicity, the approach is appealing to many machine learning practitioners. You can acquire accurate and relevant classification results by picking the proper Naive Bayes variant and applying it to your specific dataset. Naive Bayes is especially well-suited for scenarios requiring speed, simplicity, and a probabilistic approach. Because of its probabilistic character and foundation in Bayes’ theorem, it can make educated decisions and is a vital addition to the machine learning toolset.\n\n\nCode\nimport  pandas  as  pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport missingno as msno\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, precision_score\n\n\n\n\nCode\ndef accuracy(y,ypred):\n    #compute accuracy\n    print(\"Accuracy:\", accuracy_score(y, ypred)*100)\n    \ndef precision(y,ypred):\n    #compute precision\n    print(\"Precision Score:\", precision_score(y, ypred, average=\"micro\")*100)\n    \ndef recall(y,ypred):\n    #compute recall\n    print(\"Recall Score:\", recall_score(y, ypred, average=\"micro\")*100)\n\n\ndef f1(y,ypred):\n    #compute f1\n    print(\"F1 Score:\", f1_score(y, ypred, average=\"micro\")*100)\n\n\n\n\nAs my data consists of data for 5 BRICS nations separately and also contains a dataframe which is a culmination of my existing datasets. As discussed in the cleaning section, the stacked_df has self generated labels section that I had created to ensure it is usable for Naive Bayes. Whilst it is not actually recommended to create self-generated labels for the datasets, especially for the economic data as it works on the progression of time and things are extremely volatile. However, for utilising Naive Bayes I had created it. So my utilisation of Naive Bayes taking the entire dataset into consideration is so I used the Gaussian Naive Bayes data as it is useful for the real-life data.\n\n\nCode\nindia=pd.read_csv('../data/india.csv')\nrussia=pd.read_csv('../data/russia.csv')\nchina=pd.read_csv('../data/china.csv')\nbrazil=pd.read_csv('../data/brazil.csv')\nsouthafrica=pd.read_csv('../data/southafrica.csv')\nstacked_df = pd.concat([india, russia, china, brazil, southafrica])\n\n\n\n\nCode\nstacked_df.isna().sum()\nstacked_df = stacked_df.dropna()\nstacked_df.drop(columns='year')\n\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\nlabels\n\n\n\n\n0\n11.978544\n2.476830e+11\n8.055168\n2.600000\n6.418183\n-0.958069\n6.139551\n5.237330\n11.096107\n87.498021\n...\n9.737409\n11.346073\n4.476508\n16.500000\n53.611000\n11.702478\n13.780033\n3.133781\n1979.0\nHigh Growth\n\n\n1\n-2.572689\n2.413109e+11\n8.393346\n2.600000\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n11.014232\n13.112547\n5.118237\n16.500000\n54.175000\n11.376034\n14.073244\n3.186248\n1980.0\nHigh Growth\n\n\n2\n1.626264\n2.452352e+11\n8.819348\n3.051058\n7.043158\n-1.257273\n5.983300\n6.020508\n13.467614\n85.319441\n...\n11.883336\n7.890743\n7.774707\n16.500000\n54.732000\n11.959873\n15.563031\n3.345118\n1981.0\nModerate Growth\n\n\n3\n11.562099\n2.735896e+11\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n13.293660\n11.868081\n7.320987\n16.500000\n55.281000\n12.077793\n17.460567\n3.323069\n1982.0\nVery High Growth\n\n\n4\n1.851968\n2.786564e+11\n8.784357\n2.700000\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n14.399548\n8.318907\n7.947100\n16.500000\n55.816000\n13.142960\n19.011381\n3.416876\n1983.0\nModerate Growth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n45\n1.084757\n2.973289e+11\n-0.146507\n14.267286\n5.514553\n13.954344\n-0.328763\n-3.008700\n27.562640\n2.741158\n...\n1.981519\n92.692307\n54.627712\n152.646240\n4.517165\n6.108760\n65.674000\n0.897196\n2018.0\nLow Growth\n\n\n46\n0.621565\n2.991770e+11\n-0.673157\n14.415053\n5.820015\n13.810482\n-0.595410\n-2.625377\n27.297471\n-3.445217\n...\n1.108507\n80.819685\n54.054766\n158.935640\n4.120246\n5.243711\n66.175000\n0.884245\n2019.0\nLow Growth\n\n\n47\n-5.191452\n2.836454e+11\n-6.344067\n15.342080\n5.820015\n14.898851\n-0.451413\n1.984891\n27.600303\n-11.862908\n...\n-4.398186\n67.402320\n50.800982\n164.037531\n3.210036\n1.907151\n65.252000\n0.957517\n2020.0\nLow Growth\n\n\n48\n2.944993\n1.726618e+11\n1.019058\n14.617378\n5.340494\n19.599354\n4.980877\n3.699256\n31.193814\n9.986850\n...\n4.088044\n63.010063\n56.217980\n171.602404\n4.611672\n0.774484\n62.341000\n0.809813\n2021.0\nVery High Growth\n\n\n49\n2.944993\n1.726618e+11\n1.019058\n14.617378\n5.340494\n19.599354\n4.980877\n-0.418256\n33.443871\n7.546529\n...\n3.566733\n119.946081\n64.908850\n183.682744\n7.039727\n3.557564\n60.457939\n0.739894\n2022.0\nModerate Growth\n\n\n\n\n111 rows × 35 columns\n\n\n\nI dropped the NA as it wasn’t required for this and not for the further data analysis tasks.\n\n\n\n\nCode\nY = stacked_df['labels']\nX =  stacked_df.drop(['labels'],axis =1)\n\n\n\n\nCode\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42, test_size=0.2)\nx_train_valid, x_valid_test, y_train_valid, y_valid_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\nprint('Train data    :'+str(X_train.shape))\nprint('Test data     :'+str(X_test.shape))\nprint('Train Output  :'+str(y_train.shape))\nprint('Test Output   :'+str(y_test.shape))\nprint('Valid Train data    :'+str(x_train_valid.shape))\nprint('Valid Test data     :'+str(x_valid_test.shape))\nprint('Valid Train Output  :'+str(y_train_valid.shape))\nprint('Valid Test Output   :'+str(y_valid_test.shape))\n\n\nTrain data    :(88, 35)\nTest data     :(23, 35)\nTrain Output  :(88,)\nTest Output   :(23,)\nValid Train data    :(11, 35)\nValid Test data     :(12, 35)\nValid Train Output  :(11,)\nValid Test Output   :(12,)\n\n\n\n\n\nThe feature-selection method plays an important role in understanding which features to select as most of the times high multicollinearity can affect the dataset. According to this, the features mentioned below, the top 10 and the bottom 10 are the features that are highly correlated with each other and can be removed.\n\n\nCode\ncorr=stacked_df.corr\ncorr\n\n\n&lt;bound method DataFrame.corr of     year  adj_NNI_g     adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0   1979  11.978544  2.476830e+11                 8.055168   \n1   1980  -2.572689  2.413109e+11                 8.393346   \n2   1981   1.626264  2.452352e+11                 8.819348   \n3   1982  11.562099  2.735896e+11                 8.419293   \n4   1983   1.851968  2.786564e+11                 8.784357   \n..   ...        ...           ...                      ...   \n45  2018   1.084757  2.973289e+11                -0.146507   \n46  2019   0.621565  2.991770e+11                -0.673157   \n47  2020  -5.191452  2.836454e+11                -6.344067   \n48  2021   2.944993  1.726618e+11                 1.019058   \n49  2022   2.944993  1.726618e+11                 1.019058   \n\n    adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0              2.600000     6.418183     -0.958069    6.139551       5.237330   \n1              2.600000     7.373027     -1.394549    5.936027      -0.816934   \n2              3.051058     7.043158     -1.257273    5.983300       6.020508   \n3              3.153437     7.024774     -0.887438    5.837629      -0.914918   \n4              2.700000     7.097912     -1.089317    6.283401       7.297852   \n..                  ...          ...           ...         ...            ...   \n45            14.267286     5.514553     13.954344   -0.328763      -3.008700   \n46            14.415053     5.820015     13.810482   -0.595410      -2.625377   \n47            15.342080     5.820015     14.898851   -0.451413       1.984891   \n48            14.617378     5.340494     19.599354    4.980877       3.699256   \n49            14.617378     5.340494     19.599354    4.980877      -0.418256   \n\n    ex_debt_shocks  ...        cpi   inflation  real_interest_rate  \\\n0        11.096107  ...   9.737409   11.346073            4.476508   \n1        11.615484  ...  11.014232   13.112547            5.118237   \n2        13.467614  ...  11.883336    7.890743            7.774707   \n3        14.101651  ...  13.293660   11.868081            7.320987   \n4        15.530868  ...  14.399548    8.318907            7.947100   \n..             ...  ...        ...         ...                 ...   \n45       27.562640  ...   1.981519   92.692307           54.627712   \n46       27.297471  ...   1.108507   80.819685           54.054766   \n47       27.600303  ...  -4.398186   67.402320           50.800982   \n48       31.193814  ...   4.088044   63.010063           56.217980   \n49       33.443871  ...   3.566733  119.946081           64.908850   \n\n    lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0               16.500000       53.611000    11.702478          13.780033   \n1               16.500000       54.175000    11.376034          14.073244   \n2               16.500000       54.732000    11.959873          15.563031   \n3               16.500000       55.281000    12.077793          17.460567   \n4               16.500000       55.816000    13.142960          19.011381   \n..                    ...             ...          ...                ...   \n45             152.646240        4.517165     6.108760          65.674000   \n46             158.935640        4.120246     5.243711          66.175000   \n47             164.037531        3.210036     1.907151          65.252000   \n48             171.602404        4.611672     0.774484          62.341000   \n49             183.682744        7.039727     3.557564          60.457939   \n\n    military expenditure  year.1            labels  \n0               3.133781  1979.0       High Growth  \n1               3.186248  1980.0       High Growth  \n2               3.345118  1981.0   Moderate Growth  \n3               3.323069  1982.0  Very High Growth  \n4               3.416876  1983.0   Moderate Growth  \n..                   ...     ...               ...  \n45              0.897196  2018.0        Low Growth  \n46              0.884245  2019.0        Low Growth  \n47              0.957517  2020.0        Low Growth  \n48              0.809813  2021.0  Very High Growth  \n49              0.739894  2022.0   Moderate Growth  \n\n[111 rows x 36 columns]&gt;\n\n\n\n\nCode\n# using pearson\ncorr = stacked_df.corr(numeric_only=True)\ncorr_matrix = corr.stack()\npositive_corr = corr_matrix[corr_matrix &gt; 0]\npositive_top = positive_corr.sort_values(ascending=True)\npositive_top = positive_top.head(10)\nprint(positive_top)\n\n\nmilitary expenditure        gni_growth                    0.003564\ngni_growth                  military expenditure          0.003564\nadj_savings_fix_cap_GNI     military expenditure          0.010298\nmilitary expenditure        adj_savings_fix_cap_GNI       0.010298\n                            gdp_growth                    0.019195\ngdp_growth                  military expenditure          0.019195\nex_debt_shocks              adj_NNI_g                     0.029714\nadj_NNI_g                   ex_debt_shocks                0.029714\ngener_govt_fin_consump_exp  military expenditure          0.034514\nmilitary expenditure        gener_govt_fin_consump_exp    0.034514\ndtype: float64\n\n\n\n\nCode\ncorr = stacked_df.corr(numeric_only=True)\ncorr_matrix = corr.stack()\nnegative_corr = corr_matrix[corr_matrix &lt; 0]\nnegative_bottom = negative_corr.sort_values(ascending=True)\nnegative_bottom = negative_bottom.head(10)\nprint(negative_bottom)\n\n\nfinal_consump_exp_gdp  fdi_net_inflows         -0.979383\nfdi_net_inflows        final_consump_exp_gdp   -0.979383\nfinal_consump_exp_gdp  interest_payments       -0.945499\ninterest_payments      final_consump_exp_gdp   -0.945499\nreal_interest_rate     final_consump_exp_gdp   -0.939753\nfinal_consump_exp_gdp  real_interest_rate      -0.939753\n                       services_growth         -0.919109\nservices_growth        final_consump_exp_gdp   -0.919109\nfinal_consump_exp_gdp  curr_acc_bal            -0.892012\ncurr_acc_bal           final_consump_exp_gdp   -0.892012\ndtype: float64\n\n\n\n\nCode\nnaive_bayes = GaussianNB()\nnaive_bayes.fit(X_train, y_train)\n\n\nGaussianNB()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GaussianNBGaussianNB()\n\n\n\n\nCode\npred_valid = naive_bayes.predict(x_train_valid)\n\n\n\n\nCode\n# Predicting the train data and test data\npred_train = naive_bayes.predict(X_train)\npred_test = naive_bayes.predict(X_test)\n\n\n\n\nCode\n# Training data\n\naccuracy(y_train, pred_train)\nprecision(y_train, pred_train)\nrecall(y_train, pred_train)\nf1(y_train, pred_train)\n    \n\n\nAccuracy: 60.22727272727273\nPrecision Score: 60.22727272727273\nRecall Score: 60.22727272727273\nF1 Score: 60.22727272727273\n\n\nWe see that the accuracy, precision, recall and f1 score are all 60%\n\n\nCode\n# Testing Data\n\naccuracy(y_test, pred_test)\nprecision(y_test, pred_test)\nrecall(y_test, pred_test)\nf1(y_test, pred_test)\n\n\nAccuracy: 56.52173913043478\nPrecision Score: 56.52173913043478\nRecall Score: 56.52173913043478\nF1 Score: 56.52173913043478\n\n\nWe see that the accuracy, precision, recall and f1 score are all 54%. This means the testing data performs lesser than training, it means the model may be underfitted. And the Validation dataset performs a bit lesser which means there is high bias and low variance.\n\n\nCode\n# Validation \naccuracy(y_train_valid, pred_valid)\nprecision(y_train_valid, pred_valid)\nrecall(y_train_valid, pred_valid)\nf1(y_train_valid, pred_valid)\n\n\nAccuracy: 54.54545454545454\nPrecision Score: 54.54545454545454\nRecall Score: 54.54545454545454\nF1 Score: 54.54545454545454\n\n\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_test, pred_test)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x134a3b940&gt;\n\n\n\n\n\nAccording to the confusion matrix, we see that the High Growth not been predicted properly, followed by Moderate Growth. This is also a problem that comes when we self-emerge the dataset.\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_train, pred_train)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x134daa830&gt;\n\n\n\n\n\nIn the training data, Moderate Growth have been misslabelled and even the Very high Growth categories.\n\n\n\n\nUnderstanding the textual data is also just as important since the textual data gives us a lot of information about whatever is happening in terms of the public opinion which is extremely important from the point of view of the data. Understanding and carefully making sure to categorise this is important as well. For this data, we have used the textual data that has been retrieved from the Reddit PRAW wrapper and has been labelled using the Sentiment Intensity Analyser.\n\n\nCode\nfinaldf=pd.read_csv('../data/sentiment.csv')\n\n\n\n\nCode\nfinaldf.head(10)\n\n\n\n\n\n\n\n\n\nUnnamed: 0\ncleaned_tweets\nlabel\n\n\n\n\n0\n0\nburn flag\n0\n\n\n1\n1\nplan kill petro dollar run manipulated western...\n-1\n\n\n2\n2\ndifficult know whats going come summit next we...\n-1\n\n\n3\n3\nlot unpack brics would bring table officially ...\n1\n\n\n4\n4\nnice feel way thats brics supped make feel lik...\n1\n\n\n5\n5\nseems like well ahead schedule already 50 perc...\n1\n\n\n6\n6\nyeah precisely fully explained today family me...\n1\n\n\n7\n7\nwatched lecture school predicted global south ...\n1\n\n\n8\n8\nthink hope happens sooner rather later live eu...\n1\n\n\n9\n9\nsupposed happen week hold boys\n0\n\n\n\n\n\n\n\n\n\nCode\n\nfinaldf = finaldf.loc[:, ['cleaned_tweets', 'label']] \nfinaldf.head(10)\n\n\n\n\n\n\n\n\n\ncleaned_tweets\nlabel\n\n\n\n\n0\nburn flag\n0\n\n\n1\nplan kill petro dollar run manipulated western...\n-1\n\n\n2\ndifficult know whats going come summit next we...\n-1\n\n\n3\nlot unpack brics would bring table officially ...\n1\n\n\n4\nnice feel way thats brics supped make feel lik...\n1\n\n\n5\nseems like well ahead schedule already 50 perc...\n1\n\n\n6\nyeah precisely fully explained today family me...\n1\n\n\n7\nwatched lecture school predicted global south ...\n1\n\n\n8\nthink hope happens sooner rather later live eu...\n1\n\n\n9\nsupposed happen week hold boys\n0\n\n\n\n\n\n\n\n\n\nCode\n\n# Assuming you have a DataFrame with 'text' and 'label' columns\nX = finaldf['cleaned_tweets']  # Text data\nY = finaldf['label']  # Target labels\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42, test_size=0.2)\nx_train_valid, x_valid_test, y_train_valid, y_valid_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\nprint('Train data    :'+str(X_train.shape))\nprint('Test data     :'+str(X_test.shape))\nprint('Train Output  :'+str(y_train.shape))\nprint('Test Output   :'+str(y_test.shape))\nprint('Valid Train data    :'+str(x_train_valid.shape))\nprint('Valid Test data     :'+str(x_valid_test.shape))\nprint('Valid Train Output  :'+str(y_train_valid.shape))\nprint('Valid Test Output   :'+str(y_valid_test.shape))\n\n\nTrain data    :(96,)\nTest data     :(24,)\nTrain Output  :(96,)\nTest Output   :(24,)\nValid Train data    :(12,)\nValid Test data     :(12,)\nValid Train Output  :(12,)\nValid Test Output   :(12,)\n\n\nI divided the data into training, testing and validation. Training accounts for 80% of the data, testing accounts for 20% of the data and validation accounts for 50% of the data.\n\n\nTerm Frequency-Inverse Document Frequency, or TF-IDF, is a critical text analysis technique used to determine the significance of words in texts. It allocates numerical values to words based on their frequency in a document and rarity in a set of documents. TF-IDF aids in ranking and finding relevant texts, extracting key information, and reducing the dimensionality of text data by assigning higher scores to terms that are both frequent in the document and unique to it. Since my data contains information which can have strong sentiments associated to it, I utilised it.\n\n\nCode\n\ntfidf_vectorizer = TfidfVectorizer()\nX_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\nX_test_tfidf = tfidf_vectorizer.transform(X_test)\nx_train_valid_tfidf= tfidf_vectorizer.transform(x_train_valid)\n\n\n\n\nCode\n\nmnb = MultinomialNB()\nmnb.fit(X_train_tfidf, y_train)\n\n# training data\ny_pred_train = mnb.predict(X_train_tfidf)\n\n# testing data\ny_pred_test = mnb.predict(X_test_tfidf)\n\n#validation\ny_pred_val = mnb.predict(x_train_valid_tfidf)\n\n\nI utilised Multinomial Naive Bayes as it helps in textual classification concerning sentiment analysis. The values for accuracy, precision, recall and F1 have been calculated. It is seen that Training and Testing perform equally well, meaning there is no overfitting or underfitting seen.\n\n\nCode\naccuracy_train = accuracy_score(y_train, y_pred_train)\nprecision_train = precision_score(y_train, y_pred_train, average=\"micro\")\nrecall_train = recall_score(y_train, y_pred_train, average=\"micro\")\nf1_train = f1_score(y_train, y_pred_train, average=\"micro\")\n\nprint(\"Training Set Metrics:\")\nprint(\"Accuracy:\", accuracy_train)\nprint(\"Precision Score:\", precision_train)\nprint(\"Recall Score:\", recall_train)\nprint(\"F1 Score:\", f1_train)\n\n\nTraining Set Metrics:\nAccuracy: 0.6354166666666666\nPrecision Score: 0.6354166666666666\nRecall Score: 0.6354166666666666\nF1 Score: 0.6354166666666666\n\n\n\n\nCode\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprecision_test = precision_score(y_test, y_pred_test, average=\"micro\")\nrecall_test = recall_score(y_test, y_pred_test, average=\"micro\")\nf1_test = f1_score(y_test, y_pred_test, average=\"micro\")\n\nprint(\"Testing Set Metrics:\")\nprint(\"Accuracy:\", accuracy_train*100)\nprint(\"Precision Score:\", precision_train*100)\nprint(\"Recall Score:\", recall_train*100)\nprint(\"F1 Score:\", f1_train*100)\n\n\nTesting Set Metrics:\nAccuracy: 63.541666666666664\nPrecision Score: 63.541666666666664\nRecall Score: 63.541666666666664\nF1 Score: 63.541666666666664\n\n\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_train, y_pred_train)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x137948250&gt;\n\n\n\n\n\nFor training dataset, if you see, the values have been labelled correctly but the 17 labels with 0 indicating no opinion has been predicted as 1 which means a positive sentiment. And similarly the negative sentiment has been predicting as positive sentiment.\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_test, y_pred_test)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x137a0fc10&gt;\n\n\n\n\n\nFor testing dataset, if you see, the values have been labelled correctly but the 6 labels with 0 indicating no opinion has been predicted as 1 which means a positive sentiment. 6 of neutral sentiments with 0 have also been predicted as 1.\nBoth textual and quantitative naive have shown its efficiency in predicting categorical class, however, this also provides a que into further development and analysis of this project to work on this more and utilise better feature selection and feature engineering methods to increase the overall metrics."
  },
  {
    "objectID": "codes/naivebayes.html#naive-bayes-for-quantitative-data",
    "href": "codes/naivebayes.html#naive-bayes-for-quantitative-data",
    "title": "Naive Bayes",
    "section": "",
    "text": "As my data consists of data for 5 BRICS nations separately and also contains a dataframe which is a culmination of my existing datasets. As discussed in the cleaning section, the stacked_df has self generated labels section that I had created to ensure it is usable for Naive Bayes. Whilst it is not actually recommended to create self-generated labels for the datasets, especially for the economic data as it works on the progression of time and things are extremely volatile. However, for utilising Naive Bayes I had created it. So my utilisation of Naive Bayes taking the entire dataset into consideration is so I used the Gaussian Naive Bayes data as it is useful for the real-life data.\n\n\nCode\nindia=pd.read_csv('../data/india.csv')\nrussia=pd.read_csv('../data/russia.csv')\nchina=pd.read_csv('../data/china.csv')\nbrazil=pd.read_csv('../data/brazil.csv')\nsouthafrica=pd.read_csv('../data/southafrica.csv')\nstacked_df = pd.concat([india, russia, china, brazil, southafrica])\n\n\n\n\nCode\nstacked_df.isna().sum()\nstacked_df = stacked_df.dropna()\nstacked_df.drop(columns='year')\n\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\nlabels\n\n\n\n\n0\n11.978544\n2.476830e+11\n8.055168\n2.600000\n6.418183\n-0.958069\n6.139551\n5.237330\n11.096107\n87.498021\n...\n9.737409\n11.346073\n4.476508\n16.500000\n53.611000\n11.702478\n13.780033\n3.133781\n1979.0\nHigh Growth\n\n\n1\n-2.572689\n2.413109e+11\n8.393346\n2.600000\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n11.014232\n13.112547\n5.118237\n16.500000\n54.175000\n11.376034\n14.073244\n3.186248\n1980.0\nHigh Growth\n\n\n2\n1.626264\n2.452352e+11\n8.819348\n3.051058\n7.043158\n-1.257273\n5.983300\n6.020508\n13.467614\n85.319441\n...\n11.883336\n7.890743\n7.774707\n16.500000\n54.732000\n11.959873\n15.563031\n3.345118\n1981.0\nModerate Growth\n\n\n3\n11.562099\n2.735896e+11\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n13.293660\n11.868081\n7.320987\n16.500000\n55.281000\n12.077793\n17.460567\n3.323069\n1982.0\nVery High Growth\n\n\n4\n1.851968\n2.786564e+11\n8.784357\n2.700000\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n14.399548\n8.318907\n7.947100\n16.500000\n55.816000\n13.142960\n19.011381\n3.416876\n1983.0\nModerate Growth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n45\n1.084757\n2.973289e+11\n-0.146507\n14.267286\n5.514553\n13.954344\n-0.328763\n-3.008700\n27.562640\n2.741158\n...\n1.981519\n92.692307\n54.627712\n152.646240\n4.517165\n6.108760\n65.674000\n0.897196\n2018.0\nLow Growth\n\n\n46\n0.621565\n2.991770e+11\n-0.673157\n14.415053\n5.820015\n13.810482\n-0.595410\n-2.625377\n27.297471\n-3.445217\n...\n1.108507\n80.819685\n54.054766\n158.935640\n4.120246\n5.243711\n66.175000\n0.884245\n2019.0\nLow Growth\n\n\n47\n-5.191452\n2.836454e+11\n-6.344067\n15.342080\n5.820015\n14.898851\n-0.451413\n1.984891\n27.600303\n-11.862908\n...\n-4.398186\n67.402320\n50.800982\n164.037531\n3.210036\n1.907151\n65.252000\n0.957517\n2020.0\nLow Growth\n\n\n48\n2.944993\n1.726618e+11\n1.019058\n14.617378\n5.340494\n19.599354\n4.980877\n3.699256\n31.193814\n9.986850\n...\n4.088044\n63.010063\n56.217980\n171.602404\n4.611672\n0.774484\n62.341000\n0.809813\n2021.0\nVery High Growth\n\n\n49\n2.944993\n1.726618e+11\n1.019058\n14.617378\n5.340494\n19.599354\n4.980877\n-0.418256\n33.443871\n7.546529\n...\n3.566733\n119.946081\n64.908850\n183.682744\n7.039727\n3.557564\n60.457939\n0.739894\n2022.0\nModerate Growth\n\n\n\n\n111 rows × 35 columns\n\n\n\nI dropped the NA as it wasn’t required for this and not for the further data analysis tasks.\n\n\n\n\nCode\nY = stacked_df['labels']\nX =  stacked_df.drop(['labels'],axis =1)\n\n\n\n\nCode\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42, test_size=0.2)\nx_train_valid, x_valid_test, y_train_valid, y_valid_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\nprint('Train data    :'+str(X_train.shape))\nprint('Test data     :'+str(X_test.shape))\nprint('Train Output  :'+str(y_train.shape))\nprint('Test Output   :'+str(y_test.shape))\nprint('Valid Train data    :'+str(x_train_valid.shape))\nprint('Valid Test data     :'+str(x_valid_test.shape))\nprint('Valid Train Output  :'+str(y_train_valid.shape))\nprint('Valid Test Output   :'+str(y_valid_test.shape))\n\n\nTrain data    :(88, 35)\nTest data     :(23, 35)\nTrain Output  :(88,)\nTest Output   :(23,)\nValid Train data    :(11, 35)\nValid Test data     :(12, 35)\nValid Train Output  :(11,)\nValid Test Output   :(12,)\n\n\n\n\n\nThe feature-selection method plays an important role in understanding which features to select as most of the times high multicollinearity can affect the dataset. According to this, the features mentioned below, the top 10 and the bottom 10 are the features that are highly correlated with each other and can be removed.\n\n\nCode\ncorr=stacked_df.corr\ncorr\n\n\n&lt;bound method DataFrame.corr of     year  adj_NNI_g     adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0   1979  11.978544  2.476830e+11                 8.055168   \n1   1980  -2.572689  2.413109e+11                 8.393346   \n2   1981   1.626264  2.452352e+11                 8.819348   \n3   1982  11.562099  2.735896e+11                 8.419293   \n4   1983   1.851968  2.786564e+11                 8.784357   \n..   ...        ...           ...                      ...   \n45  2018   1.084757  2.973289e+11                -0.146507   \n46  2019   0.621565  2.991770e+11                -0.673157   \n47  2020  -5.191452  2.836454e+11                -6.344067   \n48  2021   2.944993  1.726618e+11                 1.019058   \n49  2022   2.944993  1.726618e+11                 1.019058   \n\n    adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0              2.600000     6.418183     -0.958069    6.139551       5.237330   \n1              2.600000     7.373027     -1.394549    5.936027      -0.816934   \n2              3.051058     7.043158     -1.257273    5.983300       6.020508   \n3              3.153437     7.024774     -0.887438    5.837629      -0.914918   \n4              2.700000     7.097912     -1.089317    6.283401       7.297852   \n..                  ...          ...           ...         ...            ...   \n45            14.267286     5.514553     13.954344   -0.328763      -3.008700   \n46            14.415053     5.820015     13.810482   -0.595410      -2.625377   \n47            15.342080     5.820015     14.898851   -0.451413       1.984891   \n48            14.617378     5.340494     19.599354    4.980877       3.699256   \n49            14.617378     5.340494     19.599354    4.980877      -0.418256   \n\n    ex_debt_shocks  ...        cpi   inflation  real_interest_rate  \\\n0        11.096107  ...   9.737409   11.346073            4.476508   \n1        11.615484  ...  11.014232   13.112547            5.118237   \n2        13.467614  ...  11.883336    7.890743            7.774707   \n3        14.101651  ...  13.293660   11.868081            7.320987   \n4        15.530868  ...  14.399548    8.318907            7.947100   \n..             ...  ...        ...         ...                 ...   \n45       27.562640  ...   1.981519   92.692307           54.627712   \n46       27.297471  ...   1.108507   80.819685           54.054766   \n47       27.600303  ...  -4.398186   67.402320           50.800982   \n48       31.193814  ...   4.088044   63.010063           56.217980   \n49       33.443871  ...   3.566733  119.946081           64.908850   \n\n    lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0               16.500000       53.611000    11.702478          13.780033   \n1               16.500000       54.175000    11.376034          14.073244   \n2               16.500000       54.732000    11.959873          15.563031   \n3               16.500000       55.281000    12.077793          17.460567   \n4               16.500000       55.816000    13.142960          19.011381   \n..                    ...             ...          ...                ...   \n45             152.646240        4.517165     6.108760          65.674000   \n46             158.935640        4.120246     5.243711          66.175000   \n47             164.037531        3.210036     1.907151          65.252000   \n48             171.602404        4.611672     0.774484          62.341000   \n49             183.682744        7.039727     3.557564          60.457939   \n\n    military expenditure  year.1            labels  \n0               3.133781  1979.0       High Growth  \n1               3.186248  1980.0       High Growth  \n2               3.345118  1981.0   Moderate Growth  \n3               3.323069  1982.0  Very High Growth  \n4               3.416876  1983.0   Moderate Growth  \n..                   ...     ...               ...  \n45              0.897196  2018.0        Low Growth  \n46              0.884245  2019.0        Low Growth  \n47              0.957517  2020.0        Low Growth  \n48              0.809813  2021.0  Very High Growth  \n49              0.739894  2022.0   Moderate Growth  \n\n[111 rows x 36 columns]&gt;\n\n\n\n\nCode\n# using pearson\ncorr = stacked_df.corr(numeric_only=True)\ncorr_matrix = corr.stack()\npositive_corr = corr_matrix[corr_matrix &gt; 0]\npositive_top = positive_corr.sort_values(ascending=True)\npositive_top = positive_top.head(10)\nprint(positive_top)\n\n\nmilitary expenditure        gni_growth                    0.003564\ngni_growth                  military expenditure          0.003564\nadj_savings_fix_cap_GNI     military expenditure          0.010298\nmilitary expenditure        adj_savings_fix_cap_GNI       0.010298\n                            gdp_growth                    0.019195\ngdp_growth                  military expenditure          0.019195\nex_debt_shocks              adj_NNI_g                     0.029714\nadj_NNI_g                   ex_debt_shocks                0.029714\ngener_govt_fin_consump_exp  military expenditure          0.034514\nmilitary expenditure        gener_govt_fin_consump_exp    0.034514\ndtype: float64\n\n\n\n\nCode\ncorr = stacked_df.corr(numeric_only=True)\ncorr_matrix = corr.stack()\nnegative_corr = corr_matrix[corr_matrix &lt; 0]\nnegative_bottom = negative_corr.sort_values(ascending=True)\nnegative_bottom = negative_bottom.head(10)\nprint(negative_bottom)\n\n\nfinal_consump_exp_gdp  fdi_net_inflows         -0.979383\nfdi_net_inflows        final_consump_exp_gdp   -0.979383\nfinal_consump_exp_gdp  interest_payments       -0.945499\ninterest_payments      final_consump_exp_gdp   -0.945499\nreal_interest_rate     final_consump_exp_gdp   -0.939753\nfinal_consump_exp_gdp  real_interest_rate      -0.939753\n                       services_growth         -0.919109\nservices_growth        final_consump_exp_gdp   -0.919109\nfinal_consump_exp_gdp  curr_acc_bal            -0.892012\ncurr_acc_bal           final_consump_exp_gdp   -0.892012\ndtype: float64\n\n\n\n\nCode\nnaive_bayes = GaussianNB()\nnaive_bayes.fit(X_train, y_train)\n\n\nGaussianNB()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GaussianNBGaussianNB()\n\n\n\n\nCode\npred_valid = naive_bayes.predict(x_train_valid)\n\n\n\n\nCode\n# Predicting the train data and test data\npred_train = naive_bayes.predict(X_train)\npred_test = naive_bayes.predict(X_test)\n\n\n\n\nCode\n# Training data\n\naccuracy(y_train, pred_train)\nprecision(y_train, pred_train)\nrecall(y_train, pred_train)\nf1(y_train, pred_train)\n    \n\n\nAccuracy: 60.22727272727273\nPrecision Score: 60.22727272727273\nRecall Score: 60.22727272727273\nF1 Score: 60.22727272727273\n\n\nWe see that the accuracy, precision, recall and f1 score are all 60%\n\n\nCode\n# Testing Data\n\naccuracy(y_test, pred_test)\nprecision(y_test, pred_test)\nrecall(y_test, pred_test)\nf1(y_test, pred_test)\n\n\nAccuracy: 56.52173913043478\nPrecision Score: 56.52173913043478\nRecall Score: 56.52173913043478\nF1 Score: 56.52173913043478\n\n\nWe see that the accuracy, precision, recall and f1 score are all 54%. This means the testing data performs lesser than training, it means the model may be underfitted. And the Validation dataset performs a bit lesser which means there is high bias and low variance.\n\n\nCode\n# Validation \naccuracy(y_train_valid, pred_valid)\nprecision(y_train_valid, pred_valid)\nrecall(y_train_valid, pred_valid)\nf1(y_train_valid, pred_valid)\n\n\nAccuracy: 54.54545454545454\nPrecision Score: 54.54545454545454\nRecall Score: 54.54545454545454\nF1 Score: 54.54545454545454\n\n\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_test, pred_test)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x134a3b940&gt;\n\n\n\n\n\nAccording to the confusion matrix, we see that the High Growth not been predicted properly, followed by Moderate Growth. This is also a problem that comes when we self-emerge the dataset.\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_train, pred_train)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x134daa830&gt;\n\n\n\n\n\nIn the training data, Moderate Growth have been misslabelled and even the Very high Growth categories."
  },
  {
    "objectID": "codes/naivebayes.html#naive-bayes-for-textual-data-data",
    "href": "codes/naivebayes.html#naive-bayes-for-textual-data-data",
    "title": "Naive Bayes",
    "section": "",
    "text": "Understanding the textual data is also just as important since the textual data gives us a lot of information about whatever is happening in terms of the public opinion which is extremely important from the point of view of the data. Understanding and carefully making sure to categorise this is important as well. For this data, we have used the textual data that has been retrieved from the Reddit PRAW wrapper and has been labelled using the Sentiment Intensity Analyser.\n\n\nCode\nfinaldf=pd.read_csv('../data/sentiment.csv')\n\n\n\n\nCode\nfinaldf.head(10)\n\n\n\n\n\n\n\n\n\nUnnamed: 0\ncleaned_tweets\nlabel\n\n\n\n\n0\n0\nburn flag\n0\n\n\n1\n1\nplan kill petro dollar run manipulated western...\n-1\n\n\n2\n2\ndifficult know whats going come summit next we...\n-1\n\n\n3\n3\nlot unpack brics would bring table officially ...\n1\n\n\n4\n4\nnice feel way thats brics supped make feel lik...\n1\n\n\n5\n5\nseems like well ahead schedule already 50 perc...\n1\n\n\n6\n6\nyeah precisely fully explained today family me...\n1\n\n\n7\n7\nwatched lecture school predicted global south ...\n1\n\n\n8\n8\nthink hope happens sooner rather later live eu...\n1\n\n\n9\n9\nsupposed happen week hold boys\n0\n\n\n\n\n\n\n\n\n\nCode\n\nfinaldf = finaldf.loc[:, ['cleaned_tweets', 'label']] \nfinaldf.head(10)\n\n\n\n\n\n\n\n\n\ncleaned_tweets\nlabel\n\n\n\n\n0\nburn flag\n0\n\n\n1\nplan kill petro dollar run manipulated western...\n-1\n\n\n2\ndifficult know whats going come summit next we...\n-1\n\n\n3\nlot unpack brics would bring table officially ...\n1\n\n\n4\nnice feel way thats brics supped make feel lik...\n1\n\n\n5\nseems like well ahead schedule already 50 perc...\n1\n\n\n6\nyeah precisely fully explained today family me...\n1\n\n\n7\nwatched lecture school predicted global south ...\n1\n\n\n8\nthink hope happens sooner rather later live eu...\n1\n\n\n9\nsupposed happen week hold boys\n0\n\n\n\n\n\n\n\n\n\nCode\n\n# Assuming you have a DataFrame with 'text' and 'label' columns\nX = finaldf['cleaned_tweets']  # Text data\nY = finaldf['label']  # Target labels\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42, test_size=0.2)\nx_train_valid, x_valid_test, y_train_valid, y_valid_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\nprint('Train data    :'+str(X_train.shape))\nprint('Test data     :'+str(X_test.shape))\nprint('Train Output  :'+str(y_train.shape))\nprint('Test Output   :'+str(y_test.shape))\nprint('Valid Train data    :'+str(x_train_valid.shape))\nprint('Valid Test data     :'+str(x_valid_test.shape))\nprint('Valid Train Output  :'+str(y_train_valid.shape))\nprint('Valid Test Output   :'+str(y_valid_test.shape))\n\n\nTrain data    :(96,)\nTest data     :(24,)\nTrain Output  :(96,)\nTest Output   :(24,)\nValid Train data    :(12,)\nValid Test data     :(12,)\nValid Train Output  :(12,)\nValid Test Output   :(12,)\n\n\nI divided the data into training, testing and validation. Training accounts for 80% of the data, testing accounts for 20% of the data and validation accounts for 50% of the data.\n\n\nTerm Frequency-Inverse Document Frequency, or TF-IDF, is a critical text analysis technique used to determine the significance of words in texts. It allocates numerical values to words based on their frequency in a document and rarity in a set of documents. TF-IDF aids in ranking and finding relevant texts, extracting key information, and reducing the dimensionality of text data by assigning higher scores to terms that are both frequent in the document and unique to it. Since my data contains information which can have strong sentiments associated to it, I utilised it.\n\n\nCode\n\ntfidf_vectorizer = TfidfVectorizer()\nX_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\nX_test_tfidf = tfidf_vectorizer.transform(X_test)\nx_train_valid_tfidf= tfidf_vectorizer.transform(x_train_valid)\n\n\n\n\nCode\n\nmnb = MultinomialNB()\nmnb.fit(X_train_tfidf, y_train)\n\n# training data\ny_pred_train = mnb.predict(X_train_tfidf)\n\n# testing data\ny_pred_test = mnb.predict(X_test_tfidf)\n\n#validation\ny_pred_val = mnb.predict(x_train_valid_tfidf)\n\n\nI utilised Multinomial Naive Bayes as it helps in textual classification concerning sentiment analysis. The values for accuracy, precision, recall and F1 have been calculated. It is seen that Training and Testing perform equally well, meaning there is no overfitting or underfitting seen.\n\n\nCode\naccuracy_train = accuracy_score(y_train, y_pred_train)\nprecision_train = precision_score(y_train, y_pred_train, average=\"micro\")\nrecall_train = recall_score(y_train, y_pred_train, average=\"micro\")\nf1_train = f1_score(y_train, y_pred_train, average=\"micro\")\n\nprint(\"Training Set Metrics:\")\nprint(\"Accuracy:\", accuracy_train)\nprint(\"Precision Score:\", precision_train)\nprint(\"Recall Score:\", recall_train)\nprint(\"F1 Score:\", f1_train)\n\n\nTraining Set Metrics:\nAccuracy: 0.6354166666666666\nPrecision Score: 0.6354166666666666\nRecall Score: 0.6354166666666666\nF1 Score: 0.6354166666666666\n\n\n\n\nCode\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprecision_test = precision_score(y_test, y_pred_test, average=\"micro\")\nrecall_test = recall_score(y_test, y_pred_test, average=\"micro\")\nf1_test = f1_score(y_test, y_pred_test, average=\"micro\")\n\nprint(\"Testing Set Metrics:\")\nprint(\"Accuracy:\", accuracy_train*100)\nprint(\"Precision Score:\", precision_train*100)\nprint(\"Recall Score:\", recall_train*100)\nprint(\"F1 Score:\", f1_train*100)\n\n\nTesting Set Metrics:\nAccuracy: 63.541666666666664\nPrecision Score: 63.541666666666664\nRecall Score: 63.541666666666664\nF1 Score: 63.541666666666664\n\n\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_train, y_pred_train)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x137948250&gt;\n\n\n\n\n\nFor training dataset, if you see, the values have been labelled correctly but the 17 labels with 0 indicating no opinion has been predicted as 1 which means a positive sentiment. And similarly the negative sentiment has been predicting as positive sentiment.\n\n\nCode\nConfusionMatrixDisplay.from_predictions(y_test, y_pred_test)\n\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x137a0fc10&gt;\n\n\n\n\n\nFor testing dataset, if you see, the values have been labelled correctly but the 6 labels with 0 indicating no opinion has been predicted as 1 which means a positive sentiment. 6 of neutral sentiments with 0 have also been predicted as 1.\nBoth textual and quantitative naive have shown its efficiency in predicting categorical class, however, this also provides a que into further development and analysis of this project to work on this more and utilise better feature selection and feature engineering methods to increase the overall metrics."
  },
  {
    "objectID": "codes/roughcode.html",
    "href": "codes/roughcode.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import  pandas  as  pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport missingno as msno\n\n\nindia=pd.read_csv(\"/Users/sheebamoghal/Downloads/india.csv\")\nrussia=pd.read_csv(\"/Users/sheebamoghal/Downloads/russia.csv\")\nchina=pd.read_csv(\"/Users/sheebamoghal/Downloads/china.csv\")\nbrazil=pd.read_csv(\"/Users/sheebamoghal/Downloads/brazil.csv\")\nsouthafrica=pd.read_csv(\"/Users/sheebamoghal/Downloads/southafrica.csv\")\nstacked_df = pd.concat([india, russia, china, brazil, southafrica])\n\npd.save\n\n\n\n   year  adj_NNI_g     adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0  1979  11.978544  2.476830e+11                 8.055168   \n1  1980  -2.572689  2.413109e+11                 8.393346   \n2  1981   1.626264  2.452352e+11                 8.819348   \n3  1982  11.562099  2.735896e+11                 8.419293   \n\n   adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0             2.600000     6.418183     -0.958069    6.139551       5.237330   \n1             2.600000     7.373027     -1.394549    5.936027      -0.816934   \n2             3.051058     7.043158     -1.257273    5.983300       6.020508   \n3             3.153437     7.024774     -0.887438    5.837629      -0.914918   \n\n   ex_debt_shocks  ...        cpi  inflation  real_interest_rate  \\\n0       11.096107  ...   9.737409  11.346073            4.476508   \n1       11.615484  ...  11.014232  13.112547            5.118237   \n2       13.467614  ...  11.883336   7.890743            7.774707   \n3       14.101651  ...  13.293660  11.868081            7.320987   \n\n   lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0                   16.5          53.611    11.702478          13.780033   \n1                   16.5          54.175    11.376034          14.073244   \n2                   16.5          54.732    11.959873          15.563031   \n3                   16.5          55.281    12.077793          17.460567   \n\n   military expenditure  year.1            labels  \n0              3.133781  1979.0       High Growth  \n1              3.186248  1980.0       High Growth  \n2              3.345118  1981.0   Moderate Growth  \n3              3.323069  1982.0  Very High Growth  \n\n[4 rows x 36 columns]\n   year  adj_NNI_g     adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0  1979  11.978544  2.476830e+11                 8.055168   \n1  1980  -2.572689  2.413109e+11                 8.393346   \n2  1981   1.626264  2.452352e+11                 8.819348   \n3  1982  11.562099  2.735896e+11                 8.419293   \n\n   adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0             2.600000     6.418183     -0.958069    6.139551       5.237330   \n1             2.600000     7.373027     -1.394549    5.936027      -0.816934   \n2             3.051058     7.043158     -1.257273    5.983300       6.020508   \n3             3.153437     7.024774     -0.887438    5.837629      -0.914918   \n\n   ex_debt_shocks  ...        cpi  inflation  real_interest_rate  \\\n0       11.096107  ...   9.737409  11.346073            4.476508   \n1       11.615484  ...  11.014232  13.112547            5.118237   \n2       13.467614  ...  11.883336   7.890743            7.774707   \n3       14.101651  ...  13.293660  11.868081            7.320987   \n\n   lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0                   16.5          53.611    11.702478          13.780033   \n1                   16.5          54.175    11.376034          14.073244   \n2                   16.5          54.732    11.959873          15.563031   \n3                   16.5          55.281    12.077793          17.460567   \n\n   military expenditure  year.1            labels  \n0              3.133781    1979       High Growth  \n1              3.186248    1980       High Growth  \n2              3.345118    1981   Moderate Growth  \n3              3.323069    1982  Very High Growth  \n\n[4 rows x 36 columns]\n\n\n\nstacked_df.isna().sum()\n\nyear                              0\nadj_NNI_g                         0\nadj_NNI_c                         0\nadj_savings_fix_cap_GNI           0\nadj_savings_edu_GNI               0\nadj_NNS_GNI                       0\ncurr_acc_bal                      0\nex_imp_gdp                        0\nex_imp_growth                     0\nex_debt_shocks                    0\nfinal_consump_exp_gdp            34\nfinal_consump_exp_growth          0\nfdi_net_inflows                   0\nfdi_net_outflows                  0\ngdp_growth                        0\ngdp_per_capita_growth             0\ngener_govt_fin_consump_exp        0\ngni_growth                        0\ngoods_exp_bop                     0\ngoods_imp_bop                    34\nimports_goods_services_gdp        0\nimports_goods_services_growth     0\nservices_gdp                      0\nservices_growth                   0\nshort_term_debt_tot_reserves     34\ntrade_gdp                         0\ncpi                               0\ninflation                         0\nreal_interest_rate                0\nlending_interest_rate             0\nlife_exp_birth                    0\nexpense_gdp                       0\ninterest_payments                 0\nmilitary expenditure              0\nyear.1                           50\nlabels                           11\ndtype: int64\n\n\n\nstacked_df.dtypes\n\nyear                               int64\nadj_NNI_g                        float64\nadj_NNI_c                        float64\nadj_savings_fix_cap_GNI          float64\nadj_savings_edu_GNI              float64\nadj_NNS_GNI                      float64\ncurr_acc_bal                     float64\nex_imp_gdp                       float64\nex_imp_growth                    float64\nex_debt_shocks                   float64\nfinal_consump_exp_gdp            float64\nfinal_consump_exp_growth         float64\nfdi_net_inflows                  float64\nfdi_net_outflows                 float64\ngdp_growth                       float64\ngdp_per_capita_growth            float64\ngener_govt_fin_consump_exp       float64\ngni_growth                       float64\ngoods_exp_bop                    float64\ngoods_imp_bop                    float64\nimports_goods_services_gdp       float64\nimports_goods_services_growth    float64\nservices_gdp                     float64\nservices_growth                  float64\nshort_term_debt_tot_reserves     float64\ntrade_gdp                        float64\ncpi                              float64\ninflation                        float64\nreal_interest_rate               float64\nlending_interest_rate            float64\nlife_exp_birth                   float64\nexpense_gdp                      float64\ninterest_payments                float64\nmilitary expenditure             float64\nyear.1                           float64\nlabels                            object\ndtype: object\n\n\n\n# normalise the data \n\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\n\nnumerical_columns = stacked_df.select_dtypes(include=['float64', 'int64']).columns\n\nscaler = StandardScaler()\ndf_standardized = pd.DataFrame(scaler.fit_transform(stacked_df[numerical_columns]), columns=numerical_columns)\n\nstacked_df[df_standardized.columns] = df_standardized\n\nprint(stacked_df)\n\n        year  adj_NNI_g  adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0  -1.647859   1.230366  -0.584186                 0.270892   \n1  -1.572340  -1.216110  -0.587317                 0.313510   \n2  -1.496821  -0.510146  -0.585389                 0.367195   \n3  -1.421301   1.160350  -0.571455                 0.316780   \n4  -1.345782  -0.472199  -0.568965                 0.362786   \n..       ...        ...        ...                      ...   \n45 -0.364032   2.527897  -0.512882                 1.759849   \n46 -0.288513  -0.118473  -0.505246                -0.224029   \n47 -0.212994  -1.870050  -0.518213                -1.539088   \n48 -0.137474   2.674116  -0.479613                 1.894557   \n49 -0.061955   3.005168  -0.428619                 2.160723   \n\n    adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0             -0.277537    -0.052004     -1.431497   -0.575405       0.419580   \n1             -0.277537     0.103127     -1.461364   -0.595831      -0.481153   \n2             -0.277537     0.049534     -1.451971   -0.591086       0.536099   \n3             -0.277537     0.046547     -1.426664   -0.605706      -0.495731   \n4             -0.277537     0.058430     -1.440478   -0.560968       0.726138   \n..                  ...          ...           ...         ...            ...   \n45            -0.277537    -0.518910      0.515624   -2.052646       0.024080   \n46            -0.277537    -0.518910      0.168654   -2.220329      -0.390300   \n47            -0.277537    -0.518910      0.016460   -2.339903      -0.355711   \n48            -0.277537    -0.518732      0.646093   -0.322323       1.376085   \n49            -0.277537    -0.518555      1.173862    0.855100       2.240148   \n\n    ex_debt_shocks  ...       cpi  inflation  real_interest_rate  \\\n0        -1.270470  ... -0.233992  -0.710643           -1.482124   \n1        -1.204634  ... -0.201048  -0.685047           -1.448189   \n2        -0.969857  ... -0.178623  -0.760710           -1.307713   \n3        -0.889487  ... -0.142234  -0.703079           -1.331706   \n4        -0.708319  ... -0.113700  -0.754506           -1.298597   \n..             ...  ...       ...        ...                 ...   \n45        0.628001  ... -0.501653   0.205699            0.815326   \n46        0.457744  ... -0.443525  -0.375942            0.780130   \n47        1.280590  ... -0.577392   0.927162            1.230426   \n48        2.801555  ... -0.427215   0.961900            1.950714   \n49        2.908093  ... -0.302204  -0.056144            1.882002   \n\n    lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0               -0.845342       -0.112698    -0.121526          -2.585569   \n1               -0.845342       -0.110878    -0.141348          -2.568657   \n2               -0.845342       -0.109081    -0.105898          -2.482726   \n3               -0.845342       -0.107310    -0.098738          -2.373275   \n4               -0.845342       -0.105584    -0.034063          -2.283824   \n..                    ...             ...          ...                ...   \n45              -0.979266       -0.131598    -0.824782           0.418079   \n46              -0.953380       -0.238025     0.064149           0.466798   \n47              -0.897663       -0.196331     0.358975           0.485889   \n48              -0.677325       -0.009030    -1.982792           0.425465   \n49              -0.578051       -0.218548    -1.416990           0.396709   \n\n    military expenditure    year.1            labels  \n0              -0.167829 -1.808466       High Growth  \n1              -0.151690 -1.729441       High Growth  \n2              -0.102821 -1.650415   Moderate Growth  \n3              -0.109603 -1.571390  Very High Growth  \n4              -0.080748 -1.492364   Moderate Growth  \n..                   ...       ...               ...  \n45              0.023742 -0.465034        Low Growth  \n46              0.110872 -0.386009        Low Growth  \n47             -0.291221 -0.306983        Low Growth  \n48             -0.186438 -0.227958  Very High Growth  \n49             -0.114537 -0.148933   Moderate Growth  \n\n[206 rows x 36 columns]\n\n\n\nstacked_df = stacked_df.dropna()\n\n\nstacked_df.isna().sum()\n\nyear                             0\nadj_NNI_g                        0\nadj_NNI_c                        0\nadj_savings_fix_cap_GNI          0\nadj_savings_edu_GNI              0\nadj_NNS_GNI                      0\ncurr_acc_bal                     0\nex_imp_gdp                       0\nex_imp_growth                    0\nex_debt_shocks                   0\nfinal_consump_exp_gdp            0\nfinal_consump_exp_growth         0\nfdi_net_inflows                  0\nfdi_net_outflows                 0\ngdp_growth                       0\ngdp_per_capita_growth            0\ngener_govt_fin_consump_exp       0\ngni_growth                       0\ngoods_exp_bop                    0\ngoods_imp_bop                    0\nimports_goods_services_gdp       0\nimports_goods_services_growth    0\nservices_gdp                     0\nservices_growth                  0\nshort_term_debt_tot_reserves     0\ntrade_gdp                        0\ncpi                              0\ninflation                        0\nreal_interest_rate               0\nlending_interest_rate            0\nlife_exp_birth                   0\nexpense_gdp                      0\ninterest_payments                0\nmilitary expenditure             0\nyear.1                           0\nlabels                           0\ndtype: int64\n\n\n\nstacked_df.drop(columns='year')\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear.1\nlabels\n\n\n\n\n0\n1.230366\n-0.584186\n0.270892\n-0.277537\n-0.052004\n-1.431497\n-0.575405\n0.419580\n-1.270470\n2.105233\n...\n-0.233992\n-0.710643\n-1.482124\n-0.845342\n-0.112698\n-0.121526\n-2.585569\n-0.167829\n-1.808466\nHigh Growth\n\n\n1\n-1.216110\n-0.587317\n0.313510\n-0.277537\n0.103127\n-1.461364\n-0.595831\n-0.481153\n-1.204634\n2.049838\n...\n-0.201048\n-0.685047\n-1.448189\n-0.845342\n-0.110878\n-0.141348\n-2.568657\n-0.151690\n-1.729441\nHigh Growth\n\n\n2\n-0.510146\n-0.585389\n0.367195\n-0.277537\n0.049534\n-1.451971\n-0.591086\n0.536099\n-0.969857\n2.035450\n...\n-0.178623\n-0.760710\n-1.307713\n-0.845342\n-0.109081\n-0.105898\n-2.482726\n-0.102821\n-1.650415\nModerate Growth\n\n\n3\n1.160350\n-0.571455\n0.316780\n-0.277537\n0.046547\n-1.426664\n-0.605706\n-0.495731\n-0.889487\n2.045585\n...\n-0.142234\n-0.703079\n-1.331706\n-0.845342\n-0.107310\n-0.098738\n-2.373275\n-0.109603\n-1.571390\nVery High Growth\n\n\n4\n-0.472199\n-0.568965\n0.362786\n-0.277537\n0.058430\n-1.440478\n-0.560968\n0.726138\n-0.708319\n2.023954\n...\n-0.113700\n-0.754506\n-1.298597\n-0.845342\n-0.105584\n-0.034063\n-2.283824\n-0.080748\n-1.492364\nModerate Growth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n45\n2.527897\n-0.512882\n1.759849\n-0.277537\n-0.518910\n0.515624\n-2.052646\n0.024080\n0.628001\n-0.581674\n...\n-0.501653\n0.205699\n0.815326\n-0.979266\n-0.131598\n-0.824782\n0.418079\n0.023742\n-0.465034\nLow Growth\n\n\n46\n-0.118473\n-0.505246\n-0.224029\n-0.277537\n-0.518910\n0.168654\n-2.220329\n-0.390300\n0.457744\n-0.713473\n...\n-0.443525\n-0.375942\n0.780130\n-0.953380\n-0.238025\n0.064149\n0.466798\n0.110872\n-0.386009\nLow Growth\n\n\n47\n-1.870050\n-0.518213\n-1.539088\n-0.277537\n-0.518910\n0.016460\n-2.339903\n-0.355711\n1.280590\n-0.636601\n...\n-0.577392\n0.927162\n1.230426\n-0.897663\n-0.196331\n0.358975\n0.485889\n-0.291221\n-0.306983\nLow Growth\n\n\n48\n2.674116\n-0.479613\n1.894557\n-0.277537\n-0.518732\n0.646093\n-0.322323\n1.376085\n2.801555\n-0.338714\n...\n-0.427215\n0.961900\n1.950714\n-0.677325\n-0.009030\n-1.982792\n0.425465\n-0.186438\n-0.227958\nVery High Growth\n\n\n49\n3.005168\n-0.428619\n2.160723\n-0.277537\n-0.518555\n1.173862\n0.855100\n2.240148\n2.908093\n-0.393170\n...\n-0.302204\n-0.056144\n1.882002\n-0.578051\n-0.218548\n-1.416990\n0.396709\n-0.114537\n-0.148933\nModerate Growth\n\n\n\n\n195 rows × 35 columns\n\n\n\n\nstacked_df.describe\n\n&lt;bound method NDFrame.describe of         year  adj_NNI_g  adj_NNI_c  adj_savings_fix_cap_GNI  \\\n0  -1.647859   1.230366  -0.584186                 0.270892   \n1  -1.572340  -1.216110  -0.587317                 0.313510   \n2  -1.496821  -0.510146  -0.585389                 0.367195   \n3  -1.421301   1.160350  -0.571455                 0.316780   \n4  -1.345782  -0.472199  -0.568965                 0.362786   \n..       ...        ...        ...                      ...   \n45 -0.364032   2.527897  -0.512882                 1.759849   \n46 -0.288513  -0.118473  -0.505246                -0.224029   \n47 -0.212994  -1.870050  -0.518213                -1.539088   \n48 -0.137474   2.674116  -0.479613                 1.894557   \n49 -0.061955   3.005168  -0.428619                 2.160723   \n\n    adj_savings_edu_GNI  adj_NNS_GNI  curr_acc_bal  ex_imp_gdp  ex_imp_growth  \\\n0             -0.277537    -0.052004     -1.431497   -0.575405       0.419580   \n1             -0.277537     0.103127     -1.461364   -0.595831      -0.481153   \n2             -0.277537     0.049534     -1.451971   -0.591086       0.536099   \n3             -0.277537     0.046547     -1.426664   -0.605706      -0.495731   \n4             -0.277537     0.058430     -1.440478   -0.560968       0.726138   \n..                  ...          ...           ...         ...            ...   \n45            -0.277537    -0.518910      0.515624   -2.052646       0.024080   \n46            -0.277537    -0.518910      0.168654   -2.220329      -0.390300   \n47            -0.277537    -0.518910      0.016460   -2.339903      -0.355711   \n48            -0.277537    -0.518732      0.646093   -0.322323       1.376085   \n49            -0.277537    -0.518555      1.173862    0.855100       2.240148   \n\n    ex_debt_shocks  ...       cpi  inflation  real_interest_rate  \\\n0        -1.270470  ... -0.233992  -0.710643           -1.482124   \n1        -1.204634  ... -0.201048  -0.685047           -1.448189   \n2        -0.969857  ... -0.178623  -0.760710           -1.307713   \n3        -0.889487  ... -0.142234  -0.703079           -1.331706   \n4        -0.708319  ... -0.113700  -0.754506           -1.298597   \n..             ...  ...       ...        ...                 ...   \n45        0.628001  ... -0.501653   0.205699            0.815326   \n46        0.457744  ... -0.443525  -0.375942            0.780130   \n47        1.280590  ... -0.577392   0.927162            1.230426   \n48        2.801555  ... -0.427215   0.961900            1.950714   \n49        2.908093  ... -0.302204  -0.056144            1.882002   \n\n    lending_interest_rate  life_exp_birth  expense_gdp  interest_payments  \\\n0               -0.845342       -0.112698    -0.121526          -2.585569   \n1               -0.845342       -0.110878    -0.141348          -2.568657   \n2               -0.845342       -0.109081    -0.105898          -2.482726   \n3               -0.845342       -0.107310    -0.098738          -2.373275   \n4               -0.845342       -0.105584    -0.034063          -2.283824   \n..                    ...             ...          ...                ...   \n45              -0.979266       -0.131598    -0.824782           0.418079   \n46              -0.953380       -0.238025     0.064149           0.466798   \n47              -0.897663       -0.196331     0.358975           0.485889   \n48              -0.677325       -0.009030    -1.982792           0.425465   \n49              -0.578051       -0.218548    -1.416990           0.396709   \n\n    military expenditure    year.1            labels  \n0              -0.167829 -1.808466       High Growth  \n1              -0.151690 -1.729441       High Growth  \n2              -0.102821 -1.650415   Moderate Growth  \n3              -0.109603 -1.571390  Very High Growth  \n4              -0.080748 -1.492364   Moderate Growth  \n..                   ...       ...               ...  \n45              0.023742 -0.465034        Low Growth  \n46              0.110872 -0.386009        Low Growth  \n47             -0.291221 -0.306983        Low Growth  \n48             -0.186438 -0.227958  Very High Growth  \n49             -0.114537 -0.148933   Moderate Growth  \n\n[195 rows x 36 columns]&gt;\n\n\n\n# Visual Data Representation\n\n\n# Histograms\n\n\nfig, ax = plt.subplots()\nax.hist(india[\"inflation\"], bins=30, alpha=0.5, label='India')\nax.hist(china[\"inflation\"], bins=30, alpha=0.5, label='China')\nax.hist(russia[\"inflation\"], bins=30, alpha=0.5, label='Russia')\nax.hist(brazil[\"inflation\"], bins=30, alpha=0.5, label='Brazil')\nax.hist(southafrica[\"inflation\"], bins=30, alpha=0.5, label='South Africa')\n\nax.set_xlabel('Inflation')\nax.set_ylabel('Percentage')\nax.set_title('BRICS')\nax.legend()\nplt.show()\n\n\n\n\n\n# Scatterplots\n\n\nfig= plt.figure(figsize=(18, 9))\nfig.suptitle('Trade Analysis')\n\nax1= fig.add_subplot(331)\nax1.set_title('India')\nax1.plot(india['year'],\n        india['trade_gdp'],\n        color='blue')\nax2= fig.add_subplot(332)\nax2.set_title('China')\nax2.plot(china['year'],\n        china['trade_gdp'],\n        color='brown')\nax3= fig.add_subplot(333)\nax3.set_title('Russia')\nax3.plot(russia['year'],\n        russia['trade_gdp'],\n        color='pink')\nax4= fig.add_subplot(334)\nax4.set_title('South Africa')\nax4.plot(southafrica['year'],\n        southafrica['trade_gdp'],\n        color='pink')\nax5= fig.add_subplot(335)\nax5.set_title('Brazil')\nax5.plot(brazil['year'],\n        brazil['trade_gdp'],\n        color='orange')\n\n\n\n\n\n# Create a Matplotlib figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a boxplot for all numerical columns in the DataFrame\nindia.boxplot(ax=ax)\n\n# Add labels and a title\nax.set_ylabel('Value')\nax.set_title('India')\n\n# Show the plot\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nrussia.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('Russia')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nchina.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('China')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nsouthafrica.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('South Africa')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbrazil.boxplot(ax=ax)\nax.set_ylabel('Value')\nax.set_title('Brazil')\nplt.xticks(rotation=90)\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = india.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = china.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = russia.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = southafrica.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nsns.set_theme(style=\"white\")\ncorr = brazil.corr(numeric_only=True)  #Computing correlation matrix\nmask = np.triu(np.ones_like(corr, dtype=bool)) \nf, ax = plt.subplots(figsize=(7, 5))\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\n\n\n\n\n\nfig, axes = plt.subplots(1, 5, figsize=(15, 5))\nsns.scatterplot(data=india, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[0])\naxes[0].set_title('India')\nsns.scatterplot(data=russia, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[1])\naxes[1].set_title('Russia')\nsns.scatterplot(data=china, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[2])\naxes[2].set_title('China')\nsns.scatterplot(data=brazil, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[3])\naxes[3].set_title('Brazil')\nsns.scatterplot(data=southafrica, x=\"year\", y=\"adj_NNI_g\", hue='cpi', ax=axes[4])\naxes[4].set_title('South Africa')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nsns.scatterplot(data=china, x=\"year\", y=\"adj_NNI_g\", hue='cpi')\n\n&lt;Axes: xlabel='year', ylabel='adj_NNI_g'&gt;\n\n\n\n\n\n\nsns.scatterplot(data=southafrica, x=\"year\", y=\"adj_NNI_g\", hue='cpi')\n\n&lt;Axes: xlabel='year', ylabel='adj_NNI_g'&gt;\n\n\n\n\n\n\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=india,palette='rainbow')\n\n&lt;Axes: xlabel='labels', ylabel='gni_growth'&gt;\n\n\n\n\n\n\nfig, axes = plt.subplots(1, 5, figsize=(15, 5))\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=india, ax=axes[0])\naxes[0].set_title('India')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=russia, ax=axes[1])\naxes[1].set_title('Russia')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=china, ax=axes[2])\naxes[2].set_title('China')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=brazil, ax=axes[3])\naxes[3].set_title('Brazil')\nsns.violinplot(x=\"labels\", y=\"gni_growth\", data=southafrica, ax=axes[4])\naxes[4].set_title('South Africa')\nfor ax in axes:\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nplt.tight_layout()\nplt.show()\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_41653/980302243.py:13: UserWarning: FixedFormatter should only be used together with FixedLocator\n  ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\n\n\n\n\n\n# links used \n# https://towardsdatascience.com/data-visualization-using-matplotlib-16f1aae5ce70\n# https://nbviewer.org/github/BadreeshShetty/Data-Visualization-using-Matplotlib/blob/master/%281%29Histograms.ipynb\n\n\n# finding correlations - top 10 and bottom 10\ncorr = stacked_df.corr()\n\npositive_corr = corr[corr &gt; 0].stack().sort_values(ascending=True).head(10)\nprint(\"Top 10 Positive Correlations:\")\nprint(positive_corr)\n\nnegative_corr = corr[corr &lt; 0].stack().sort_values(ascending=True).head(10)\nprint(\"\\nTop 10 Negative Correlations:\")\nprint(negative_corr)\n\nTop 10 Positive Correlations:\nservices_growth          ex_imp_growth              0.002156\nex_imp_growth            services_growth            0.002156\nyear                     fdi_net_inflows            0.004391\nfdi_net_inflows          year                       0.004391\n                         year.1                     0.004391\nyear.1                   fdi_net_inflows            0.004391\nexpense_gdp              fdi_net_outflows           0.008516\nfdi_net_outflows         expense_gdp                0.008516\nadj_savings_fix_cap_GNI  trade_gdp                  0.010122\ntrade_gdp                adj_savings_fix_cap_GNI    0.010122\ndtype: float64\n\nTop 10 Negative Correlations:\nfdi_net_inflows                final_consump_exp_gdp           -0.951428\nfinal_consump_exp_gdp          fdi_net_inflows                 -0.951428\nadj_savings_edu_GNI            gener_govt_fin_consump_exp      -0.940114\ngener_govt_fin_consump_exp     adj_savings_edu_GNI             -0.940114\nimports_goods_services_growth  final_consump_exp_gdp           -0.932700\nfinal_consump_exp_gdp          imports_goods_services_growth   -0.932700\nservices_gdp                   final_consump_exp_gdp           -0.926872\nfinal_consump_exp_gdp          services_gdp                    -0.926872\n                               curr_acc_bal                    -0.899807\ncurr_acc_bal                   final_consump_exp_gdp           -0.899807\ndtype: float64\n\n\n\ncorrelation_threshold = 0.8  # Adjust as needed\nnegative_correlation_threshold = -0.8  # Adjust as needed\n\ncolumns_to_drop = set()\n\nfor i in range(len(corr.columns)):\n    for j in range(i):\n        if abs(corr.iloc[i, j]) &gt; correlation_threshold or corr.iloc[i, j] &lt; negative_correlation_threshold:\n            colname = corr.columns[i]\n            columns_to_drop.add(colname)\n\n\nstacked_df_dropped = stacked_df.drop(columns=columns_to_drop)\n\nprint(stacked_df_dropped)\n\n# saving the file\n#csv_file='../data/stackeddf.csv'\n#stacked_df_dropped.to_csv(csv_file, index=False)\n\n        year  adj_NNI_g  adj_savings_fix_cap_GNI  adj_savings_edu_GNI  \\\n0  -1.647859   1.230366                 0.270892            -0.277537   \n1  -1.572340  -1.216110                 0.313510            -0.277537   \n2  -1.496821  -0.510146                 0.367195            -0.277537   \n3  -1.421301   1.160350                 0.316780            -0.277537   \n4  -1.345782  -0.472199                 0.362786            -0.277537   \n..       ...        ...                      ...                  ...   \n45 -0.364032   2.527897                 1.759849            -0.277537   \n46 -0.288513  -0.118473                -0.224029            -0.277537   \n47 -0.212994  -1.870050                -1.539088            -0.277537   \n48 -0.137474   2.674116                 1.894557            -0.277537   \n49 -0.061955   3.005168                 2.160723            -0.277537   \n\n    adj_NNS_GNI  ex_imp_growth  ex_debt_shocks  fdi_net_outflows  gdp_growth  \\\n0     -0.052004       0.419580       -1.270470         -0.842531    1.595002   \n1      0.103127      -0.481153       -1.204634         -0.842808    1.304262   \n2      0.049534       0.536099       -0.969857         -0.842942    0.295912   \n3      0.046547      -0.495731       -0.889487         -0.842495    1.815392   \n4      0.058430       0.726138       -0.708319         -0.842596    0.433390   \n..          ...            ...             ...               ...         ...   \n45    -0.518910       0.024080        0.628001         -1.331112   -0.826727   \n46    -0.518910      -0.390300        0.457744         -0.144805   -0.610388   \n47    -0.518910      -0.355711        1.280590         -1.366720   -0.683008   \n48    -0.518732       1.376085        2.801555         -1.142294   -0.426718   \n49    -0.518555       2.240148        2.908093          0.553344   -0.678209   \n\n    short_term_debt_tot_reserves  lending_interest_rate  life_exp_birth  \\\n0                      -0.032164              -0.845342       -0.112698   \n1                       0.403253              -0.845342       -0.110878   \n2                       0.851964              -0.845342       -0.109081   \n3                       1.403674              -0.845342       -0.107310   \n4                       1.517825              -0.845342       -0.105584   \n..                           ...                    ...             ...   \n45                     -0.526985              -0.979266       -0.131598   \n46                     -0.518753              -0.953380       -0.238025   \n47                     -1.369414              -0.897663       -0.196331   \n48                     -1.350293              -0.677325       -0.009030   \n49                      1.010385              -0.578051       -0.218548   \n\n    expense_gdp  military expenditure            labels  \n0     -0.121526             -0.167829       High Growth  \n1     -0.141348             -0.151690       High Growth  \n2     -0.105898             -0.102821   Moderate Growth  \n3     -0.098738             -0.109603  Very High Growth  \n4     -0.034063             -0.080748   Moderate Growth  \n..          ...                   ...               ...  \n45    -0.824782              0.023742        Low Growth  \n46     0.064149              0.110872        Low Growth  \n47     0.358975             -0.291221        Low Growth  \n48    -1.982792             -0.186438  Very High Growth  \n49    -1.416990             -0.114537   Moderate Growth  \n\n[195 rows x 15 columns]\n\n\n\nY = stacked_df_dropped['labels']\nX =  stacked_df_dropped.drop(['labels'],axis =1)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=42, test_size=0.2)\nx_train_valid, x_valid_test, y_train_valid, y_valid_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\n\n# Print the shapes of the datasets\nprint('Train data    : ' + str(X_train.shape))\nprint('Test data     : ' + str(X_test.shape))\nprint('Train Output  : ' + str(y_train.shape))\nprint('Test Output   : ' + str(y_test.shape))\nprint('Valid Train data    : ' + str(x_train_valid.shape))\nprint('Valid Test data     : ' + str(x_valid_test.shape))\nprint('Valid Train Output  : ' + str(y_train_valid.shape))\nprint('Valid Test Output   : ' + str(y_valid_test.shape))\n\nfrom sklearn import preprocessing\n\n# Assuming Y is your target variable\nyop = [str(i) for i in Y]  # Convert labels to strings\n\nle = preprocessing.LabelEncoder()\nY_op = le.fit_transform(yop)\n\n# Print the classes learned by the LabelEncoder\nprint(le.classes_)\n\nTrain data    : (156, 14)\nTest data     : (39, 14)\nTrain Output  : (156,)\nTest Output   : (39,)\nValid Train data    : (19, 14)\nValid Test data     : (20, 14)\nValid Train Output  : (19,)\nValid Test Output   : (20,)\n['High Growth' 'Low Growth' 'Moderate Growth' 'Very High Growth']\n\n\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay\n\n\nnaive_bayes = GaussianNB()\nnaive_bayes.fit(X_train, y_train)\n\nGaussianNB()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GaussianNBGaussianNB()\n\n\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n# Instantiate Gaussian Naive Bayes model\nnaive_bayes = GaussianNB()\n\n# Train the model on the training set\nnaive_bayes.fit(X_train, y_train)\n\n# Make predictions on the training, validation, and test sets\npred_train = naive_bayes.predict(X_train)\npred_valid = naive_bayes.predict(x_train_valid)\npred_test = naive_bayes.predict(X_test)\n\n# Function to calculate and print metrics\ndef print_metrics(y_true, y_pred, set_name):\n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true, y_pred, average='weighted')\n    recall = recall_score(y_true, y_pred, average='weighted')\n    f1 = f1_score(y_true, y_pred, average='weighted')\n\n    print(f\"{set_name} Set Metrics:\")\n    print(f\"Accuracy: {accuracy:.4f}\")\n    print(f\"Precision: {precision:.4f}\")\n    print(f\"Recall: {recall:.4f}\")\n    print(f\"F1 Score: {f1:.4f}\")\n    print(\"\\n\")\n\n# Print metrics for each set\nprint_metrics(y_train, pred_train, \"Training\")\nprint_metrics(y_train_valid, pred_valid, \"Validation\")\nprint_metrics(y_test, pred_test, \"Testing\")\n\nTraining Set Metrics:\nAccuracy: 0.3013\nPrecision: 0.5200\nRecall: 0.3013\nF1 Score: 0.3258\n\n\nValidation Set Metrics:\nAccuracy: 0.4211\nPrecision: 0.8585\nRecall: 0.4211\nF1 Score: 0.4842\n\n\nTesting Set Metrics:\nAccuracy: 0.3333\nPrecision: 0.6312\nRecall: 0.3333\nF1 Score: 0.3477\n\n\n\n\n\nConfusionMatrixDisplay.from_predictions(y_test, pred_test)\nConfusionMatrixDisplay.from_predictions(y_train, pred_train)\n\n&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x16d653d60&gt;\n\n\n\n\n\n\n\n\nPCA\n\n# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import silhouette_score\n\n\n\n\n# PCA \n\ny = stacked_df_dropped['labels']\nx = stacked_df_dropped.drop(['labels'], axis=1)\n\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\npca1 = PCA()\npca_result = pca1.fit_transform(x)\n\nprint(pca_result)\n\n[[ 7.62571967e-01 -6.26043200e-01 -2.30866090e-01 ... -3.68266626e-02\n  -9.43207244e-03 -1.16245306e-12]\n [ 1.86852321e+00 -1.42033301e+00  1.23674495e-01 ...  2.85634458e-02\n   2.13734846e-02 -2.92256509e-13]\n [ 1.78069560e+00 -6.75060179e-01 -7.31259179e-01 ...  5.53506048e-03\n   2.15628745e-03 -1.56201244e-12]\n ...\n [ 2.00350774e+00 -3.63942297e+00 -1.87451963e+00 ...  1.76194346e-01\n  -2.61901427e-02  3.58566126e-12]\n [ 5.11008136e-02 -1.05869012e+00 -2.55586066e+00 ...  7.92424281e-02\n  -4.88649412e-02 -7.00349518e-12]\n [ 6.30703303e-01  1.25498085e+00 -2.37715116e+00 ...  1.25566938e-02\n  -1.50273539e-02  2.09843682e-12]]\n\n\n\nevr= pca1.explained_variance_ratio_\ncum_var = np.cumsum(pca1.explained_variance_ratio_)\noptimal = np.argmax(cum_var &gt;= 0.75) + 1\n\nprint(\"Optimal Number of Components:\", optimal)\n\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(cum_var) + 1 ), cum_var, linestyle='--')\nplt.xlabel('Components')\nplt.ylabel('Explained Variance Ratio (cumulative)')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\nOptimal Number of Components: 4\n\n\n\n\n\n\n# pca with optimal components\n\npca2 = PCA(n_components=4)\npca_optimal2 = pca2.fit_transform(x)\n\nevr2 = pca2.explained_variance_ratio_\ncev2 = np.cumsum(evr2)\n\nprint(pca_optimal2[0:10])\n\n[[ 0.76257197 -0.6260432  -0.23086609 -2.59040608]\n [ 1.86852321 -1.42033301  0.1236745  -1.00166474]\n [ 1.7806956  -0.67506018 -0.73125918 -0.66213051]\n [ 1.73581487  0.08114664  0.88863619 -2.10613841]\n [ 1.91751146 -0.02151058 -0.62973654 -0.38327002]\n [ 2.71648514 -0.68755858  1.03310853 -0.8007282 ]\n [ 1.97349223  0.24045813 -0.25631107 -0.67853068]\n [ 1.42712716  0.85358937 -0.9723162  -0.45607911]\n [ 1.35839281  1.90954496  0.73221295 -1.18362437]\n [ 1.94311949  2.67844446  0.0827333   0.30600975]]\n\n\n\npcadf = pd.DataFrame(data=pca_optimal2, index=x.index, columns= ['PC1','PC2', 'PC3','PC4'])\npcadf.head(10)\n\n\n\n\n\n\n\n\nPC1\nPC2\nPC3\nPC4\n\n\n\n\n0\n0.762572\n-0.626043\n-0.230866\n-2.590406\n\n\n1\n1.868523\n-1.420333\n0.123674\n-1.001665\n\n\n2\n1.780696\n-0.675060\n-0.731259\n-0.662131\n\n\n3\n1.735815\n0.081147\n0.888636\n-2.106138\n\n\n4\n1.917511\n-0.021511\n-0.629737\n-0.383270\n\n\n5\n2.716485\n-0.687559\n1.033109\n-0.800728\n\n\n6\n1.973492\n0.240458\n-0.256311\n-0.678531\n\n\n7\n1.427127\n0.853589\n-0.972316\n-0.456079\n\n\n8\n1.358393\n1.909545\n0.732213\n-1.183624\n\n\n9\n1.943119\n2.678444\n0.082733\n0.306010\n\n\n\n\n\n\n\n\n\nprint(\"Explained Variance Ratio for Each Component:\")\nprint(evr2*100)\n\nprint(\"\\nCumulative Explained Variance:\")\nprint(cev2*100)\n\ne = pca2.explained_variance_ratio_\n\n# Print overall explained variance ratio\nprint(\"Overall Explained Variance Ratio:\", sum(e)*100)\n\nfrom sklearn.metrics import silhouette_samples\n\nsil_val = silhouette_samples(pca_optimal2, y)\nprint(sil_val[0:10])\n\navg_sil_score = np.mean(sil_val)\nprint(f\"Average Silhouette Score for PCA: {avg_sil_score}\")\n\n\nExplained Variance Ratio for Each Component:\n[34.22972792 22.08761959 14.72048604 11.766315  ]\n\nCumulative Explained Variance:\n[34.22972792 56.31734751 71.03783355 82.80414855]\nOverall Explained Variance Ratio: 82.80414854824095\n[-0.07892657 -0.02874872 -0.09320622 -0.16876901 -0.11519626  0.04725516\n -0.13561769 -0.0658181  -0.15181648  0.02498319]\nAverage Silhouette Score for PCA: -0.09704378288837297\n\n\n\n\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(e) + 1), cev2, marker='o', linestyle='--')\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\n\n\n\n\n\nplt.figure(figsize=(10, 10))\n\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('Reduced-Dimensional Data with PCA')\nplt.legend()\nplt.show()\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_41653/1286041017.py:5: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\n\n\n\n\n\n# t-sne\n\nperplex_values = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 100]\n\nfor p in perplex_values:\n    tsne = TSNE(n_components=2, perplexity=p, random_state=2339)\n    X = tsne.fit_transform(x)\n    \n    avg = silhouette_score(X, y)\n    \n    print(f\"Perplexity {p}: Silhouette Score = {avg}\")\n\nPerplexity 1: Silhouette Score = -0.08198484778404236\nPerplexity 2: Silhouette Score = -0.055559705942869186\nPerplexity 3: Silhouette Score = -0.06099412217736244\nPerplexity 4: Silhouette Score = -0.06829451769590378\nPerplexity 5: Silhouette Score = -0.0636918768286705\nPerplexity 10: Silhouette Score = -0.06911653280258179\nPerplexity 15: Silhouette Score = -0.09194755554199219\nPerplexity 20: Silhouette Score = -0.08281858265399933\nPerplexity 25: Silhouette Score = -0.08434560894966125\nPerplexity 30: Silhouette Score = -0.0772019475698471\nPerplexity 35: Silhouette Score = -0.09676646441221237\nPerplexity 40: Silhouette Score = -0.11943919956684113\nPerplexity 45: Silhouette Score = -0.06866727024316788\nPerplexity 50: Silhouette Score = -0.1278223693370819\nPerplexity 55: Silhouette Score = -0.09298355877399445\nPerplexity 60: Silhouette Score = -0.08441784232854843\nPerplexity 100: Silhouette Score = -0.0959368422627449\n\n\n\n# Try a viz of perplexity values\nval = [2, 50, 100]\n\n# Create subplots to compare t-SNE results with different perplexities\nplt.figure(figsize=(15, 5))\n\nfor i, p in enumerate(val, 1):\n    tsne = TSNE(n_components=3, perplexity=p, random_state=2339)\n    X_tsne = tsne.fit_transform(x)\n\n    plt.subplot(1, len(val), i)\n    plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\n    plt.title(f't-SNE with Perplexity {p}')\n    plt.xlabel('t-SNE Component 1')\n    plt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\ntsne = TSNE(n_components=3, perplexity=2, random_state=42)\nX_tsne = tsne.fit_transform(x)\n\nsil_tsne = silhouette_samples(X_tsne, y)\nprint(sil_tsne[0:10])\n\navg_tsne_score = np.mean(sil_tsne)\nprint(f\"Average Silhouette Score for t-SNE: {avg_tsne_score}\")\n\n[ 0.00318419  0.01473387 -0.02172711 -0.16240974  0.00434295  0.08726601\n -0.06315608  0.04417509  0.05092624 -0.14183001]\nAverage Silhouette Score for t-SNE: -0.06379585713148117\n\n\n\nplt.figure(figsize=(10, 6))\nplt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title(f't-SNE with Perplexity {2}')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n# pca vs tsne\n\nplt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('Reduced-Dimensional Data with PCA')\nplt.legend()\nplt.show()\n\nplt.subplot(1, 2, 2)\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(X_tsne[indices, 0], X_tsne[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\n# Adding legend\nplt.legend()\n\nplt.title(f't-SNE with Perplexity {2}')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_41653/713093619.py:8: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_41653/713093619.py:19: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  plt.scatter(X_tsne[indices, 0], X_tsne[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\n\n\n\n\n\n\n\n\nprint(f\"Average Silhouette Score for t-SNE: {avg_tsne_score}\")\nprint(f\"Average Silhouette Score for PCA: {avg_sil_score}\")\n\nAverage Silhouette Score for t-SNE: -0.06379585713148117\nAverage Silhouette Score for PCA: -0.09704378288837297\n\n\n\n# t-sne on pca\ntsne_on_pca = TSNE(n_components=3, perplexity=2, random_state=42)\ntsne_pca = tsne_on_pca.fit_transform(pca_optimal2)\n\n# pca on t-sne\npca_on_tsne = PCA(n_components=3)\npca_tsne = pca_on_tsne.fit_transform(tsne_pca)\n\n# Visualize PCA and t-SNE plots together\nplt.figure(figsize=(15, 5))\n\n# orginal pca \nplt.subplot(1, 3, 1)\nplt.scatter(pca_optimal2[:, 0], pca_optimal2[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('Original PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# t-sne on pca\nplt.subplot(1, 3, 2)\nplt.scatter(tsne_pca[:, 0], tsne_pca[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('t-SNE on PCA')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\n# pca on t-sne\nplt.subplot(1, 3, 3)\nplt.scatter(pca_tsne[:, 0], pca_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('PCA on t-SNE')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "codes/wbstats.html",
    "href": "codes/wbstats.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "#install.packages(\"wbstats\")\nlibrary(wbstats)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\n\n\n# Specify the indicators you want to fetch\nindicator_a= (\"BN.KLT.DINV.CD\") #FDI Current Expenditure for the United States\nindicator_b= (\"NY.GDP.PCAP.KD.ZG\") # GDP per capita growth for the United States\nindicator_c= (\"NE.CON.GOVT.ZS\") # Government Final Consumption Expenditure for the United States\nindicator_d= (\"NE.EXP.GNFS.ZS\") # Imports of Goods and Services as a Percentage of GDP for the United States\nindicator_e= (\"FP.CPI.TOTL.ZG\") # Inflation (consumer prices) for the United States\nindicator_f= (\"FR.INR.RINR\") # Real Interest Rate for the United States\nindicator_g= (\"GC.DOD.TOTL.GD.ZS\") # Central Government Debt Total (% of GDP) for the United States\nindicator_h= (\"SL.UEM.TOTL.ZS\")  # Unemployment Rate for the United States\nindicator_i= (\"MS.MIL.XPND.GD.ZS\") # Military Expenditure for the United States\n\n\ndata1 &lt;- wb(indicator = indicator_a, country = \"US\", startdate = 1973, enddate = 2023)\ndata2 &lt;- wb(indicator = indicator_b, country = \"US\", startdate = 1973, enddate = 2023)\ndata3 &lt;- wb(indicator = indicator_c, country = \"US\", startdate = 1973, enddate = 2023)\ndata4 &lt;- wb(indicator = indicator_d, country = \"US\", startdate = 1973, enddate = 2023)\ndata5&lt;- wb(indicator = indicator_e, country = \"US\", startdate = 1973, enddate = 2023)\ndata6 &lt;- wb(indicator = indicator_f, country = \"US\", startdate = 1973, enddate = 2023)\ndata7 &lt;- wb(indicator = indicator_g, country = \"US\", startdate = 1973, enddate = 2023)\ndata8 &lt;- wb(indicator = indicator_h, country = \"US\", startdate = 1973, enddate = 2023)\ndata9 &lt;- wb(indicator = indicator_i, country = \"US\", startdate = 1973, enddate = 2023)\n\nWarning message:\n\"`wb()` was deprecated in wbstats 1.0.0.\ni Please use `wb_data()` instead.\"\n\n\n\ndata1= subset(data1, select= c(\"date\", \"value\"))\ncolnames(data1)[colnames(data1) == \"value\"] &lt;- \"FDI Current Exp\"\ndata2=subset(data2, select= c(\"date\", \"value\"))\ncolnames(data2)[colnames(data2) == \"value\"] &lt;- \"GDP Per Capita Growth\"\ndata3= subset(data3, select= c(\"date\", \"value\"))\ncolnames(data3)[colnames(data3) == \"value\"] &lt;- \"Government Final Consumption Expenditure\"\ndata4= subset(data4, select=c(\"date\", \"value\"))\ncolnames(data4)[colnames(data4) == \"value\"] &lt;- \"Imports of Goods and Services\"\ndata5= subset(data5, select= c(\"date\", \"value\"))\ncolnames(data5)[colnames(data5) == \"value\"] &lt;- \"Inflation (Consumer Prices)\"\ndata6= subset(data6, select= c(\"date\", \"value\"))\ncolnames(data6)[colnames(data6) == \"value\"] &lt;- \"Real Interest Rate\"\ndata7= subset(data7, select= c(\"date\", \"value\"))\ncolnames(data7)[colnames(data7) == \"value\"] &lt;- \"Central Government Debt\"\ndata8= subset(data8, select= c(\"date\", \"value\"))\ncolnames(data8)[colnames(data8) == \"value\"] &lt;- \"Unemployement\"\ndata9= subset(data9, select= c(\"date\", \"value\"))\ncolnames(data9)[colnames(data9) == \"value\"] &lt;- \"Military Expenditure\"\n\n\n# Merging the dataframes\nmerged_df &lt;- full_join(data1, data2, by = \"date\")\nmerged_df &lt;- full_join(merged_df, data3, by = \"date\")\nmerged_df &lt;- full_join(merged_df, data4, by = \"date\")\nmerged_df &lt;- full_join(merged_df, data5, by = \"date\")\nmerged_df &lt;- full_join(merged_df, data6, by = \"date\")\nmerged_df &lt;- full_join(merged_df, data7, by = \"date\")\nmerged_df &lt;- full_join(merged_df, data8, by = \"date\")\nmerged_df &lt;- full_join(merged_df, data9, by = \"date\")\n\n\n# Extract the year from the Date object\nyear &lt;- format(date, \"%Y\")\nrow.names(merged_df) &lt;- merged_df$date\n\n\n# Checking missing value imputation\nsum(is.na(merged_df)) # There are 3 \n\n37\n\n\n\n# Using mean value imputation \nfor (x in names(merged_df)) {\n  mean &lt;- mean(merged_df[[x]], na.rm = TRUE)  # Calculate column mean ignoring NA\n  merged_df[[x]][is.na(merged_df[[x]])] &lt;- mean    # Replace NA with column mean\n}\n\nWarning message in mean.default(merged_df[[x]], na.rm = TRUE):\n\"argument is not numeric or logical: returning NA\"\n\n\n\nsum(is.na(merged_df))\n\n0\n\n\n\nsummary(merged_df) # Everything is in numerical except date\nmerged_df$date &lt;- as.Date(merged_df$date, format = \"%Y\")\nmerged_df&lt;- merged_df[rev(1:nrow(merged_df)), ]\nclass(merged_df$date) # It is date.\nprint(merged_df)\n\n     date           FDI Current Exp      GDP Per Capita Growth\n Length:50          Min.   :-3.454e+11   Min.   :-3.7010      \n Class :character   1st Qu.:-2.147e+10   1st Qu.: 0.9613      \n Mode  :character   Median : 3.926e+09   Median : 1.8884      \n                    Mean   : 2.372e+09   Mean   : 1.7361      \n                    3rd Qu.: 3.714e+10   3rd Qu.: 2.9180      \n                    Max.   : 1.773e+11   Max.   : 6.3122      \n Government Final Consumption Expenditure Imports of Goods and Services\n Min.   :13.96                            Min.   : 6.684               \n 1st Qu.:14.69                            1st Qu.: 8.558               \n Median :15.46                            Median : 9.860               \n Mean   :15.43                            Mean   :10.020               \n 3rd Qu.:16.06                            3rd Qu.:11.073               \n Max.   :17.61                            Max.   :13.644               \n Inflation (Consumer Prices) Real Interest Rate Central Government Debt\n Min.   :-0.3555             Min.   :-1.281     Min.   : 33.27         \n 1st Qu.: 2.1446             1st Qu.: 2.120     1st Qu.: 52.80         \n Median : 3.0928             Median : 3.715     Median : 69.31         \n Mean   : 4.0086             Mean   : 3.934     Mean   : 69.31         \n 3rd Qu.: 4.7947             3rd Qu.: 6.155     3rd Qu.: 82.68         \n Max.   :13.5492             Max.   : 8.595     Max.   :126.24         \n Unemployement   Military Expenditure\n Min.   :3.611   Min.   :3.086       \n 1st Qu.:5.130   1st Qu.:3.500       \n Median :5.838   Median :4.454       \n Mean   :5.838   Mean   :4.585       \n 3rd Qu.:5.838   3rd Qu.:5.502       \n Max.   :9.630   Max.   :6.814       \n\n\n'Date'\n\n\n           date FDI Current Exp GDP Per Capita Growth\n1973 1973-11-03     7.41000e+09            4.64215574\n1974 1974-11-03     1.62000e+09           -1.44513434\n1975 1975-11-03     1.14200e+10           -1.18458141\n1976 1976-11-03     8.41000e+09            4.39146287\n1977 1977-11-03     8.36000e+09            3.57714671\n1978 1978-11-03     8.87000e+09            4.42298461\n1979 1979-11-03     1.66700e+10            2.03388706\n1980 1980-11-03     2.30000e+09           -1.20929826\n1981 1981-11-03    -1.55700e+10            1.53632028\n1982 1982-11-03    -1.34560e+10           -2.73456973\n1983 1983-11-03    -2.73000e+09            3.63197930\n1984 1984-11-03    -1.24100e+10            6.31216766\n1985 1985-11-03    -5.95000e+09            3.25065642\n1986 1986-11-03    -1.14220e+10            2.51088597\n1987 1987-11-03    -2.34380e+10            2.53862354\n1988 1988-11-03    -3.52090e+10            3.23541611\n1989 1989-11-03    -2.48000e+10            2.69816667\n1990 1990-11-03    -1.12900e+10            0.74148610\n1991 1991-11-03     1.47200e+10           -1.43420013\n1992 1992-11-03     2.84600e+10            2.09661277\n1993 1993-11-03     3.25700e+10            1.40570857\n1994 1994-11-03     3.40500e+10            2.76088230\n1995 1995-11-03     4.09800e+10            1.46871823\n1996 1996-11-03     5.36000e+09            2.57225920\n1997 1997-11-03    -7.70000e+08            3.19721205\n1998 1998-11-03    -3.63900e+10            3.27051107\n1999 1999-11-03    -6.49640e+10            3.59798502\n2000 2000-11-03    -1.62755e+11            2.92544098\n2001 2001-11-03    -2.64550e+10           -0.03991973\n2002 2002-11-03     6.79300e+10            0.75677405\n2003 2003-11-03     7.81120e+10            1.91648045\n2004 2004-11-03     1.60363e+11            2.89584778\n2005 2005-11-03    -8.97530e+10            2.53378411\n2006 2006-11-03    -1.46620e+10            1.79648633\n2007 2007-11-03     1.77277e+11            1.04493014\n2008 2008-11-03     2.49100e+09           -0.82036790\n2009 2009-11-03     1.51514e+11           -3.45001592\n2010 2010-11-03     8.57890e+10            1.86029168\n2011 2011-11-03     1.73119e+11            0.81451936\n2012 2012-11-03     1.26895e+11            1.53310204\n2013 2013-11-03     1.04665e+11            1.13869235\n2014 2014-11-03     1.35673e+11            1.54038065\n2015 2015-11-03    -2.09363e+11            1.95300412\n2016 2016-11-03    -1.74573e+11            0.93337536\n2017 2017-11-03     2.85900e+10            1.59713559\n2018 2018-11-03    -3.45435e+11            2.40486787\n2019 2019-11-03    -2.01057e+11            1.82966839\n2020 2020-11-03     1.48299e+11           -3.70095253\n2021 2021-11-03    -9.90150e+10            5.77954842\n2022 2022-11-03     3.81730e+10            1.67697130\n     Government Final Consumption Expenditure Imports of Goods and Services\n1973                                 16.77628                      6.683780\n1974                                 17.16267                      8.196122\n1975                                 17.61080                      8.232279\n1976                                 16.78798                      7.980893\n1977                                 16.38797                      7.654290\n1978                                 15.76672                      7.947061\n1979                                 15.40364                      8.759034\n1980                                 15.87684                      9.826455\n1981                                 15.81024                      9.517777\n1982                                 16.58385                      8.469733\n1983                                 16.38379                      7.622265\n1984                                 15.72038                      7.489078\n1985                                 15.91711                      6.988073\n1986                                 16.11460                      7.009255\n1987                                 16.00121                      7.495919\n1988                                 15.66817                      8.490524\n1989                                 15.62380                      8.938790\n1990                                 15.90077                      9.254732\n1991                                 16.31757                      9.660905\n1992                                 16.07869                      9.708915\n1993                                 15.64527                      9.547180\n1994                                 15.20605                      9.893147\n1995                                 14.94477                     10.639224\n1996                                 14.52832                     10.746636\n1997                                 14.22932                     11.119755\n1998                                 13.98690                     10.515261\n1999                                 14.03180                     10.309335\n2000                                 14.02395                     10.692777\n2001                                 14.53564                      9.703447\n2002                                 15.05904                      9.131382\n2003                                 15.24363                      9.035659\n2004                                 15.15831                      9.628750\n2005                                 15.04714                      9.982055\n2006                                 15.00445                     10.641386\n2007                                 15.18929                     11.463790\n2008                                 15.93407                     12.425847\n2009                                 16.80770                     10.932221\n2010                                 16.68584                     12.341361\n2011                                 16.09843                     13.563467\n2012                                 15.47584                     13.644049\n2013                                 15.03662                     13.578074\n2014                                 14.62196                     13.545959\n2015                                 14.33033                     12.460993\n2016                                 14.24494                     11.939539\n2017                                 13.99863                     12.261738\n2018                                 13.96252                     12.360989\n2019                                 14.07222                     11.872470\n2020                                 14.90174                     10.202126\n2021                                 14.38439                     10.892727\n2022                                 15.43433                     10.020352\n     Inflation (Consumer Prices) Real Interest Rate Central Government Debt\n1973                   6.1777601          2.4097353                69.31363\n1974                  11.0548048          1.6510645                69.31363\n1975                   9.1431469         -1.2814192                69.31363\n1976                   5.7448126          1.2668917                69.31363\n1977                   6.5016840          0.5750689                69.31363\n1978                   7.6309638          1.8899033                69.31363\n1979                  11.2544711          4.0345477                69.31363\n1980                  13.5492020          5.7163905                69.31363\n1981                  10.3347153          8.5946198                69.31363\n1982                   6.1314270          8.1773474                69.31363\n1983                   3.2124352          6.6181602                69.31363\n1984                   4.3005355          8.1410881                69.31363\n1985                   3.5456442          6.5633266                69.31363\n1986                   1.8980477          6.1938603                69.31363\n1987                   3.6645632          5.5922379                69.31363\n1988                   4.0777411          5.5903822                69.31363\n1989                   4.8270030          6.6906869                39.12840\n1990                   5.3979564          6.0397492                40.93394\n1991                   4.2349640          4.9153465                44.06160\n1992                   3.0288197          3.8842380                46.05014\n1993                   2.9516570          3.5456172                48.24614\n1994                   2.6074416          4.8983100                47.35348\n1995                   2.8054197          6.5939964                47.20954\n1996                   2.9312042          6.3240737                46.74177\n1997                   2.3376899          6.6033649                44.11747\n1998                   1.5522791          7.1481784                41.12915\n1999                   2.1880272          6.4934264                37.72728\n2000                   3.3768573          6.8134243                33.26765\n2001                   2.8261711          4.5658479                52.44368\n2002                   1.5860316          3.0686428                53.86251\n2003                   2.2700950          2.1073108                56.25040\n2004                   2.6772367          1.6123110                56.66229\n2005                   3.3927468          2.9605063                56.53885\n2006                   3.2259441          4.7260897                55.46734\n2007                   2.8526725          5.2067594                55.65993\n2008                   3.8391003          3.1099208                63.81513\n2009                  -0.3555463          2.5924290                75.84205\n2010                   1.6400434          2.0238855                84.96441\n2011                   3.1568416          1.1484252                89.54682\n2012                   2.0693373          1.3540752                93.64926\n2013                   1.4648327          1.4732543                95.53469\n2014                   1.6222230          1.3547758                95.76670\n2015                   0.1186271          2.2370755                96.42523\n2016                   1.2615832          2.4845303                98.50410\n2017                   2.1301100          2.1560991                97.69294\n2018                   2.4425833          2.4414150                99.06098\n2019                   1.8122101          3.4270899               100.80504\n2020                   1.2335844          2.2104107               126.24359\n2021                   4.6978589         -1.1893569               120.36337\n2022                   8.0027998          3.9337778               115.59759\n     Unemployement Military Expenditure\n1973      5.837531             5.893871\n1974      5.837531             5.954111\n1975      5.837531             5.622679\n1976      5.837531             5.191071\n1977      5.837531             5.155617\n1978      5.837531             4.943087\n1979      5.837531             4.951992\n1980      5.837531             5.153537\n1981      5.837531             5.646541\n1982      5.837531             6.814057\n1983      5.837531             6.321144\n1984      5.837531             6.236417\n1985      5.837531             6.453219\n1986      5.837531             6.626523\n1987      5.837531             6.420274\n1988      5.837531             6.071278\n1989      5.837531             5.871206\n1990      5.837531             5.605175\n1991      6.800000             4.883429\n1992      7.500000             4.970467\n1993      6.900000             4.604350\n1994      6.120000             4.215265\n1995      5.650000             3.860246\n1996      5.450000             3.554982\n1997      5.000000             3.405562\n1998      4.510000             3.201558\n1999      4.220000             3.085677\n2000      3.990000             3.112242\n2001      4.730000             3.123810\n2002      5.780000             3.447618\n2003      5.990000             3.827161\n2004      5.530000             4.016313\n2005      5.080000             4.089232\n2006      4.620000             4.041342\n2007      4.620000             4.073351\n2008      5.780000             4.446596\n2009      9.250000             4.875768\n2010      9.630000             4.904023\n2011      8.950000             4.822442\n2012      8.070000             4.461710\n2013      7.370000             4.032661\n2014      6.170000             3.690961\n2015      5.280000             3.481428\n2016      4.870000             3.422588\n2017      4.360000             3.320541\n2018      3.900000             3.323866\n2019      3.670000             3.434568\n2020      8.050000             3.696010\n2021      5.350000             3.457977\n2022      3.611000             3.454920\n\n\n\nhead(merged_df)\n\n\nA data.frame: 6 × 10\n\n\n\ndate\nFDI Current Exp\nGDP Per Capita Growth\nGovernment Final Consumption Expenditure\nImports of Goods and Services\nInflation (Consumer Prices)\nReal Interest Rate\nCentral Government Debt\nUnemployement\nMilitary Expenditure\n\n\n\n&lt;date&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1973\n1973-11-03\n7.410e+09\n4.642156\n16.77628\n6.683780\n6.177760\n2.4097353\n69.31363\n5.837531\n5.893871\n\n\n1974\n1974-11-03\n1.620e+09\n-1.445134\n17.16267\n8.196122\n11.054805\n1.6510645\n69.31363\n5.837531\n5.954111\n\n\n1975\n1975-11-03\n1.142e+10\n-1.184581\n17.61080\n8.232279\n9.143147\n-1.2814192\n69.31363\n5.837531\n5.622679\n\n\n1976\n1976-11-03\n8.410e+09\n4.391463\n16.78798\n7.980893\n5.744813\n1.2668917\n69.31363\n5.837531\n5.191071\n\n\n1977\n1977-11-03\n8.360e+09\n3.577147\n16.38797\n7.654290\n6.501684\n0.5750689\n69.31363\n5.837531\n5.155617\n\n\n1978\n1978-11-03\n8.870e+09\n4.422985\n15.76672\n7.947061\n7.630964\n1.8899033\n69.31363\n5.837531\n4.943087"
  },
  {
    "objectID": "codes/dimensionalityreduction.html",
    "href": "codes/dimensionalityreduction.html",
    "title": "Dimensionality Reduction",
    "section": "",
    "text": "When we do predictive analysis mainly, the number of independant that go into the modelling play an important role, in addition to the size of the dataset and the way it has been pre-processed.\nSince the independant variables, or the “predictors” actually play an important role in deciding the course of the outcomes, may it be supervised or unsupervised learning, it’s crucial to choose the correct feature sets that best describes your data.\nThere are several definitions for Dimensionality Reduction, however, all in all, it is a process that reduces the number of features from a dataset whilst retaining the information. Usually, dimensionality reduction is done when you have a feature set that can be highly correlated, highly complex or just doesn’t contribute to the outcome or improve the performance of the algorithm. Hence, our main goal with dimensionality reduction is to make the data less dimensional and preserve the information in the dataset.\nDimensionality Reduction can be done in different ways, with Principal Component Analysis (PCA) and t-SNE being one of them.\nFor this project, two techniques will be used\n\nPCA (Principal Component Analysis)\nt-SNE (T-distributed Stochastic Neighbor Embedding)\n\nAs we often use Dimensionality Reduction as Feature Selection and Feature Extraction methods, in this project, we use it as a Feature Extraction method, where we attempt to derive a new feature set from the existing independant variables to construct an optimal feature subspace."
  },
  {
    "objectID": "codes/dimensionalityreduction.html#introduction-to-dimensionality-reduction",
    "href": "codes/dimensionalityreduction.html#introduction-to-dimensionality-reduction",
    "title": "Dimensionality Reduction",
    "section": "",
    "text": "When we do predictive analysis mainly, the number of independant that go into the modelling play an important role, in addition to the size of the dataset and the way it has been pre-processed.\nSince the independant variables, or the “predictors” actually play an important role in deciding the course of the outcomes, may it be supervised or unsupervised learning, it’s crucial to choose the correct feature sets that best describes your data.\nThere are several definitions for Dimensionality Reduction, however, all in all, it is a process that reduces the number of features from a dataset whilst retaining the information. Usually, dimensionality reduction is done when you have a feature set that can be highly correlated, highly complex or just doesn’t contribute to the outcome or improve the performance of the algorithm. Hence, our main goal with dimensionality reduction is to make the data less dimensional and preserve the information in the dataset.\nDimensionality Reduction can be done in different ways, with Principal Component Analysis (PCA) and t-SNE being one of them.\nFor this project, two techniques will be used\n\nPCA (Principal Component Analysis)\nt-SNE (T-distributed Stochastic Neighbor Embedding)\n\nAs we often use Dimensionality Reduction as Feature Selection and Feature Extraction methods, in this project, we use it as a Feature Extraction method, where we attempt to derive a new feature set from the existing independant variables to construct an optimal feature subspace."
  },
  {
    "objectID": "codes/dimensionalityreduction.html#principal-component-analysis-pca",
    "href": "codes/dimensionalityreduction.html#principal-component-analysis-pca",
    "title": "Dimensionality Reduction",
    "section": "Principal Component Analysis (PCA)",
    "text": "Principal Component Analysis (PCA)\nPCA (Principal Component Analysis) is a statistical technique that uses linear transformations to discover the most relevant features, or principal components, in high-dimensional datasets. Hence, PCA creates a low-dimensional representation of a dataset and finds the most variable sequence of linear combinations of mutually uncorrelated variables. It can be used to display data in addition to giving derived variables for use in supervised learning tasks.\nThis is particularly true when working with big amounts of data. PCA accomplishes this by transforming the data into a new set of variables known as principal components, which contain the data’s most significant variations. Most researchers and people into data analysis can use PCA to focus on the most important features of data, making it easier to understand and work with.\nSince I have worked with PCA before, the sklearn library is a wonderful tool for this.\nFor PCA, one of the important things is to get rid of any labels within the data. Hence, there is only a set of numerical variables. For this dataset, the highly correlated variables have already been removed to reduce multicollinearity of the dataset as much as possible.\n\n\nCode\n# Import Libraries \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import LabelEncoder\n\n\n\n\nCode\nstackeddf= pd.read_csv(\"../data/stackeddf.csv\")\n\nstackeddf.head(10)\n\n\n\n\n\n\n\n\n\nyear\nadj_NNI_g\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\nex_imp_growth\nex_debt_shocks\nfdi_net_outflows\ngdp_growth\nshort_term_debt_tot_reserves\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\nmilitary expenditure\nlabels\n\n\n\n\n0\n-1.647859\n1.230366\n0.270892\n-0.277537\n-0.052004\n0.419580\n-1.270470\n-0.842531\n1.595002\n-0.032164\n-0.845342\n-0.112698\n-0.121526\n-0.167829\nHigh Growth\n\n\n1\n-1.572340\n-1.216110\n0.313510\n-0.277537\n0.103127\n-0.481153\n-1.204634\n-0.842808\n1.304262\n0.403253\n-0.845342\n-0.110878\n-0.141348\n-0.151690\nHigh Growth\n\n\n2\n-1.496821\n-0.510146\n0.367195\n-0.277537\n0.049534\n0.536099\n-0.969857\n-0.842942\n0.295912\n0.851964\n-0.845342\n-0.109081\n-0.105898\n-0.102821\nModerate Growth\n\n\n3\n-1.421301\n1.160350\n0.316780\n-0.277537\n0.046547\n-0.495731\n-0.889487\n-0.842495\n1.815392\n1.403674\n-0.845342\n-0.107310\n-0.098738\n-0.109603\nVery High Growth\n\n\n4\n-1.345782\n-0.472199\n0.362786\n-0.277537\n0.058430\n0.726138\n-0.708319\n-0.842596\n0.433390\n1.517825\n-0.845342\n-0.105584\n-0.034063\n-0.080748\nModerate Growth\n\n\n5\n-1.270263\n-0.351675\n0.434567\n-0.277537\n0.132578\n-1.299124\n-0.543663\n-0.842744\n1.004641\n1.655880\n-0.845342\n-0.103913\n0.040985\n-0.033944\nHigh Growth\n\n\n6\n-1.194744\n-0.021989\n0.439905\n-0.277537\n-0.046028\n0.448600\n-0.377613\n-0.843166\n0.814271\n1.717391\n-0.845342\n-0.102297\n0.099256\n0.131376\nModerate Growth\n\n\n7\n-1.119224\n0.331103\n0.482043\n-0.277537\n0.103695\n1.533911\n-0.232320\n-0.842619\n0.491018\n1.817072\n-0.845342\n-0.100749\n0.125278\n0.169781\nModerate Growth\n\n\n8\n-1.043705\n0.612465\n0.472153\n-0.277537\n0.323107\n0.752206\n-0.116249\n-0.842141\n2.747401\n2.769720\n-0.845342\n-0.099258\n0.110237\n0.015163\nVery High Growth\n\n\n9\n-0.968186\n0.339376\n0.482635\n-0.277537\n0.630367\n1.422604\n0.516698\n-0.842224\n1.280807\n3.915796\n-0.845342\n-0.097787\n0.137684\n-0.044664\nHigh Growth\n\n\n\n\n\n\n\nHere, we see that the data has both numerical and categorical variables which have already been normalised using the standard scalar. It is preprocessing technique that uses the z-score normalisation method to ensure the features are all on a comparible scale, with a mean of zero and a standard deviation of 1. Hemce, we separate the data into ‘x’ and ‘y’ variables.\n\n\nCode\ny = stackeddf['labels']\nx = stackeddf.drop(['labels'], axis=1)\n\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n\n\n\n\nCode\npca1 = PCA()\npca_result = pca1.fit_transform(x)\n\nprint(pca_result)\n\n\n[[ 7.62571967e-01 -6.26043200e-01 -2.30866090e-01 ... -3.68266626e-02\n  -9.43207244e-03 -1.16249461e-12]\n [ 1.86852321e+00 -1.42033301e+00  1.23674495e-01 ...  2.85634458e-02\n   2.13734846e-02 -2.92247919e-13]\n [ 1.78069560e+00 -6.75060179e-01 -7.31259179e-01 ...  5.53506048e-03\n   2.15628745e-03 -1.56198277e-12]\n ...\n [ 2.00350774e+00 -3.63942297e+00 -1.87451963e+00 ...  1.76194346e-01\n  -2.61901427e-02  3.58573041e-12]\n [ 5.11008136e-02 -1.05869012e+00 -2.55586066e+00 ...  7.92424281e-02\n  -4.88649412e-02 -7.00359148e-12]\n [ 6.30703303e-01  1.25498085e+00 -2.37715116e+00 ...  1.25566938e-02\n  -1.50273539e-02  2.09849158e-12]]\n\n\nBut, we need to find the optimal components of the data that best describes the data through the explained variance ratio, hence, we use the explained variance ratio and define our own threshold and see.\n\n\nCode\nevr= pca1.explained_variance_ratio_\ncum_var = np.cumsum(pca1.explained_variance_ratio_)\noptimal = np.argmax(cum_var &gt;= 0.75) + 1\n\nprint(\"Optimal Number of Components:\", optimal)\n\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(cum_var) + 1 ), cum_var, linestyle='--')\nplt.xlabel('Components')\nplt.ylabel('Explained Variance Ratio (cumulative)')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\n\nOptimal Number of Components: 4\n\n\n\n\n\nThis shows me that the optimal number of components are 4 that attempts to explain at least 75% of the data. I have used ‘Scree Plot’ which visually showcases for a threshold of 0.75. Since we know the optimal components of the data, we can calculate the PCA\n\n\nCode\npca2 = PCA(n_components=4)\npca_optimal2 = pca2.fit_transform(x)\n\nevr2 = pca2.explained_variance_ratio_\ncev2 = np.cumsum(evr2)\n\nprint(pca_optimal2[0:10])\n\n\n[[ 0.76257197 -0.6260432  -0.23086609 -2.59040608]\n [ 1.86852321 -1.42033301  0.1236745  -1.00166474]\n [ 1.7806956  -0.67506018 -0.73125918 -0.66213051]\n [ 1.73581487  0.08114664  0.88863619 -2.10613841]\n [ 1.91751146 -0.02151058 -0.62973654 -0.38327002]\n [ 2.71648514 -0.68755858  1.03310853 -0.8007282 ]\n [ 1.97349223  0.24045813 -0.25631107 -0.67853068]\n [ 1.42712716  0.85358937 -0.9723162  -0.45607911]\n [ 1.35839281  1.90954496  0.73221295 -1.18362437]\n [ 1.94311949  2.67844446  0.0827333   0.30600975]]\n\n\nThe following are the first few values of the pca.\n\n\nCode\npcadf = pd.DataFrame(data=pca_optimal2, index=x.index, columns= ['PC1','PC2', 'PC3','PC4'])\npcadf.head(10)\n\n\n\n\n\n\n\n\n\nPC1\nPC2\nPC3\nPC4\n\n\n\n\n0\n0.762572\n-0.626043\n-0.230866\n-2.590406\n\n\n1\n1.868523\n-1.420333\n0.123674\n-1.001665\n\n\n2\n1.780696\n-0.675060\n-0.731259\n-0.662131\n\n\n3\n1.735815\n0.081147\n0.888636\n-2.106138\n\n\n4\n1.917511\n-0.021511\n-0.629737\n-0.383270\n\n\n5\n2.716485\n-0.687559\n1.033109\n-0.800728\n\n\n6\n1.973492\n0.240458\n-0.256311\n-0.678531\n\n\n7\n1.427127\n0.853589\n-0.972316\n-0.456079\n\n\n8\n1.358393\n1.909545\n0.732213\n-1.183624\n\n\n9\n1.943119\n2.678444\n0.082733\n0.306010\n\n\n\n\n\n\n\n\n\nCode\n\nprint(\"Explained Variance Ratio for Each Component:\")\nprint(evr2*100)\n\nprint(\"\\nCumulative Explained Variance:\")\nprint(cev2*100)\n\ne = pca2.explained_variance_ratio_\n\n# Print overall explained variance ratio\nprint(\"Overall Explained Variance Ratio:\", sum(e)*100)\n\nfrom sklearn.metrics import silhouette_samples\n\nsil_val = silhouette_samples(pca_optimal2, y)\nprint(sil_val[0:10])\n\navg_sil_score = np.mean(sil_val)\nprint(f\"Average Silhouette Score for PCA: {avg_sil_score}\")\n\n\n\n\n\nExplained Variance Ratio for Each Component:\n[34.22972792 22.08761959 14.72048604 11.766315  ]\n\nCumulative Explained Variance:\n[34.22972792 56.31734751 71.03783355 82.80414855]\nOverall Explained Variance Ratio: 82.80414854824097\n[-0.07892657 -0.02874872 -0.09320622 -0.16876901 -0.11519626  0.04725516\n -0.13561769 -0.0658181  -0.15181648  0.02498319]\nAverage Silhouette Score for PCA: -0.09704378289382186\n\n\nAs we have put in our threshold of 0.75, we see that the overall explained variance ratio, which talks about the proportion of variance captured by the dataset is 82%. You see even for each component, there are few points that perform better than the other.\n\n\nCode\n\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(e) + 1), cev2, marker='o', linestyle='--')\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\nplt.title('Scree Plot')\nplt.grid()\nplt.show()\n\n\n\n\n\nHere, we see that the the optimal performance was for 4. As the components keep increasing, so did the explained cumulative values.\n\n\nCode\n\nplt.figure(figsize=(10, 10))\n\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('Reduced-Dimensional Data with PCA')\nplt.legend()\nplt.show()\n\n\n\n\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_53278/3805980677.py:5: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\n\n\n\n\nHere, we see that for PCA, the clustering looks differentiable enough in some places but overall just overlapping each other. Although the explained variance ratio is around 82%, one of the interesting parts is how as we iterate through each component, we see that explained variance ratio is as minimal as 10% and as high as 80%. But if we look at the components by itself, like PCA1, PCA2, etc, first PCA performs the best. So, cumulatively, they’re almost attempting to capture the variance through the divide and conquer policy. Economic data is extremely highly dimensional, and hence it has done a good job in figuring out the differences."
  },
  {
    "objectID": "codes/dimensionalityreduction.html#t-distributed-stochastic-neighbor-embedding-t-sne",
    "href": "codes/dimensionalityreduction.html#t-distributed-stochastic-neighbor-embedding-t-sne",
    "title": "Dimensionality Reduction",
    "section": "T-distributed Stochastic Neighbor Embedding (t-SNE)",
    "text": "T-distributed Stochastic Neighbor Embedding (t-SNE)\nThe T-distributed Stochastic Neighbor Embedding, also called as t-SNE is another dimensionality reduction technique that focuses on data separation when the data cannot be linearly separated or rather, by a straight line. It helps us understand how the data is arranged and to understand the underlying patterns in the dataset. As t-SNE uses probability distribution to map similar data points, and keep the dissimilar ones apart; it does using the Kullback-Leibler divergence between the low and high dimensional embedding. However, t-SNE with different initialisations can get us different results, due to which although preserves the structure of the original data, we still need to aware of our initial value.\n\n\nCode\nperplex_values = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 100]\n\nfor p in perplex_values:\n    tsne = TSNE(n_components=2, perplexity=p, random_state=2339)\n    X = tsne.fit_transform(x)\n    \n    avg = silhouette_score(X, y)\n    \n    print(f\"Perplexity {p}: Silhouette Score = {avg}\")\n\n\nPerplexity 1: Silhouette Score = -0.08198484778404236\nPerplexity 2: Silhouette Score = -0.055559705942869186\nPerplexity 3: Silhouette Score = -0.06099412217736244\nPerplexity 4: Silhouette Score = -0.06829451769590378\nPerplexity 5: Silhouette Score = -0.0636918768286705\nPerplexity 10: Silhouette Score = -0.06911653280258179\nPerplexity 15: Silhouette Score = -0.09194755554199219\nPerplexity 20: Silhouette Score = -0.08281858265399933\nPerplexity 25: Silhouette Score = -0.08434560894966125\nPerplexity 30: Silhouette Score = -0.0772019475698471\nPerplexity 35: Silhouette Score = -0.09676646441221237\nPerplexity 40: Silhouette Score = -0.11943919956684113\nPerplexity 45: Silhouette Score = -0.06866727024316788\nPerplexity 50: Silhouette Score = -0.1278223693370819\nPerplexity 55: Silhouette Score = -0.09298355877399445\nPerplexity 60: Silhouette Score = -0.08441784232854843\nPerplexity 100: Silhouette Score = -0.0959368422627449\n\n\n\n\nCode\nval = [2, 50, 100]\n\n# Create subplots to compare t-SNE results with different perplexities\nplt.figure(figsize=(15, 5))\n\nfor i, p in enumerate(val, 1):\n    tsne = TSNE(n_components=3, perplexity=p, random_state=2339)\n    X_tsne = tsne.fit_transform(x)\n\n    plt.subplot(1, len(val), i)\n    plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\n    plt.title(f't-SNE with Perplexity {p}')\n    plt.xlabel('t-SNE Component 1')\n    plt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nThe hyperparameter choice is perplexity in t-SNE, that controls the balance in preserving both local and glocal structure in a low-dimensional embedding. A higher perplexity value usually focuses on the global structure and lower perplexity on the local structure. As the choice of perplexity can really affect the choice of the output, it is often important to choose the optimal perplexity value which the code above attempts to achieve.\nAll values of perplexity are negative in nature, and shows that all the clusters are going to overlap each other. This suggests poor separation between the clusters. This showcases the importance of the nature of the dataset, maybe due to the inherent structure of the data or due to the fact that there are outliers which cannot be removed when it comes to economic data.\nBut here, it shows, perplexity value of 2 is closer to one so we will choose that.\n\n\nCode\ntsne = TSNE(n_components=3, perplexity=2, random_state=42)\nX_tsne = tsne.fit_transform(x)\n\nsil_tsne = silhouette_samples(X_tsne, y)\nprint(sil_tsne[0:10])\n\navg_tsne_score = np.mean(sil_tsne)\nprint(f\"Average Silhouette Score for t-SNE: {avg_tsne_score}\")\n\n\n[ 0.00318419  0.01473387 -0.02172711 -0.16240974  0.00434295  0.08726601\n -0.06315608  0.04417509  0.05092624 -0.14183001]\nAverage Silhouette Score for t-SNE: -0.06379585713148117\n\n\n\n\nCode\nplt.figure(figsize=(10, 6))\nplt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title(f't-SNE with Perplexity {2}')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nHere, we see that t-SNE has done an extremely bad job in predicting the clusters as there is no relation of each other with one another.\n\nPCA vs t-SNE\n\n\nCode\nplt.figure(figsize=(15, 6))\n\n# pca\nplt.subplot(1, 2, 1)\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('Reduced-Dimensional Data with PCA')\nplt.legend()\n\n#  t-SNE\nplt.subplot(1, 2, 2)\nfor label_value in y.unique():\n    indices = y == label_value\n    plt.scatter(X_tsne[indices, 0], X_tsne[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\nplt.legend()\n\nplt.title('t-SNE with Perplexity = 2')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_53278/957010861.py:7: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  plt.scatter(pca_optimal2[indices, 0], pca_optimal2[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n/var/folders/cm/1bq_zvw92w99j_5d1p5jq5v40000gn/T/ipykernel_53278/957010861.py:18: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  plt.scatter(X_tsne[indices, 0], X_tsne[indices, 1], label=label_value, alpha=0.5, cmap='viridis')\n\n\n\n\n\n\n\nPCA vs t-SNE- the curse of dimensionality continued?\nKeeping in mind the fact that dimensionality can improve the model, there are often instances when utilising dimensionality techniques as a feature extraction method does not help the data in itself. This fundamentally showcases the importance of having a good dataset and choosing the feature selection/extraction methods on basis of your dataset’s requirements.\nHowever, if you look at both PCA and t-SNE, in terms of effectiveness, PCA’s CMV or cumulative explained variance ratio is around 82%. One of the problems with t-SNE through my research is that there is no proper metric in my current range of understanding that numerically quanitfies t-SNE well. But, in terms of the silhoute score, either we should calculate for each point and then do the sum of it, or play around with the data. But in terms of the calculation, what I had done for both of them was looking at ‘y’, which is the label value and essentially find out silhoutte scores for each component of the transformed variable and then you find the average of it.\n\n\nCode\nprint(f\"Average Silhouette Score for t-SNE: {avg_tsne_score}\")\nprint(f\"Average Silhouette Score for PCA: {avg_sil_score}\")\n\n\nAverage Silhouette Score for t-SNE: -0.06379585713148117\nAverage Silhouette Score for PCA: -0.09704378289382186\n\n\nIf you look at the silhoutte scores, we see that t-SNE actually seems to perform better than PCA but visualisation wise, I see more clustering for PCA than t-SNE.\nIn terms of the quality of the cluster-separation, we see that both do a bad job at that since all the clusters are overlapping each other. Although PCA is effective for linear relationships and t-SNE is powerful in capturing the non-linear relationships of the data, both do not do a good job with clustering of my economic data. The reason being is in my opinion, the dataset is not that huge and most of the data is correlated to one another.\nAs PCA is suiltable for larger datasets and t-SNE is suitable for smaller datasets, I wanted to attempt the combined approach\n\n\nCode\n\n\n# t-sne on pca\ntsne_on_pca = TSNE(n_components=3, perplexity=2, random_state=42)\ntsne_pca = tsne_on_pca.fit_transform(pca_optimal2)\n\n# pca on t-sne\npca_on_tsne = PCA(n_components=3)\npca_tsne = pca_on_tsne.fit_transform(tsne_pca)\n\n# Visualize PCA and t-SNE plots together\nplt.figure(figsize=(15, 5))\n\n# orginal pca \nplt.subplot(1, 3, 1)\nplt.scatter(pca_optimal2[:, 0], pca_optimal2[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('Original PCA')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\n# t-sne on pca\nplt.subplot(1, 3, 2)\nplt.scatter(tsne_pca[:, 0], tsne_pca[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('t-SNE on PCA')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\n\n# pca on t-sne\nplt.subplot(1, 3, 3)\nplt.scatter(pca_tsne[:, 0], pca_tsne[:, 1], c=y_encoded, cmap='viridis', alpha=0.5)\nplt.title('PCA on t-SNE')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nWe can see that, using the combined approach really just messed the data within itself that that pca by itself is the best option to go with.\nTo summarise, the decision between PCA and t-SNE is influenced by the type of the data, the size of the dataset, and the specific goals of the research. Both strategies yield useful insights, and a well-considered mix of both methods can provide a more comprehensive knowledge of complex datasets. Yet, for mine, neither worked.\nThe instances when one technique may outperform any other is understanding the situations when it is usually used. PCA is generally a linear technique that usually works well when the data is linear but t-SNE on the other hand adheres to capturing the complex and non-linear datasets. Additionally, PCAs are effective at preserving the global structure of the data and t-SNE at preserving the local structure of the dataset. However, when you try to understand it through visualisation, usually for t-SNE, since it is more suitable for lower-dimensional data, is better for the same. PCA is computationally efficient but cannot capture the intricate aspects of the data. One thing that I have witnessed personally whilst work on both PCA and t-SNE is that for t-SNE, it is more affected by the choice of the perplexity values. In conclusion, for my data, PCA performed better although the feature set is higher, attuning to the fact that I had already dropped the highly correlated variables from the dataset, thus contributing to better performance of PCA.\nSources:\nDimensionality Reduction\n\nhttps://www.geeksforgeeks.org/dimensionality-reduction/\n\nPCA:\n\nhttps://jfh.georgetown.domains/dsan5000/slides-and-labs/_site/content/slides/dimensionality-reduction/notes.html\nhttps://www.stat.cmu.edu/~larry/=sml/dimension_reduction.pdf\nhttps://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html\nhttps://stats.stackexchange.com/questions/376981/cumulative-sum-of-pca-explained-variance-greater-than-1\nhttps://github.com/scikit-learn/scikit-learn/issues/22974\nhttps://jakevdp.github.io/PythonDataScienceHandbook/05.09-principal-component-analysis.html\nhttps://www.researchgate.net/figure/A-scree-plot-for-explained-variance-and-eigenvalues-for-the-ten-Principal-Components_fig1_338833359\n\nTSNE:\n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html\nhttps://jfh.georgetown.domains/dsan5000/slides-and-labs/_site/content/slides/dimensionality-reduction/notes.html#t-distributed-stochastic-neighbor-embedding."
  },
  {
    "objectID": "codes/countries_code/southafrica.html",
    "href": "codes/countries_code/southafrica.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n#pip install xlrd\ndf=pd.read_excel('../data/southafrica.xlsx')\ndf\n\n\n\n\n\n\n\n\nSeries Name\nSeries Code\nCountry Name\nCountry Code\n1973 [YR1973]\n1974 [YR1974]\n1975 [YR1975]\n1976 [YR1976]\n1977 [YR1977]\n1978 [YR1978]\n...\n2013 [YR2013]\n2014 [YR2014]\n2015 [YR2015]\n2016 [YR2016]\n2017 [YR2017]\n2018 [YR2018]\n2019 [YR2019]\n2020 [YR2020]\n2021 [YR2021]\n2022 [YR2022]\n\n\n\n\n0\nAdjusted net national income (annual % growth)\nNY.ADJ.NNTY.KD.ZG\nSouth Africa\nZAF\n13.995649\n6.064966\n-5.909503\n-1.689113\n-0.35459\n4.950963\n...\n1.426967e+00\n1.673637e+00\n3.396159e+00\n-4.102492e-01\n2.744982e+00\n1.084757e+00\n6.215649e-01\n-5.191452e+00\n..\n..\n\n\n1\nAdjusted net national income (constant 2015 US$)\nNY.ADJ.NNTY.KD\nSouth Africa\nZAF\n83566486105.631912\n88634764781.144974\n83396890689.261108\n81988222737.455215\n81697500513.628571\n85742313274.95488\n...\n2.734409e+11\n2.780173e+11\n2.874592e+11\n2.862799e+11\n2.941382e+11\n2.973289e+11\n2.991770e+11\n2.836454e+11\n..\n..\n\n\n2\nAdjusted net national income per capita (annua...\nNY.ADJ.NNTY.PC.KD.ZG\nSouth Africa\nZAF\n10.797713\n3.127517\n-8.467988\n-4.296609\n-2.990586\n2.158098\n...\n5.527594e-02\n8.352653e-02\n1.273791e+00\n-1.373576e+00\n2.347842e+00\n-1.465071e-01\n-6.731567e-01\n-6.344067e+00\n..\n..\n\n\n3\nAdjusted savings: consumption of fixed capital...\nNY.ADJ.DKAP.GN.ZS\nSouth Africa\nZAF\n12.087193\n12.005429\n13.771913\n15.281072\n15.936839\n16.373562\n...\n1.399279e+01\n1.413843e+01\n1.416439e+01\n1.458170e+01\n1.409668e+01\n1.426729e+01\n1.441505e+01\n1.534208e+01\n..\n..\n\n\n4\nAdjusted savings: education expenditure (% of ...\nNY.ADJ.AEDU.GN.ZS\nSouth Africa\nZAF\n5.039765\n5.039765\n5.039765\n5.039765\n5.039765\n5.039765\n...\n5.932454e+00\n5.970000e+00\n5.635345e+00\n5.300690e+00\n5.464473e+00\n5.514553e+00\n5.820015e+00\n5.820015e+00\n..\n..\n\n\n5\nAdjusted savings: gross savings (% of GNI)\nNY.ADJ.ICTR.GN.ZS\nSouth Africa\nZAF\n30.780949\n33.04485\n27.352749\n26.416145\n26.913529\n27.967647\n...\n1.418066e+01\n1.402971e+01\n1.462401e+01\n1.466364e+01\n1.464988e+01\n1.395434e+01\n1.381048e+01\n1.489885e+01\n..\n..\n\n\n6\nAdjusted savings: net national savings (% of GNI)\nNY.ADJ.NNAT.GN.ZS\nSouth Africa\nZAF\n18.693756\n21.039421\n13.580836\n11.135073\n10.97669\n11.594085\n...\n1.949305e-01\n-1.183366e-01\n4.495531e-01\n9.563026e-02\n5.481856e-01\n-3.287630e-01\n-5.954102e-01\n-4.514133e-01\n..\n..\n\n\n7\nCurrent account balance (% of GDP)\nBN.CAB.XOKA.GD.ZS\nSouth Africa\nZAF\n-0.776829\n-3.473635\n-5.586817\n-4.647458\n0.527704\n2.130315\n...\n-5.338373e+00\n-4.812433e+00\n-4.310287e+00\n-2.633615e+00\n-2.374368e+00\n-3.008700e+00\n-2.625377e+00\n1.984891e+00\n3.699256\n-0.418256\n\n\n8\nExports of goods and services (% of GDP)\nNE.EXP.GNFS.ZS\nSouth Africa\nZAF\n21.686956\n24.154607\n23.844942\n23.91359\n26.283743\n28.424993\n...\n2.837928e+01\n2.900062e+01\n2.771364e+01\n2.815609e+01\n2.734008e+01\n2.756264e+01\n2.729747e+01\n2.760030e+01\n31.193814\n33.443871\n\n\n9\nExports of goods and services (annual % growth)\nNE.EXP.GNFS.KD.ZG\nSouth Africa\nZAF\n-5.181406\n-4.891985\n-1.159137\n4.299431\n4.602098\n3.296801\n...\n3.732974e+00\n3.646286e+00\n3.059774e+00\n4.075088e-01\n-2.732360e-01\n2.741158e+00\n-3.445217e+00\n-1.186291e+01\n9.98685\n7.546529\n\n\n10\nExternal debt stocks (% of GNI)\nDT.DOD.DECT.GN.ZS\nSouth Africa\nZAF\n..\n..\n..\n..\n..\n..\n...\n3.620222e+01\n4.016439e+01\n3.770716e+01\n4.568675e+01\n4.718794e+01\n4.578292e+01\n5.042561e+01\n5.318420e+01\n41.272694\n..\n\n\n11\nFinal consumption expenditure (% of GDP)\nNE.CON.TOTL.ZS\nSouth Africa\nZAF\n66.620457\n64.726381\n69.993697\n70.653662\n70.174548\n69.732151\n...\n8.294771e+01\n8.301037e+01\n8.266620e+01\n8.258863e+01\n8.224505e+01\n8.331398e+01\n8.360654e+01\n8.331720e+01\n81.321483\n82.680785\n\n\n12\nFinal consumption expenditure (annual % growth)\nNE.CON.TOTL.KD.ZG\nSouth Africa\nZAF\n6.873473\n5.78736\n5.505337\n2.499198\n0.268789\n1.397318\n...\n1.921947e+00\n1.001187e+00\n1.424151e+00\n9.891205e-01\n1.252008e+00\n2.391688e+00\n1.368788e+00\n-4.361716e+00\n4.382776\n2.222449\n\n\n13\nForeign direct investment, net inflows (% of GDP)\nBX.KLT.DINV.WD.GD.ZS\nSouth Africa\nZAF\n0.082312\n1.681897\n0.438071\n0.044714\n-0.268926\n-0.211695\n...\n2.053581e+00\n1.519327e+00\n4.387358e-01\n6.846126e-01\n5.396740e-01\n1.378038e+00\n1.316779e+00\n9.340550e-01\n9.703406\n2.265458\n\n\n14\nForeign direct investment, net outflows (% of ...\nBM.KLT.DINV.WD.GD.ZS\nSouth Africa\nZAF\n0.155959\n0.277353\n0.293098\n0.078249\n0.149685\n0.461271\n...\n1.626366e+00\n2.017865e+00\n1.590647e+00\n1.387725e+00\n1.952876e+00\n9.963808e-01\n8.084133e-01\n-5.733857e-01\n0.024242\n0.530973\n\n\n15\nGDP growth (annual %)\nNY.GDP.MKTP.KD.ZG\nSouth Africa\nZAF\n4.571945\n6.111122\n1.695434\n2.24986\n-0.093979\n3.01448\n...\n2.485468e+00\n1.413826e+00\n1.321862e+00\n6.645523e-01\n1.157947e+00\n1.522329e+00\n3.034532e-01\n-6.342471e+00\n4.913097\n2.042299\n\n\n16\nGDP per capita growth (annual %)\nNY.GDP.PCAP.KD.ZG\nSouth Africa\nZAF\n1.638374\n3.172396\n-1.069843\n-0.462109\n-2.736869\n0.273147\n...\n1.099462e+00\n-1.722206e-01\n-7.579281e-01\n-3.091712e-01\n7.669416e-01\n2.857356e-01\n-9.871752e-01\n-7.481093e+00\n3.870315\n1.187663\n\n\n17\nGeneral government final consumption expenditu...\nNE.CON.GOVT.ZS\nSouth Africa\nZAF\n10.297622\n10.699428\n12.035928\n12.779812\n12.467018\n13.316695\n...\n1.908137e+01\n1.931406e+01\n1.898507e+01\n1.930756e+01\n1.923608e+01\n1.941097e+01\n1.967512e+01\n2.079249e+01\n19.647165\n19.58669\n\n\n18\nGeneral government final consumption expenditu...\nNE.CON.GOVT.KD.ZG\nSouth Africa\nZAF\n4.401931\n7.739017\n12.101373\n5.497581\n3.830868\n0.671627\n...\n3.161688e+00\n1.926107e+00\n-9.611109e-01\n2.017402e+00\n-2.780717e-01\n1.183393e+00\n2.062742e+00\n7.576300e-01\n0.558382\n0.89008\n\n\n19\nGNI growth (annual %)\nNY.GNP.MKTP.KD.ZG\nSouth Africa\nZAF\n4.473621\n5.871763\n1.32291\n2.248289\n-0.254081\n3.03225\n...\n2.588480e+00\n1.363954e+00\n1.498784e+00\n3.759383e-01\n9.075913e-01\n1.512658e+00\n5.952990e-01\n-5.572645e+00\n4.605902\n1.910642\n\n\n20\nGoods exports (BoP, current US$)\nBX.GSR.MRCH.CD\nSouth Africa\nZAF\n6239348867.30073\n8747567732.17531\n8839265940.984699\n8559449992.557\n10494899990.874001\n12993849988.701\n...\n9.652448e+10\n9.324668e+10\n8.079079e+10\n7.651746e+10\n8.763803e+10\n9.428962e+10\n8.992727e+10\n8.540777e+10\n121772229102.253006\n123501236087.477005\n\n\n21\nGoods imports (BoP, current US$)\nBM.GSR.MRCH.CD\nSouth Africa\nZAF\n5331308044.63265\n8687019546.23003\n9380741471.68993\n8750349992.391001\n8135099992.926\n9519699991.722\n...\n1.041830e+11\n9.906538e+10\n8.508068e+10\n7.464745e+10\n8.322101e+10\n9.241962e+10\n8.744045e+10\n6.774088e+10\n91288484886.832306\n109462078835.214996\n\n\n22\nImports of goods and services (% of GDP)\nNE.IMP.GNFS.ZS\nSouth Africa\nZAF\n19.464541\n24.641752\n25.969114\n24.967163\n21.927644\n22.526518\n...\n3.049575e+01\n3.049895e+01\n2.901304e+01\n2.770517e+01\n2.619586e+01\n2.706507e+01\n2.675730e+01\n2.320068e+01\n25.024165\n31.464978\n\n\n23\nImports of goods and services (annual % growth)\nNE.IMP.GNFS.KD.ZG\nSouth Africa\nZAF\n11.236487\n19.010695\n-3.287557\n-10.002526\n-13.676915\n0.090345\n...\n4.038731e+00\n-6.870395e-01\n5.044861e+00\n-4.133248e+00\n1.532431e+00\n3.245637e+00\n4.344404e-01\n-1.739942e+01\n9.494297\n14.212437\n\n\n24\nServices, value added (% of GDP)\nNV.SRV.TOTL.ZS\nSouth Africa\nZAF\n54.109085\n52.433951\n52.171447\n52.536121\n52.930282\n51.602193\n...\n6.405374e+01\n6.401178e+01\n6.410258e+01\n6.391340e+01\n6.433043e+01\n6.419099e+01\n6.426872e+01\n6.471676e+01\n63.018179\n62.612125\n\n\n25\nServices, value added (annual % growth)\nNV.SRV.TOTL.KD.ZG\nSouth Africa\nZAF\n5.771584\n6.939034\n5.033585\n2.866089\n-0.231938\n2.178188\n...\n2.671074e+00\n2.039776e+00\n1.565569e+00\n1.593865e+00\n1.149170e+00\n1.981519e+00\n1.108507e+00\n-4.398186e+00\n4.088044\n3.566733\n\n\n26\nShort-term debt (% of total reserves)\nDT.DOD.DSTC.IR.ZS\nSouth Africa\nZAF\n..\n..\n..\n..\n..\n..\n...\n7.290954e+01\n8.641621e+01\n8.068505e+01\n7.884676e+01\n8.060660e+01\n9.269231e+01\n8.081969e+01\n6.740232e+01\n63.010063\n..\n\n\n27\nTrade (% of GDP)\nNE.TRD.GNFS.ZS\nSouth Africa\nZAF\n41.151497\n48.796359\n49.814056\n48.880753\n48.211386\n50.951511\n...\n5.887503e+01\n5.949957e+01\n5.672668e+01\n5.586126e+01\n5.353593e+01\n5.462771e+01\n5.405477e+01\n5.080098e+01\n56.21798\n64.90885\n\n\n28\nConsumer price index (2010 = 100)\nFP.CPI.TOTL\nSouth Africa\nZAF\n2.896167\n3.235717\n3.670142\n4.074606\n4.529005\n5.033337\n...\n1.174315e+02\n1.246298e+02\n1.302888e+02\n1.388506e+02\n1.460490e+02\n1.526462e+02\n1.589356e+02\n1.640375e+02\n171.602404\n183.682744\n\n\n29\nInflation, consumer prices (annual %)\nFP.CPI.TOTL.ZG\nSouth Africa\nZAF\n9.433987\n11.724126\n13.425942\n11.020391\n11.151964\n11.135608\n...\n5.784469e+00\n6.129838e+00\n4.540642e+00\n6.571396e+00\n5.184247e+00\n4.517165e+00\n4.120246e+00\n3.210036e+00\n4.611672\n7.039727\n\n\n30\nReal interest rate (%)\nFR.INR.RINR\nSouth Africa\nZAF\n-7.792579\n-4.05072\n0.763318\n1.775301\n2.034816\n1.451656\n...\n2.509245e+00\n3.567028e+00\n3.667743e+00\n3.278252e+00\n4.647315e+00\n6.108760e+00\n5.243711e+00\n1.907151e+00\n0.774484\n3.557564\n\n\n31\nLife expectancy at birth, total (years)\nSP.DYN.LE00.IN\nSouth Africa\nZAF\n56.722\n57.117\n57.512\n58.006\n58.492\n58.979\n...\n6.253300e+01\n6.338000e+01\n6.395000e+01\n6.474700e+01\n6.540200e+01\n6.567400e+01\n6.617500e+01\n6.525200e+01\n62.341\n..\n\n\n32\nMilitary expenditure (% of GDP)\nMS.MIL.XPND.GD.ZS\nSouth Africa\nZAF\n2.64691\n3.085199\n3.874955\n4.727991\n5.263335\n4.562199\n...\n1.027794e+00\n1.021894e+00\n1.006929e+00\n9.710468e-01\n9.435685e-01\n8.971964e-01\n8.842445e-01\n9.575167e-01\n0.809813\n0.739894\n\n\n\n\n33 rows × 54 columns\n\n\n\n\ndf = df.T\ndf.columns = df.iloc[0]\ndf.head(5)\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annual % growth)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annua...\nAdjusted savings: consumption of fixed capital...\nAdjusted savings: education expenditure (% of ...\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\nSeries Code\nNY.ADJ.NNTY.KD.ZG\nNY.ADJ.NNTY.KD\nNY.ADJ.NNTY.PC.KD.ZG\nNY.ADJ.DKAP.GN.ZS\nNY.ADJ.AEDU.GN.ZS\nNY.ADJ.ICTR.GN.ZS\nNY.ADJ.NNAT.GN.ZS\nBN.CAB.XOKA.GD.ZS\nNE.EXP.GNFS.ZS\nNE.EXP.GNFS.KD.ZG\n...\nNE.IMP.GNFS.KD.ZG\nNV.SRV.TOTL.ZS\nNV.SRV.TOTL.KD.ZG\nDT.DOD.DSTC.IR.ZS\nNE.TRD.GNFS.ZS\nFP.CPI.TOTL\nFP.CPI.TOTL.ZG\nFR.INR.RINR\nSP.DYN.LE00.IN\nMS.MIL.XPND.GD.ZS\n\n\nCountry Name\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\n...\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\nSouth Africa\n\n\nCountry Code\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\n...\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\nZAF\n\n\n1973 [YR1973]\n13.995649\n83566486105.631912\n10.797713\n12.087193\n5.039765\n30.780949\n18.693756\n-0.776829\n21.686956\n-5.181406\n...\n11.236487\n54.109085\n5.771584\n..\n41.151497\n2.896167\n9.433987\n-7.792579\n56.722\n2.64691\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[4:]\ndf\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annual % growth)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\n\n\n1973 [YR1973]\n13.995649\n83566486105.631912\n10.797713\n12.087193\n5.039765\n30.780949\n18.693756\n-0.776829\n21.686956\n-5.181406\n...\n11.236487\n54.109085\n5.771584\n..\n41.151497\n2.896167\n9.433987\n-7.792579\n56.722\n2.64691\n\n\n1974 [YR1974]\n6.064966\n88634764781.144974\n3.127517\n12.005429\n5.039765\n33.04485\n21.039421\n-3.473635\n24.154607\n-4.891985\n...\n19.010695\n52.433951\n6.939034\n..\n48.796359\n3.235717\n11.724126\n-4.05072\n57.117\n3.085199\n\n\n1975 [YR1975]\n-5.909503\n83396890689.261108\n-8.467988\n13.771913\n5.039765\n27.352749\n13.580836\n-5.586817\n23.844942\n-1.159137\n...\n-3.287557\n52.171447\n5.033585\n..\n49.814056\n3.670142\n13.425942\n0.763318\n57.512\n3.874955\n\n\n1976 [YR1976]\n-1.689113\n81988222737.455215\n-4.296609\n15.281072\n5.039765\n26.416145\n11.135073\n-4.647458\n23.91359\n4.299431\n...\n-10.002526\n52.536121\n2.866089\n..\n48.880753\n4.074606\n11.020391\n1.775301\n58.006\n4.727991\n\n\n1977 [YR1977]\n-0.35459\n81697500513.628571\n-2.990586\n15.936839\n5.039765\n26.913529\n10.97669\n0.527704\n26.283743\n4.602098\n...\n-13.676915\n52.930282\n-0.231938\n..\n48.211386\n4.529005\n11.151964\n2.034816\n58.492\n5.263335\n\n\n1978 [YR1978]\n4.950963\n85742313274.95488\n2.158098\n16.373562\n5.039765\n27.967647\n11.594085\n2.130315\n28.424993\n3.296801\n...\n0.090345\n51.602193\n2.178188\n..\n50.951511\n5.033337\n11.135608\n1.451656\n58.979\n4.562199\n\n\n1979 [YR1979]\n3.350908\n88615459552.339752\n0.636966\n16.277909\n5.039765\n29.75363\n13.475721\n4.703533\n31.243406\n1.840777\n...\n-0.959388\n49.35569\n3.000187\n..\n54.107008\n5.702452\n13.293659\n-3.476381\n59.395\n3.863074\n\n\n1980 [YR1980]\n9.904481\n97392360990.725662\n7.045164\n14.5733\n5.039765\n33.709562\n19.136262\n3.535761\n31.870988\n-0.003044\n...\n19.075713\n46.894611\n6.429982\n..\n56.507317\n6.48142\n13.660241\n-11.009011\n59.813\n3.304634\n\n\n1981 [YR1981]\n0.585617\n97962707478.349136\n-1.972934\n15.190753\n5.039765\n29.115968\n13.925215\n-5.34495\n25.203391\n-5.353109\n...\n13.73558\n48.085981\n5.234413\n..\n52.192956\n7.470112\n15.254244\n2.328029\n60.364\n3.638129\n\n\n1982 [YR1982]\n0.038075\n98000006500.174164\n-2.508976\n16.481704\n5.039765\n25.419758\n8.938054\n-4.104354\n23.387581\n-2.64486\n...\n-17.367011\n49.471461\n1.290263\n..\n47.141816\n8.563664\n14.639032\n4.172434\n60.933\n3.614093\n\n\n1983 [YR1983]\n1.712912\n99678660156.596725\n-0.977156\n17.005809\n5.039765\n24.428793\n7.422984\n-0.335977\n21.767851\n-1.328627\n...\n-16.092234\n50.675026\n2.235726\n..\n40.256202\n9.617269\n12.303207\n-0.343775\n61.465\n3.604648\n\n\n1984 [YR1984]\n8.936334\n108586277749.39447\n5.93425\n16.480074\n5.039765\n22.984494\n6.50442\n-2.299721\n22.498742\n2.666252\n...\n19.79905\n51.248732\n5.845233\n..\n43.392941\n10.725802\n11.526481\n10.060939\n61.907\n3.695607\n\n\n1985 [YR1985]\n-6.105116\n101956959227.92334\n-8.844539\n17.461468\n5.039765\n23.313754\n5.852287\n3.508188\n27.902881\n10.077095\n...\n-14.036267\n50.7215\n-0.198333\n..\n47.948266\n12.473489\n16.294227\n4.611218\n62.38\n3.698334\n\n\n1986 [YR1986]\n-1.685451\n100238524763.102783\n-4.856264\n18.693445\n5.039765\n22.125466\n3.43202\n3.770653\n27.24767\n-3.690397\n...\n-2.452128\n50.485628\n0.728637\n..\n46.648928\n14.800408\n18.654919\n-1.991767\n62.912\n3.820576\n\n\n1987 [YR1987]\n6.58513\n106839361890.013748\n2.92157\n17.94924\n4.7\n20.33261\n2.38337\n5.287891\n26.891376\n4.649094\n...\n3.494172\n51.589417\n3.372391\n..\n44.971254\n17.19224\n16.160581\n-2.044467\n63.041\n4.19217\n\n\n1988 [YR1988]\n3.790607\n110889221894.532211\n0.253041\n17.286543\n4.8\n20.282153\n2.99561\n2.436714\n25.802494\n8.169842\n...\n21.908891\n50.978899\n3.170485\n..\n45.851312\n19.38933\n12.779545\n-0.075809\n63.345\n4.623759\n\n\n1989 [YR1989]\n3.229359\n114470233360.373306\n-0.173911\n17.105508\n4.6\n21.029295\n3.923787\n1.386317\n23.70684\n2.181119\n...\n0.318191\n51.314949\n2.005661\n..\n42.699765\n22.245556\n14.730918\n2.350216\n63.31\n4.351925\n\n\n1990 [YR1990]\n-0.065266\n114395523269.884598\n-3.094781\n16.835831\n4.8\n16.739202\n-0.053649\n1.230935\n21.538542\n-0.433826\n...\n-5.836772\n52.43908\n0.632538\n..\n38.211801\n25.431333\n14.320956\n4.811415\n63.375\n3.894626\n\n\n1991 [YR1991]\n2.902865\n117716270497.987839\n0.303593\n15.759493\n5.3\n16.916625\n1.120106\n1.034824\n19.340815\n-1.54542\n...\n2.142647\n54.181175\n0.198092\n..\n34.881609\n29.331177\n15.334802\n4.027493\n63.265\n3.222634\n\n\n1992 [YR1992]\n2.130873\n120224654822.892014\n0.052596\n15.146385\n6.434156\n16.311955\n1.116088\n1.347454\n18.955147\n5.490871\n...\n5.347362\n56.949187\n-0.142922\n..\n34.321353\n33.400784\n13.87468\n3.654137\n63.341\n2.817651\n\n\n1993 [YR1993]\n15.909859\n139352227772.151428\n13.825588\n14.180094\n5.7\n16.109559\n1.877716\n1.904381\n19.914367\n10.379044\n...\n7.017436\n57.309575\n0.714966\n..\n35.698124\n36.646495\n9.717467\n2.464688\n63.045\n2.495524\n\n\n1994 [YR1994]\n2.036045\n142189502332.603424\n0.284957\n13.890465\n5.5\n15.617718\n1.736657\n0.019295\n19.549338\n2.485785\n...\n16.092833\n57.314076\n3.362282\n234.880388\n37.114609\n39.922151\n8.938525\n5.25547\n62.612\n2.561966\n\n\n1995 [YR1995]\n5.301757\n149728044588.103424\n3.582636\n13.85129\n6.40912\n17.007621\n3.14229\n-1.451792\n20.037861\n10.937404\n...\n16.790808\n58.231445\n4.739318\n216.710587\n39.478034\n43.387571\n8.680444\n6.367395\n62.262\n2.117864\n\n\n1996 [YR1996]\n3.860539\n155508353812.107635\n2.28962\n13.535527\n5.5\n15.972151\n2.449067\n-1.028083\n21.774743\n7.203829\n...\n8.710615\n59.214983\n4.199385\n462.705392\n42.199252\n46.578342\n7.354113\n10.644809\n61.459\n1.755879\n\n\n1997 [YR1997]\n3.246827\n160557440598.828491\n1.825415\n13.471937\n6.6\n15.161127\n1.666842\n-1.318134\n21.660592\n5.295733\n...\n5.385159\n59.962326\n2.271625\n183.438407\n42.301334\n50.583046\n8.597783\n10.969899\n60.805\n1.582134\n\n\n1998 [YR1998]\n0.855452\n161930931970.396332\n-0.391969\n13.805377\n6.086164\n15.082602\n1.259044\n-1.437497\n22.519272\n3.246208\n...\n2.013627\n60.402302\n2.966687\n207.768508\n44.035745\n54.063436\n6.880546\n12.691034\n60.001\n1.383167\n\n\n1999 [YR1999]\n0.901185\n163390229628.396454\n-0.214176\n14.157604\n5.9\n14.725291\n0.598359\n-0.445657\n22.269216\n1.261048\n...\n-8.361798\n61.406463\n4.362736\n144.263852\n42.258296\n56.86473\n5.181493\n10.395067\n59.241\n1.272053\n\n\n2000 [YR2000]\n5.707815\n172716240879.557312\n4.694876\n13.705328\n5.25\n15.429813\n1.68097\n-0.12557\n24.404303\n8.313563\n...\n5.337552\n61.185981\n4.570342\n124.031734\n46.220722\n59.90071\n5.338951\n4.870582\n58.47\n1.387289\n\n\n2001 [YR2001]\n2.088959\n176324213032.592529\n1.18879\n13.694252\n5.13\n15.178752\n1.449107\n0.253001\n26.356661\n2.392881\n...\n0.249889\n60.78315\n3.799326\n109.547092\n49.170945\n63.316188\n5.7019\n5.538341\n57.261\n1.483161\n\n\n2002 [YR2002]\n7.256405\n189119012116.349884\n6.284692\n13.488887\n5.13\n18.342603\n4.897235\n0.781937\n28.431167\n0.989283\n...\n5.341589\n60.79179\n4.075018\n103.034689\n53.465502\n69.327877\n9.494711\n2.854186\n55.666\n1.52931\n\n\n2003 [YR2003]\n5.884859\n200248398756.450928\n4.910769\n13.216913\n4.88\n18.826055\n5.649422\n-0.78245\n23.915273\n0.109275\n...\n8.08482\n62.576942\n4.501423\n137.29308\n45.723863\n73.265297\n5.679418\n8.047848\n54.331\n1.468811\n\n\n2004 [YR2004]\n4.195651\n208650122687.474457\n3.225662\n12.473695\n4.99\n17.272347\n4.832735\n-2.507261\n22.757519\n2.833729\n...\n15.507869\n62.529502\n4.445779\n91.003816\n45.643575\n72.758279\n-0.69203\n4.950384\n54.043\n1.355729\n\n\n2005 [YR2005]\n7.144347\n223556812181.368378\n6.136502\n12.241966\n4.98\n18.006126\n5.759526\n-2.774776\n23.599764\n8.567217\n...\n10.87926\n62.644774\n5.269852\n85.151664\n47.427781\n74.25917\n2.062846\n4.761489\n53.98\n1.234811\n\n\n2006 [YR2006]\n6.492212\n238070593959.189423\n5.470988\n12.525297\n5.0\n18.417908\n5.875694\n-4.000124\n26.09825\n7.46276\n...\n18.261115\n63.499432\n6.309736\n95.325501\n53.768141\n76.668069\n3.243908\n4.810302\n54.278\n1.153872\n\n\n2007 [YR2007]\n3.218811\n245733636054.269897\n2.177586\n12.887009\n4.87\n17.520851\n4.650531\n-4.861892\n27.958964\n7.828316\n...\n9.366345\n62.754513\n6.103009\n88.771353\n57.125139\n81.404474\n6.177807\n4.546046\n54.992\n1.058839\n\n\n2008 [YR2008]\n-3.238127\n237776468713.710907\n-4.32833\n13.665902\n4.87\n16.798836\n3.143315\n-5.186181\n32.254674\n1.549832\n...\n2.809097\n61.537141\n4.023023\n92.170994\n65.974524\n89.60563\n10.074576\n6.745152\n56.022\n1.039513\n\n\n2009 [YR2009]\n4.779639\n249141325846.090698\n3.540881\n14.032971\n5.21\n17.733852\n3.707778\n-2.384582\n24.982746\n-17.023821\n...\n-17.659935\n63.636088\n0.261796\n73.692048\n49.587535\n96.070957\n7.215314\n2.802509\n57.447\n1.089505\n\n\n2010 [YR2010]\n3.528417\n257932070381.733276\n2.300624\n13.445572\n5.55\n17.483021\n4.04744\n-1.299018\n25.783418\n7.718008\n...\n10.793742\n64.275263\n1.745262\n73.193365\n50.406087\n100.0\n4.08973\n3.49096\n58.899\n1.003481\n\n\n2011 [YR2011]\n2.649587\n264766204020.996796\n1.360864\n13.212434\n5.89\n16.487799\n3.293132\n-2.019676\n27.698148\n3.008443\n...\n11.838458\n64.342198\n3.699629\n60.145736\n54.63635\n104.999267\n4.999267\n3.279301\n60.651\n1.002653\n\n\n2012 [YR2012]\n1.823358\n269593838716.74469\n0.478918\n13.449744\n6.25\n13.844242\n0.378718\n-4.683736\n27.139149\n1.112331\n...\n3.86834\n64.304511\n2.870055\n71.973531\n55.582617\n111.010116\n5.724658\n3.882873\n61.846\n1.033523\n\n\n2013 [YR2013]\n1.426967\n273440854145.168365\n0.055276\n13.992788\n5.932454\n14.180657\n0.19493\n-5.338373\n28.37928\n3.732974\n...\n4.038731\n64.053743\n2.671074\n72.909537\n58.875028\n117.431462\n5.784469\n2.509245\n62.533\n1.027794\n\n\n2014 [YR2014]\n1.673637\n278017261067.952454\n0.083527\n14.138435\n5.97\n14.029707\n-0.118337\n-4.812433\n29.000619\n3.646286\n...\n-0.68704\n64.011782\n2.039776\n86.416215\n59.499574\n124.62982\n6.129838\n3.567028\n63.38\n1.021894\n\n\n2015 [YR2015]\n3.396159\n287459170054.090027\n1.273791\n14.164393\n5.635345\n14.624014\n0.449553\n-4.310287\n27.713638\n3.059774\n...\n5.044861\n64.102576\n1.565569\n80.685046\n56.726676\n130.288814\n4.540642\n3.667743\n63.95\n1.006929\n\n\n2016 [YR2016]\n-0.410249\n286279871099.852661\n-1.373576\n14.581704\n5.30069\n14.663644\n0.09563\n-2.633615\n28.156088\n0.407509\n...\n-4.133248\n63.913402\n1.593865\n78.846756\n55.861258\n138.850608\n6.571396\n3.278252\n64.747\n0.971047\n\n\n2017 [YR2017]\n2.744982\n294138202495.700073\n2.347842\n14.09668\n5.464473\n14.649881\n0.548186\n-2.374368\n27.340076\n-0.273236\n...\n1.532431\n64.330426\n1.14917\n80.606604\n53.535932\n146.048966\n5.184247\n4.647315\n65.402\n0.943568\n\n\n2018 [YR2018]\n1.084757\n297328886591.386658\n-0.146507\n14.267286\n5.514553\n13.954344\n-0.328763\n-3.0087\n27.56264\n2.741158\n...\n3.245637\n64.19099\n1.981519\n92.692307\n54.627712\n152.64624\n4.517165\n6.10876\n65.674\n0.897196\n\n\n2019 [YR2019]\n0.621565\n299176978735.692749\n-0.673157\n14.415053\n5.820015\n13.810482\n-0.59541\n-2.625377\n27.297471\n-3.445217\n...\n0.43444\n64.268723\n1.108507\n80.819685\n54.054766\n158.93564\n4.120246\n5.243711\n66.175\n0.884245\n\n\n2020 [YR2020]\n-5.191452\n283645350045.771851\n-6.344067\n15.34208\n5.820015\n14.898851\n-0.451413\n1.984891\n27.600303\n-11.862908\n...\n-17.399425\n64.716759\n-4.398186\n67.40232\n50.800982\n164.037531\n3.210036\n1.907151\n65.252\n0.957517\n\n\n2021 [YR2021]\n..\n..\n..\n..\n..\n..\n..\n3.699256\n31.193814\n9.98685\n...\n9.494297\n63.018179\n4.088044\n63.010063\n56.21798\n171.602404\n4.611672\n0.774484\n62.341\n0.809813\n\n\n2022 [YR2022]\n..\n..\n..\n..\n..\n..\n..\n-0.418256\n33.443871\n7.546529\n...\n14.212437\n62.612125\n3.566733\n..\n64.90885\n183.682744\n7.039727\n3.557564\n..\n0.739894\n\n\n\n\n50 rows × 33 columns\n\n\n\n\nprint(df.isnull().sum())\n\nSeries Name\nAdjusted net national income (annual % growth)                        0\nAdjusted net national income (constant 2015 US$)                      0\nAdjusted net national income per capita (annual % growth)             0\nAdjusted savings: consumption of fixed capital (% of GNI)             0\nAdjusted savings: education expenditure (% of GNI)                    0\nAdjusted savings: gross savings (% of GNI)                            0\nAdjusted savings: net national savings (% of GNI)                     0\nCurrent account balance (% of GDP)                                    0\nExports of goods and services (% of GDP)                              0\nExports of goods and services (annual % growth)                       0\nExternal debt stocks (% of GNI)                                       0\nFinal consumption expenditure (% of GDP)                              0\nFinal consumption expenditure (annual % growth)                       0\nForeign direct investment, net inflows (% of GDP)                     0\nForeign direct investment, net outflows (% of GDP)                    0\nGDP growth (annual %)                                                 0\nGDP per capita growth (annual %)                                      0\nGeneral government final consumption expenditure (% of GDP)           0\nGeneral government final consumption expenditure (annual % growth)    0\nGNI growth (annual %)                                                 0\nGoods exports (BoP, current US$)                                      0\nGoods imports (BoP, current US$)                                      0\nImports of goods and services (% of GDP)                              0\nImports of goods and services (annual % growth)                       0\nServices, value added (% of GDP)                                      0\nServices, value added (annual % growth)                               0\nShort-term debt (% of total reserves)                                 0\nTrade (% of GDP)                                                      0\nConsumer price index (2010 = 100)                                     0\nInflation, consumer prices (annual %)                                 0\nReal interest rate (%)                                                0\nLife expectancy at birth, total (years)                               0\nMilitary expenditure (% of GDP)                                       0\ndtype: int64\n\n\n\n# creating a new index rather than treating it\nnew_index = range(1973, 2023)\n\n# Reset the index with the new range\ndf = df.reset_index(drop=True)\ndf.index = new_index\ndf.index.name = \"year\"\n\ndf.shape\n\n(50, 33)\n\n\n\ncols= ['adj_NNI_g', 'adj_NNI_c', 'adj_savings_fix_cap_GNI', 'adj_savings_edu_GNI', 'adj_NNS_GNI',\n                    'curr_acc_bal', 'ex_imp_gdp', 'ex_imp_growth', 'ex_debt_shocks', 'final_consump_exp_gdp',\n                    'final_consump_exp_growth', 'fdi_net_inflows', 'fdi_net_outflows', 'gdp_growth', 'gdp_per_capita_growth',\n                    'gener_govt_fin_consump_exp', 'gni_growth', 'goods_exp_bop','goods_imp_bop', 'imports_goods_services_gdp', 'imports_goods_services_growth','services_gdp', 'services_growth', \n                       'short_term_debt_tot_reserves','trade_gdp', 'cpi', 'inflation','real_interest_rate','lending_interest_rate','life_exp_birth','expense_gdp','interest_payments', 'military expenditure']\n\ndf.columns = cols\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\nshort_term_debt_tot_reserves\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1973\n13.995649\n83566486105.631912\n10.797713\n12.087193\n5.039765\n30.780949\n18.693756\n-0.776829\n21.686956\n-5.181406\n...\n11.236487\n54.109085\n5.771584\n..\n41.151497\n2.896167\n9.433987\n-7.792579\n56.722\n2.64691\n\n\n1974\n6.064966\n88634764781.144974\n3.127517\n12.005429\n5.039765\n33.04485\n21.039421\n-3.473635\n24.154607\n-4.891985\n...\n19.010695\n52.433951\n6.939034\n..\n48.796359\n3.235717\n11.724126\n-4.05072\n57.117\n3.085199\n\n\n1975\n-5.909503\n83396890689.261108\n-8.467988\n13.771913\n5.039765\n27.352749\n13.580836\n-5.586817\n23.844942\n-1.159137\n...\n-3.287557\n52.171447\n5.033585\n..\n49.814056\n3.670142\n13.425942\n0.763318\n57.512\n3.874955\n\n\n1976\n-1.689113\n81988222737.455215\n-4.296609\n15.281072\n5.039765\n26.416145\n11.135073\n-4.647458\n23.91359\n4.299431\n...\n-10.002526\n52.536121\n2.866089\n..\n48.880753\n4.074606\n11.020391\n1.775301\n58.006\n4.727991\n\n\n1977\n-0.35459\n81697500513.628571\n-2.990586\n15.936839\n5.039765\n26.913529\n10.97669\n0.527704\n26.283743\n4.602098\n...\n-13.676915\n52.930282\n-0.231938\n..\n48.211386\n4.529005\n11.151964\n2.034816\n58.492\n5.263335\n\n\n1978\n4.950963\n85742313274.95488\n2.158098\n16.373562\n5.039765\n27.967647\n11.594085\n2.130315\n28.424993\n3.296801\n...\n0.090345\n51.602193\n2.178188\n..\n50.951511\n5.033337\n11.135608\n1.451656\n58.979\n4.562199\n\n\n1979\n3.350908\n88615459552.339752\n0.636966\n16.277909\n5.039765\n29.75363\n13.475721\n4.703533\n31.243406\n1.840777\n...\n-0.959388\n49.35569\n3.000187\n..\n54.107008\n5.702452\n13.293659\n-3.476381\n59.395\n3.863074\n\n\n1980\n9.904481\n97392360990.725662\n7.045164\n14.5733\n5.039765\n33.709562\n19.136262\n3.535761\n31.870988\n-0.003044\n...\n19.075713\n46.894611\n6.429982\n..\n56.507317\n6.48142\n13.660241\n-11.009011\n59.813\n3.304634\n\n\n1981\n0.585617\n97962707478.349136\n-1.972934\n15.190753\n5.039765\n29.115968\n13.925215\n-5.34495\n25.203391\n-5.353109\n...\n13.73558\n48.085981\n5.234413\n..\n52.192956\n7.470112\n15.254244\n2.328029\n60.364\n3.638129\n\n\n1982\n0.038075\n98000006500.174164\n-2.508976\n16.481704\n5.039765\n25.419758\n8.938054\n-4.104354\n23.387581\n-2.64486\n...\n-17.367011\n49.471461\n1.290263\n..\n47.141816\n8.563664\n14.639032\n4.172434\n60.933\n3.614093\n\n\n1983\n1.712912\n99678660156.596725\n-0.977156\n17.005809\n5.039765\n24.428793\n7.422984\n-0.335977\n21.767851\n-1.328627\n...\n-16.092234\n50.675026\n2.235726\n..\n40.256202\n9.617269\n12.303207\n-0.343775\n61.465\n3.604648\n\n\n1984\n8.936334\n108586277749.39447\n5.93425\n16.480074\n5.039765\n22.984494\n6.50442\n-2.299721\n22.498742\n2.666252\n...\n19.79905\n51.248732\n5.845233\n..\n43.392941\n10.725802\n11.526481\n10.060939\n61.907\n3.695607\n\n\n1985\n-6.105116\n101956959227.92334\n-8.844539\n17.461468\n5.039765\n23.313754\n5.852287\n3.508188\n27.902881\n10.077095\n...\n-14.036267\n50.7215\n-0.198333\n..\n47.948266\n12.473489\n16.294227\n4.611218\n62.38\n3.698334\n\n\n1986\n-1.685451\n100238524763.102783\n-4.856264\n18.693445\n5.039765\n22.125466\n3.43202\n3.770653\n27.24767\n-3.690397\n...\n-2.452128\n50.485628\n0.728637\n..\n46.648928\n14.800408\n18.654919\n-1.991767\n62.912\n3.820576\n\n\n1987\n6.58513\n106839361890.013748\n2.92157\n17.94924\n4.7\n20.33261\n2.38337\n5.287891\n26.891376\n4.649094\n...\n3.494172\n51.589417\n3.372391\n..\n44.971254\n17.19224\n16.160581\n-2.044467\n63.041\n4.19217\n\n\n1988\n3.790607\n110889221894.532211\n0.253041\n17.286543\n4.8\n20.282153\n2.99561\n2.436714\n25.802494\n8.169842\n...\n21.908891\n50.978899\n3.170485\n..\n45.851312\n19.38933\n12.779545\n-0.075809\n63.345\n4.623759\n\n\n1989\n3.229359\n114470233360.373306\n-0.173911\n17.105508\n4.6\n21.029295\n3.923787\n1.386317\n23.70684\n2.181119\n...\n0.318191\n51.314949\n2.005661\n..\n42.699765\n22.245556\n14.730918\n2.350216\n63.31\n4.351925\n\n\n1990\n-0.065266\n114395523269.884598\n-3.094781\n16.835831\n4.8\n16.739202\n-0.053649\n1.230935\n21.538542\n-0.433826\n...\n-5.836772\n52.43908\n0.632538\n..\n38.211801\n25.431333\n14.320956\n4.811415\n63.375\n3.894626\n\n\n1991\n2.902865\n117716270497.987839\n0.303593\n15.759493\n5.3\n16.916625\n1.120106\n1.034824\n19.340815\n-1.54542\n...\n2.142647\n54.181175\n0.198092\n..\n34.881609\n29.331177\n15.334802\n4.027493\n63.265\n3.222634\n\n\n1992\n2.130873\n120224654822.892014\n0.052596\n15.146385\n6.434156\n16.311955\n1.116088\n1.347454\n18.955147\n5.490871\n...\n5.347362\n56.949187\n-0.142922\n..\n34.321353\n33.400784\n13.87468\n3.654137\n63.341\n2.817651\n\n\n1993\n15.909859\n139352227772.151428\n13.825588\n14.180094\n5.7\n16.109559\n1.877716\n1.904381\n19.914367\n10.379044\n...\n7.017436\n57.309575\n0.714966\n..\n35.698124\n36.646495\n9.717467\n2.464688\n63.045\n2.495524\n\n\n1994\n2.036045\n142189502332.603424\n0.284957\n13.890465\n5.5\n15.617718\n1.736657\n0.019295\n19.549338\n2.485785\n...\n16.092833\n57.314076\n3.362282\n234.880388\n37.114609\n39.922151\n8.938525\n5.25547\n62.612\n2.561966\n\n\n1995\n5.301757\n149728044588.103424\n3.582636\n13.85129\n6.40912\n17.007621\n3.14229\n-1.451792\n20.037861\n10.937404\n...\n16.790808\n58.231445\n4.739318\n216.710587\n39.478034\n43.387571\n8.680444\n6.367395\n62.262\n2.117864\n\n\n1996\n3.860539\n155508353812.107635\n2.28962\n13.535527\n5.5\n15.972151\n2.449067\n-1.028083\n21.774743\n7.203829\n...\n8.710615\n59.214983\n4.199385\n462.705392\n42.199252\n46.578342\n7.354113\n10.644809\n61.459\n1.755879\n\n\n1997\n3.246827\n160557440598.828491\n1.825415\n13.471937\n6.6\n15.161127\n1.666842\n-1.318134\n21.660592\n5.295733\n...\n5.385159\n59.962326\n2.271625\n183.438407\n42.301334\n50.583046\n8.597783\n10.969899\n60.805\n1.582134\n\n\n1998\n0.855452\n161930931970.396332\n-0.391969\n13.805377\n6.086164\n15.082602\n1.259044\n-1.437497\n22.519272\n3.246208\n...\n2.013627\n60.402302\n2.966687\n207.768508\n44.035745\n54.063436\n6.880546\n12.691034\n60.001\n1.383167\n\n\n1999\n0.901185\n163390229628.396454\n-0.214176\n14.157604\n5.9\n14.725291\n0.598359\n-0.445657\n22.269216\n1.261048\n...\n-8.361798\n61.406463\n4.362736\n144.263852\n42.258296\n56.86473\n5.181493\n10.395067\n59.241\n1.272053\n\n\n2000\n5.707815\n172716240879.557312\n4.694876\n13.705328\n5.25\n15.429813\n1.68097\n-0.12557\n24.404303\n8.313563\n...\n5.337552\n61.185981\n4.570342\n124.031734\n46.220722\n59.90071\n5.338951\n4.870582\n58.47\n1.387289\n\n\n2001\n2.088959\n176324213032.592529\n1.18879\n13.694252\n5.13\n15.178752\n1.449107\n0.253001\n26.356661\n2.392881\n...\n0.249889\n60.78315\n3.799326\n109.547092\n49.170945\n63.316188\n5.7019\n5.538341\n57.261\n1.483161\n\n\n2002\n7.256405\n189119012116.349884\n6.284692\n13.488887\n5.13\n18.342603\n4.897235\n0.781937\n28.431167\n0.989283\n...\n5.341589\n60.79179\n4.075018\n103.034689\n53.465502\n69.327877\n9.494711\n2.854186\n55.666\n1.52931\n\n\n2003\n5.884859\n200248398756.450928\n4.910769\n13.216913\n4.88\n18.826055\n5.649422\n-0.78245\n23.915273\n0.109275\n...\n8.08482\n62.576942\n4.501423\n137.29308\n45.723863\n73.265297\n5.679418\n8.047848\n54.331\n1.468811\n\n\n2004\n4.195651\n208650122687.474457\n3.225662\n12.473695\n4.99\n17.272347\n4.832735\n-2.507261\n22.757519\n2.833729\n...\n15.507869\n62.529502\n4.445779\n91.003816\n45.643575\n72.758279\n-0.69203\n4.950384\n54.043\n1.355729\n\n\n2005\n7.144347\n223556812181.368378\n6.136502\n12.241966\n4.98\n18.006126\n5.759526\n-2.774776\n23.599764\n8.567217\n...\n10.87926\n62.644774\n5.269852\n85.151664\n47.427781\n74.25917\n2.062846\n4.761489\n53.98\n1.234811\n\n\n2006\n6.492212\n238070593959.189423\n5.470988\n12.525297\n5.0\n18.417908\n5.875694\n-4.000124\n26.09825\n7.46276\n...\n18.261115\n63.499432\n6.309736\n95.325501\n53.768141\n76.668069\n3.243908\n4.810302\n54.278\n1.153872\n\n\n2007\n3.218811\n245733636054.269897\n2.177586\n12.887009\n4.87\n17.520851\n4.650531\n-4.861892\n27.958964\n7.828316\n...\n9.366345\n62.754513\n6.103009\n88.771353\n57.125139\n81.404474\n6.177807\n4.546046\n54.992\n1.058839\n\n\n2008\n-3.238127\n237776468713.710907\n-4.32833\n13.665902\n4.87\n16.798836\n3.143315\n-5.186181\n32.254674\n1.549832\n...\n2.809097\n61.537141\n4.023023\n92.170994\n65.974524\n89.60563\n10.074576\n6.745152\n56.022\n1.039513\n\n\n2009\n4.779639\n249141325846.090698\n3.540881\n14.032971\n5.21\n17.733852\n3.707778\n-2.384582\n24.982746\n-17.023821\n...\n-17.659935\n63.636088\n0.261796\n73.692048\n49.587535\n96.070957\n7.215314\n2.802509\n57.447\n1.089505\n\n\n2010\n3.528417\n257932070381.733276\n2.300624\n13.445572\n5.55\n17.483021\n4.04744\n-1.299018\n25.783418\n7.718008\n...\n10.793742\n64.275263\n1.745262\n73.193365\n50.406087\n100.0\n4.08973\n3.49096\n58.899\n1.003481\n\n\n2011\n2.649587\n264766204020.996796\n1.360864\n13.212434\n5.89\n16.487799\n3.293132\n-2.019676\n27.698148\n3.008443\n...\n11.838458\n64.342198\n3.699629\n60.145736\n54.63635\n104.999267\n4.999267\n3.279301\n60.651\n1.002653\n\n\n2012\n1.823358\n269593838716.74469\n0.478918\n13.449744\n6.25\n13.844242\n0.378718\n-4.683736\n27.139149\n1.112331\n...\n3.86834\n64.304511\n2.870055\n71.973531\n55.582617\n111.010116\n5.724658\n3.882873\n61.846\n1.033523\n\n\n2013\n1.426967\n273440854145.168365\n0.055276\n13.992788\n5.932454\n14.180657\n0.19493\n-5.338373\n28.37928\n3.732974\n...\n4.038731\n64.053743\n2.671074\n72.909537\n58.875028\n117.431462\n5.784469\n2.509245\n62.533\n1.027794\n\n\n2014\n1.673637\n278017261067.952454\n0.083527\n14.138435\n5.97\n14.029707\n-0.118337\n-4.812433\n29.000619\n3.646286\n...\n-0.68704\n64.011782\n2.039776\n86.416215\n59.499574\n124.62982\n6.129838\n3.567028\n63.38\n1.021894\n\n\n2015\n3.396159\n287459170054.090027\n1.273791\n14.164393\n5.635345\n14.624014\n0.449553\n-4.310287\n27.713638\n3.059774\n...\n5.044861\n64.102576\n1.565569\n80.685046\n56.726676\n130.288814\n4.540642\n3.667743\n63.95\n1.006929\n\n\n2016\n-0.410249\n286279871099.852661\n-1.373576\n14.581704\n5.30069\n14.663644\n0.09563\n-2.633615\n28.156088\n0.407509\n...\n-4.133248\n63.913402\n1.593865\n78.846756\n55.861258\n138.850608\n6.571396\n3.278252\n64.747\n0.971047\n\n\n2017\n2.744982\n294138202495.700073\n2.347842\n14.09668\n5.464473\n14.649881\n0.548186\n-2.374368\n27.340076\n-0.273236\n...\n1.532431\n64.330426\n1.14917\n80.606604\n53.535932\n146.048966\n5.184247\n4.647315\n65.402\n0.943568\n\n\n2018\n1.084757\n297328886591.386658\n-0.146507\n14.267286\n5.514553\n13.954344\n-0.328763\n-3.0087\n27.56264\n2.741158\n...\n3.245637\n64.19099\n1.981519\n92.692307\n54.627712\n152.64624\n4.517165\n6.10876\n65.674\n0.897196\n\n\n2019\n0.621565\n299176978735.692749\n-0.673157\n14.415053\n5.820015\n13.810482\n-0.59541\n-2.625377\n27.297471\n-3.445217\n...\n0.43444\n64.268723\n1.108507\n80.819685\n54.054766\n158.93564\n4.120246\n5.243711\n66.175\n0.884245\n\n\n2020\n-5.191452\n283645350045.771851\n-6.344067\n15.34208\n5.820015\n14.898851\n-0.451413\n1.984891\n27.600303\n-11.862908\n...\n-17.399425\n64.716759\n-4.398186\n67.40232\n50.800982\n164.037531\n3.210036\n1.907151\n65.252\n0.957517\n\n\n2021\n..\n..\n..\n..\n..\n..\n..\n3.699256\n31.193814\n9.98685\n...\n9.494297\n63.018179\n4.088044\n63.010063\n56.21798\n171.602404\n4.611672\n0.774484\n62.341\n0.809813\n\n\n2022\n..\n..\n..\n..\n..\n..\n..\n-0.418256\n33.443871\n7.546529\n...\n14.212437\n62.612125\n3.566733\n..\n64.90885\n183.682744\n7.039727\n3.557564\n..\n0.739894\n\n\n\n\n50 rows × 33 columns\n\n\n\n\nvalue_to_replace = \"..\"\nfor col in df.columns:\n    df[col] = df[col].replace(value_to_replace, np.nan)\n\nmissing= df.isnull().sum()\n\n\nmissing_vals = pd.DataFrame({'Missing Values': missing.index, 'Missing Values Sum': missing.values})\nmissing_vals = missing_vals.sort_values(by='Missing Values Sum', ascending=False)\n\nprint(missing_vals)\n\n                   Missing Values  Missing Values Sum\n10       final_consump_exp_growth                  22\n26                      inflation                  22\n5                    curr_acc_bal                   2\n1                       adj_NNI_c                   2\n6                      ex_imp_gdp                   2\n0                       adj_NNI_g                   2\n4                     adj_NNS_GNI                   2\n3             adj_savings_edu_GNI                   2\n2         adj_savings_fix_cap_GNI                   2\n31              interest_payments                   1\n30                    expense_gdp                   0\n29                 life_exp_birth                   0\n20  imports_goods_services_growth                   0\n28          lending_interest_rate                   0\n27             real_interest_rate                   0\n25                            cpi                   0\n24                      trade_gdp                   0\n23   short_term_debt_tot_reserves                   0\n22                services_growth                   0\n21                   services_gdp                   0\n16                     gni_growth                   0\n19     imports_goods_services_gdp                   0\n18                  goods_imp_bop                   0\n17                  goods_exp_bop                   0\n15     gener_govt_fin_consump_exp                   0\n14          gdp_per_capita_growth                   0\n13                     gdp_growth                   0\n12               fdi_net_outflows                   0\n11                fdi_net_inflows                   0\n9           final_consump_exp_gdp                   0\n8                  ex_debt_shocks                   0\n7                   ex_imp_growth                   0\n32           military expenditure                   0\n\n\n\nfor cols in df.columns:\n    mean = df[cols].mean()\n    df[cols] = df[cols].fillna(mean)\n\n\nprint(df.isnull().sum())\n\nadj_NNI_g                        0\nadj_NNI_c                        0\nadj_savings_fix_cap_GNI          0\nadj_savings_edu_GNI              0\nadj_NNS_GNI                      0\ncurr_acc_bal                     0\nex_imp_gdp                       0\nex_imp_growth                    0\nex_debt_shocks                   0\nfinal_consump_exp_gdp            0\nfinal_consump_exp_growth         0\nfdi_net_inflows                  0\nfdi_net_outflows                 0\ngdp_growth                       0\ngdp_per_capita_growth            0\ngener_govt_fin_consump_exp       0\ngni_growth                       0\ngoods_exp_bop                    0\ngoods_imp_bop                    0\nimports_goods_services_gdp       0\nimports_goods_services_growth    0\nservices_gdp                     0\nservices_growth                  0\nshort_term_debt_tot_reserves     0\ntrade_gdp                        0\ncpi                              0\ninflation                        0\nreal_interest_rate               0\nlending_interest_rate            0\nlife_exp_birth                   0\nexpense_gdp                      0\ninterest_payments                0\nmilitary expenditure             0\ndtype: int64\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50 entries, 1973 to 2022\nData columns (total 33 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   adj_NNI_g                      50 non-null     float64\n 1   adj_NNI_c                      50 non-null     float64\n 2   adj_savings_fix_cap_GNI        50 non-null     float64\n 3   adj_savings_edu_GNI            50 non-null     float64\n 4   adj_NNS_GNI                    50 non-null     float64\n 5   curr_acc_bal                   50 non-null     float64\n 6   ex_imp_gdp                     50 non-null     float64\n 7   ex_imp_growth                  50 non-null     float64\n 8   ex_debt_shocks                 50 non-null     float64\n 9   final_consump_exp_gdp          50 non-null     float64\n 10  final_consump_exp_growth       50 non-null     float64\n 11  fdi_net_inflows                50 non-null     float64\n 12  fdi_net_outflows               50 non-null     float64\n 13  gdp_growth                     50 non-null     float64\n 14  gdp_per_capita_growth          50 non-null     float64\n 15  gener_govt_fin_consump_exp     50 non-null     float64\n 16  gni_growth                     50 non-null     float64\n 17  goods_exp_bop                  50 non-null     float64\n 18  goods_imp_bop                  50 non-null     float64\n 19  imports_goods_services_gdp     50 non-null     float64\n 20  imports_goods_services_growth  50 non-null     float64\n 21  services_gdp                   50 non-null     float64\n 22  services_growth                50 non-null     float64\n 23  short_term_debt_tot_reserves   50 non-null     float64\n 24  trade_gdp                      50 non-null     float64\n 25  cpi                            50 non-null     float64\n 26  inflation                      50 non-null     float64\n 27  real_interest_rate             50 non-null     float64\n 28  lending_interest_rate          50 non-null     float64\n 29  life_exp_birth                 50 non-null     float64\n 30  expense_gdp                    50 non-null     float64\n 31  interest_payments              50 non-null     float64\n 32  military expenditure           50 non-null     float64\ndtypes: float64(33)\nmemory usage: 13.0 KB\n\n\n\ndf['year'] = df.index\n\n\ndf[\"gdp_growth\"].min()\n\n-0.7686507292835802\n\n\n\ndf[\"gdp_growth\"].max()\n\n9.703406184741754\n\n\n\nbins = [0, 2, 5, 7, float('inf')]\n\n\nlabels = ['Low Growth', 'Moderate Growth', 'High Growth', 'Very High Growth']\n\n\ndf['labels'] = pd.cut(df['gdp_growth'], bins=bins, labels=labels)\n\n\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear\nlabels\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1973\n13.995649\n8.356649e+10\n10.797713\n12.087193\n5.039765\n30.780949\n18.693756\n-0.776829\n21.686956\n-5.181406\n...\n5.771584\n119.946081\n41.151497\n2.896167\n9.433987\n-7.792579\n56.722000\n2.646910\n1973\nLow Growth\n\n\n1974\n6.064966\n8.863476e+10\n3.127517\n12.005429\n5.039765\n33.044850\n21.039421\n-3.473635\n24.154607\n-4.891985\n...\n6.939034\n119.946081\n48.796359\n3.235717\n11.724126\n-4.050720\n57.117000\n3.085199\n1974\nLow Growth\n\n\n1975\n-5.909503\n8.339689e+10\n-8.467988\n13.771913\n5.039765\n27.352749\n13.580836\n-5.586817\n23.844942\n-1.159137\n...\n5.033585\n119.946081\n49.814056\n3.670142\n13.425942\n0.763318\n57.512000\n3.874955\n1975\nLow Growth\n\n\n1976\n-1.689113\n8.198822e+10\n-4.296609\n15.281072\n5.039765\n26.416145\n11.135073\n-4.647458\n23.913590\n4.299431\n...\n2.866089\n119.946081\n48.880753\n4.074606\n11.020391\n1.775301\n58.006000\n4.727991\n1976\nLow Growth\n\n\n1977\n-0.354590\n8.169750e+10\n-2.990586\n15.936839\n5.039765\n26.913529\n10.976690\n0.527704\n26.283743\n4.602098\n...\n-0.231938\n119.946081\n48.211386\n4.529005\n11.151964\n2.034816\n58.492000\n5.263335\n1977\nNaN\n\n\n1978\n4.950963\n8.574231e+10\n2.158098\n16.373562\n5.039765\n27.967647\n11.594085\n2.130315\n28.424993\n3.296801\n...\n2.178188\n119.946081\n50.951511\n5.033337\n11.135608\n1.451656\n58.979000\n4.562199\n1978\nNaN\n\n\n1979\n3.350908\n8.861546e+10\n0.636966\n16.277909\n5.039765\n29.753630\n13.475721\n4.703533\n31.243406\n1.840777\n...\n3.000187\n119.946081\n54.107008\n5.702452\n13.293659\n-3.476381\n59.395000\n3.863074\n1979\nNaN\n\n\n1980\n9.904481\n9.739236e+10\n7.045164\n14.573300\n5.039765\n33.709562\n19.136262\n3.535761\n31.870988\n-0.003044\n...\n6.429982\n119.946081\n56.507317\n6.481420\n13.660241\n-11.009011\n59.813000\n3.304634\n1980\nNaN\n\n\n1981\n0.585617\n9.796271e+10\n-1.972934\n15.190753\n5.039765\n29.115968\n13.925215\n-5.344950\n25.203391\n-5.353109\n...\n5.234413\n119.946081\n52.192956\n7.470112\n15.254244\n2.328029\n60.364000\n3.638129\n1981\nLow Growth\n\n\n1982\n0.038075\n9.800001e+10\n-2.508976\n16.481704\n5.039765\n25.419758\n8.938054\n-4.104354\n23.387581\n-2.644860\n...\n1.290263\n119.946081\n47.141816\n8.563664\n14.639032\n4.172434\n60.933000\n3.614093\n1982\nLow Growth\n\n\n1983\n1.712912\n9.967866e+10\n-0.977156\n17.005809\n5.039765\n24.428793\n7.422984\n-0.335977\n21.767851\n-1.328627\n...\n2.235726\n119.946081\n40.256202\n9.617269\n12.303207\n-0.343775\n61.465000\n3.604648\n1983\nLow Growth\n\n\n1984\n8.936334\n1.085863e+11\n5.934250\n16.480074\n5.039765\n22.984494\n6.504420\n-2.299721\n22.498742\n2.666252\n...\n5.845233\n119.946081\n43.392941\n10.725802\n11.526481\n10.060939\n61.907000\n3.695607\n1984\nLow Growth\n\n\n1985\n-6.105116\n1.019570e+11\n-8.844539\n17.461468\n5.039765\n23.313754\n5.852287\n3.508188\n27.902881\n10.077095\n...\n-0.198333\n119.946081\n47.948266\n12.473489\n16.294227\n4.611218\n62.380000\n3.698334\n1985\nNaN\n\n\n1986\n-1.685451\n1.002385e+11\n-4.856264\n18.693445\n5.039765\n22.125466\n3.432020\n3.770653\n27.247670\n-3.690397\n...\n0.728637\n119.946081\n46.648928\n14.800408\n18.654919\n-1.991767\n62.912000\n3.820576\n1986\nNaN\n\n\n1987\n6.585130\n1.068394e+11\n2.921570\n17.949240\n4.700000\n20.332610\n2.383370\n5.287891\n26.891376\n4.649094\n...\n3.372391\n119.946081\n44.971254\n17.192240\n16.160581\n-2.044467\n63.041000\n4.192170\n1987\nNaN\n\n\n1988\n3.790607\n1.108892e+11\n0.253041\n17.286543\n4.800000\n20.282153\n2.995610\n2.436714\n25.802494\n8.169842\n...\n3.170485\n119.946081\n45.851312\n19.389330\n12.779545\n-0.075809\n63.345000\n4.623759\n1988\nLow Growth\n\n\n1989\n3.229359\n1.144702e+11\n-0.173911\n17.105508\n4.600000\n21.029295\n3.923787\n1.386317\n23.706840\n2.181119\n...\n2.005661\n119.946081\n42.699765\n22.245556\n14.730918\n2.350216\n63.310000\n4.351925\n1989\nNaN\n\n\n1990\n-0.065266\n1.143955e+11\n-3.094781\n16.835831\n4.800000\n16.739202\n-0.053649\n1.230935\n21.538542\n-0.433826\n...\n0.632538\n119.946081\n38.211801\n25.431333\n14.320956\n4.811415\n63.375000\n3.894626\n1990\nNaN\n\n\n1991\n2.902865\n1.177163e+11\n0.303593\n15.759493\n5.300000\n16.916625\n1.120106\n1.034824\n19.340815\n-1.545420\n...\n0.198092\n119.946081\n34.881609\n29.331177\n15.334802\n4.027493\n63.265000\n3.222634\n1991\nLow Growth\n\n\n1992\n2.130873\n1.202247e+11\n0.052596\n15.146385\n6.434156\n16.311955\n1.116088\n1.347454\n18.955147\n5.490871\n...\n-0.142922\n119.946081\n34.321353\n33.400784\n13.874680\n3.654137\n63.341000\n2.817651\n1992\nLow Growth\n\n\n1993\n15.909859\n1.393522e+11\n13.825588\n14.180094\n5.700000\n16.109559\n1.877716\n1.904381\n19.914367\n10.379044\n...\n0.714966\n119.946081\n35.698124\n36.646495\n9.717467\n2.464688\n63.045000\n2.495524\n1993\nLow Growth\n\n\n1994\n2.036045\n1.421895e+11\n0.284957\n13.890465\n5.500000\n15.617718\n1.736657\n0.019295\n19.549338\n2.485785\n...\n3.362282\n234.880388\n37.114609\n39.922151\n8.938525\n5.255470\n62.612000\n2.561966\n1994\nLow Growth\n\n\n1995\n5.301757\n1.497280e+11\n3.582636\n13.851290\n6.409120\n17.007621\n3.142290\n-1.451792\n20.037861\n10.937404\n...\n4.739318\n216.710587\n39.478034\n43.387571\n8.680444\n6.367395\n62.262000\n2.117864\n1995\nLow Growth\n\n\n1996\n3.860539\n1.555084e+11\n2.289620\n13.535527\n5.500000\n15.972151\n2.449067\n-1.028083\n21.774743\n7.203829\n...\n4.199385\n462.705392\n42.199252\n46.578342\n7.354113\n10.644809\n61.459000\n1.755879\n1996\nLow Growth\n\n\n1997\n3.246827\n1.605574e+11\n1.825415\n13.471937\n6.600000\n15.161127\n1.666842\n-1.318134\n21.660592\n5.295733\n...\n2.271625\n183.438407\n42.301334\n50.583046\n8.597783\n10.969899\n60.805000\n1.582134\n1997\nModerate Growth\n\n\n1998\n0.855452\n1.619309e+11\n-0.391969\n13.805377\n6.086164\n15.082602\n1.259044\n-1.437497\n22.519272\n3.246208\n...\n2.966687\n207.768508\n44.035745\n54.063436\n6.880546\n12.691034\n60.001000\n1.383167\n1998\nLow Growth\n\n\n1999\n0.901185\n1.633902e+11\n-0.214176\n14.157604\n5.900000\n14.725291\n0.598359\n-0.445657\n22.269216\n1.261048\n...\n4.362736\n144.263852\n42.258296\n56.864730\n5.181493\n10.395067\n59.241000\n1.272053\n1999\nLow Growth\n\n\n2000\n5.707815\n1.727162e+11\n4.694876\n13.705328\n5.250000\n15.429813\n1.680970\n-0.125570\n24.404303\n8.313563\n...\n4.570342\n124.031734\n46.220722\n59.900710\n5.338951\n4.870582\n58.470000\n1.387289\n2000\nLow Growth\n\n\n2001\n2.088959\n1.763242e+11\n1.188790\n13.694252\n5.130000\n15.178752\n1.449107\n0.253001\n26.356661\n2.392881\n...\n3.799326\n109.547092\n49.170945\n63.316188\n5.701900\n5.538341\n57.261000\n1.483161\n2001\nHigh Growth\n\n\n2002\n7.256405\n1.891190e+11\n6.284692\n13.488887\n5.130000\n18.342603\n4.897235\n0.781937\n28.431167\n0.989283\n...\n4.075018\n103.034689\n53.465502\n69.327877\n9.494711\n2.854186\n55.666000\n1.529310\n2002\nLow Growth\n\n\n2003\n5.884859\n2.002484e+11\n4.910769\n13.216913\n4.880000\n18.826055\n5.649422\n-0.782450\n23.915273\n0.109275\n...\n4.501423\n137.293080\n45.723863\n73.265297\n5.679418\n8.047848\n54.331000\n1.468811\n2003\nLow Growth\n\n\n2004\n4.195651\n2.086501e+11\n3.225662\n12.473695\n4.990000\n17.272347\n4.832735\n-2.507261\n22.757519\n2.833729\n...\n4.445779\n91.003816\n45.643575\n72.758279\n-0.692030\n4.950384\n54.043000\n1.355729\n2004\nLow Growth\n\n\n2005\n7.144347\n2.235568e+11\n6.136502\n12.241966\n4.980000\n18.006126\n5.759526\n-2.774776\n23.599764\n8.567217\n...\n5.269852\n85.151664\n47.427781\n74.259170\n2.062846\n4.761489\n53.980000\n1.234811\n2005\nModerate Growth\n\n\n2006\n6.492212\n2.380706e+11\n5.470988\n12.525297\n5.000000\n18.417908\n5.875694\n-4.000124\n26.098250\n7.462760\n...\n6.309736\n95.325501\n53.768141\n76.668069\n3.243908\n4.810302\n54.278000\n1.153872\n2006\nLow Growth\n\n\n2007\n3.218811\n2.457336e+11\n2.177586\n12.887009\n4.870000\n17.520851\n4.650531\n-4.861892\n27.958964\n7.828316\n...\n6.103009\n88.771353\n57.125139\n81.404474\n6.177807\n4.546046\n54.992000\n1.058839\n2007\nLow Growth\n\n\n2008\n-3.238127\n2.377765e+11\n-4.328330\n13.665902\n4.870000\n16.798836\n3.143315\n-5.186181\n32.254674\n1.549832\n...\n4.023023\n92.170994\n65.974524\n89.605630\n10.074576\n6.745152\n56.022000\n1.039513\n2008\nModerate Growth\n\n\n2009\n4.779639\n2.491413e+11\n3.540881\n14.032971\n5.210000\n17.733852\n3.707778\n-2.384582\n24.982746\n-17.023821\n...\n0.261796\n73.692048\n49.587535\n96.070957\n7.215314\n2.802509\n57.447000\n1.089505\n2009\nModerate Growth\n\n\n2010\n3.528417\n2.579321e+11\n2.300624\n13.445572\n5.550000\n17.483021\n4.047440\n-1.299018\n25.783418\n7.718008\n...\n1.745262\n73.193365\n50.406087\n100.000000\n4.089730\n3.490960\n58.899000\n1.003481\n2010\nLow Growth\n\n\n2011\n2.649587\n2.647662e+11\n1.360864\n13.212434\n5.890000\n16.487799\n3.293132\n-2.019676\n27.698148\n3.008443\n...\n3.699629\n60.145736\n54.636350\n104.999267\n4.999267\n3.279301\n60.651000\n1.002653\n2011\nLow Growth\n\n\n2012\n1.823358\n2.695938e+11\n0.478918\n13.449744\n6.250000\n13.844242\n0.378718\n-4.683736\n27.139149\n1.112331\n...\n2.870055\n71.973531\n55.582617\n111.010116\n5.724658\n3.882873\n61.846000\n1.033523\n2012\nLow Growth\n\n\n2013\n1.426967\n2.734409e+11\n0.055276\n13.992788\n5.932454\n14.180657\n0.194930\n-5.338373\n28.379280\n3.732974\n...\n2.671074\n72.909537\n58.875028\n117.431462\n5.784469\n2.509245\n62.533000\n1.027794\n2013\nModerate Growth\n\n\n2014\n1.673637\n2.780173e+11\n0.083527\n14.138435\n5.970000\n14.029707\n-0.118337\n-4.812433\n29.000619\n3.646286\n...\n2.039776\n86.416215\n59.499574\n124.629820\n6.129838\n3.567028\n63.380000\n1.021894\n2014\nLow Growth\n\n\n2015\n3.396159\n2.874592e+11\n1.273791\n14.164393\n5.635345\n14.624014\n0.449553\n-4.310287\n27.713638\n3.059774\n...\n1.565569\n80.685046\n56.726676\n130.288814\n4.540642\n3.667743\n63.950000\n1.006929\n2015\nLow Growth\n\n\n2016\n-0.410249\n2.862799e+11\n-1.373576\n14.581704\n5.300690\n14.663644\n0.095630\n-2.633615\n28.156088\n0.407509\n...\n1.593865\n78.846756\n55.861258\n138.850608\n6.571396\n3.278252\n64.747000\n0.971047\n2016\nLow Growth\n\n\n2017\n2.744982\n2.941382e+11\n2.347842\n14.096680\n5.464473\n14.649881\n0.548186\n-2.374368\n27.340076\n-0.273236\n...\n1.149170\n80.606604\n53.535932\n146.048966\n5.184247\n4.647315\n65.402000\n0.943568\n2017\nLow Growth\n\n\n2018\n1.084757\n2.973289e+11\n-0.146507\n14.267286\n5.514553\n13.954344\n-0.328763\n-3.008700\n27.562640\n2.741158\n...\n1.981519\n92.692307\n54.627712\n152.646240\n4.517165\n6.108760\n65.674000\n0.897196\n2018\nLow Growth\n\n\n2019\n0.621565\n2.991770e+11\n-0.673157\n14.415053\n5.820015\n13.810482\n-0.595410\n-2.625377\n27.297471\n-3.445217\n...\n1.108507\n80.819685\n54.054766\n158.935640\n4.120246\n5.243711\n66.175000\n0.884245\n2019\nLow Growth\n\n\n2020\n-5.191452\n2.836454e+11\n-6.344067\n15.342080\n5.820015\n14.898851\n-0.451413\n1.984891\n27.600303\n-11.862908\n...\n-4.398186\n67.402320\n50.800982\n164.037531\n3.210036\n1.907151\n65.252000\n0.957517\n2020\nLow Growth\n\n\n2021\n2.944993\n1.726618e+11\n1.019058\n14.617378\n5.340494\n19.599354\n4.980877\n3.699256\n31.193814\n9.986850\n...\n4.088044\n63.010063\n56.217980\n171.602404\n4.611672\n0.774484\n62.341000\n0.809813\n2021\nVery High Growth\n\n\n2022\n2.944993\n1.726618e+11\n1.019058\n14.617378\n5.340494\n19.599354\n4.980877\n-0.418256\n33.443871\n7.546529\n...\n3.566733\n119.946081\n64.908850\n183.682744\n7.039727\n3.557564\n60.457939\n0.739894\n2022\nModerate Growth\n\n\n\n\n50 rows × 35 columns\n\n\n\n\ncsv_file='../data/southafrica.csv'\n\n\ndf.to_csv(csv_file, index=True)"
  },
  {
    "objectID": "codes/countries_code/russia.html",
    "href": "codes/countries_code/russia.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n#pip install xlrd\ndf=pd.read_excel('../data/russia.xlsx')\ndf\n\n\n\n\n\n\n\n\nSeries Name\nSeries Code\nCountry Name\nCountry Code\n1994 [YR1994]\n1995 [YR1995]\n1996 [YR1996]\n1997 [YR1997]\n1998 [YR1998]\n1999 [YR1999]\n...\n2013 [YR2013]\n2014 [YR2014]\n2015 [YR2015]\n2016 [YR2016]\n2017 [YR2017]\n2018 [YR2018]\n2019 [YR2019]\n2020 [YR2020]\n2021 [YR2021]\n2022 [YR2022]\n\n\n\n\n0\nAdjusted net national income (annual % growth)\nNY.ADJ.NNTY.KD.ZG\nRussian Federation\nRUS\n-20.796923\n-9.137814\n19.696042\n3.955874e+00\n-6.462213e+00\n2.056573e+01\n...\n-4.581199e-01\n-3.630254e-01\n-5.330003e+00\n-4.277237e+00\n3.160377e+00\n5.798398e+00\n-1.349856e+00\n-1.690429e+00\n..\n..\n\n\n1\nAdjusted net national income (constant 2015 US$)\nNY.ADJ.NNTY.KD\nRussian Federation\nRUS\n361146926879.664185\n328145992820.509216\n392777764330.353088\n4.083156e+11\n3.819293e+11\n4.604759e+11\n...\n1.152175e+12\n1.147992e+12\n1.086804e+12\n1.040319e+12\n1.073197e+12\n1.135425e+12\n1.120099e+12\n1.101164e+12\n..\n..\n\n\n2\nAdjusted net national income per capita (annua...\nNY.ADJ.NNTY.PC.KD.ZG\nRussian Federation\nRUS\n-20.769775\n-9.11814\n19.870261\n4.127896e+00\n-6.307291e+00\n2.093919e+01\n...\n-6.698690e-01\n-2.125109e+00\n-5.533945e+00\n-4.452489e+00\n3.042448e+00\n5.806920e+00\n-1.305548e+00\n-1.485800e+00\n..\n..\n\n\n3\nAdjusted savings: consumption of fixed capital...\nNY.ADJ.DKAP.GN.ZS\nRussian Federation\nRUS\n47.004948\n48.011109\n36.041209\n3.269108e+01\n3.165786e+01\n2.077267e+01\n...\n1.126089e+01\n1.196197e+01\n1.297331e+01\n1.395325e+01\n1.382307e+01\n1.274670e+01\n1.350303e+01\n1.284620e+01\n..\n..\n\n\n4\nAdjusted savings: education expenditure (% of ...\nNY.ADJ.AEDU.GN.ZS\nRussian Federation\nRUS\n3.9\n3.9\n3.544344\n3.544344e+00\n3.544344e+00\n3.545437e+00\n...\n3.580174e+00\n3.754815e+00\n3.637684e+00\n3.651407e+00\n4.413240e+00\n4.413240e+00\n4.413240e+00\n4.413240e+00\n..\n..\n\n\n5\nAdjusted savings: gross savings (% of GNI)\nNY.ADJ.ICTR.GN.ZS\nRussian Federation\nRUS\n29.714409\n28.263631\n27.497401\n2.242674e+01\n2.020255e+01\n2.940409e+01\n...\n2.515561e+01\n2.534878e+01\n2.711747e+01\n2.572871e+01\n2.637322e+01\n2.967240e+01\n2.756324e+01\n2.774907e+01\n..\n..\n\n\n6\nAdjusted savings: net national savings (% of GNI)\nNY.ADJ.NNAT.GN.ZS\nRussian Federation\nRUS\n-17.233955\n-19.694782\n-8.580069\n-1.025090e+01\n-1.144238e+01\n8.661325e+00\n...\n1.394273e+01\n1.341492e+01\n1.409436e+01\n1.177256e+01\n1.258215e+01\n1.688293e+01\n1.410433e+01\n1.487794e+01\n..\n..\n\n\n7\nCurrent account balance (% of GDP)\nBN.CAB.XOKA.GD.ZS\nRussian Federation\nRUS\n2.263327\n1.880458\n2.578983\n-2.062683e-01\n2.622571e-02\n1.166646e+01\n...\n1.458174e+00\n2.792910e+00\n4.970889e+00\n1.916437e+00\n2.044127e+00\n6.979899e+00\n3.876125e+00\n2.369115e+00\n6.647848\n10.537169\n\n\n8\nExports of goods and services (% of GDP)\nNE.EXP.GNFS.ZS\nRussian Federation\nRUS\n27.758379\n29.289011\n26.072988\n2.472984e+01\n3.122121e+01\n4.321997e+01\n...\n2.584534e+01\n2.711110e+01\n2.870339e+01\n2.585448e+01\n2.609088e+01\n3.079326e+01\n2.843343e+01\n2.552219e+01\n29.894896\n28.188903\n\n\n9\nExports of goods and services (annual % growth)\nNE.EXP.GNFS.KD.ZG\nRussian Federation\nRUS\n12.570762\n11.537544\n3.61451\n-5.001552e-01\n1.899743e+00\n1.119956e+01\n...\n4.561728e+00\n5.104320e-01\n3.673262e+00\n3.168855e+00\n5.013643e+00\n5.554217e+00\n7.325446e-01\n-4.170377e+00\n3.280495\n-13.886778\n\n\n10\nExternal debt stocks (% of GNI)\nDT.DOD.DECT.GN.ZS\nRussian Federation\nRUS\n31.117487\n31.128338\n32.883424\n3.234018e+01\n6.780188e+01\n9.567027e+01\n...\n3.021025e+01\n2.784218e+01\n3.712598e+01\n4.311845e+01\n3.388727e+01\n2.954878e+01\n2.962889e+01\n3.171599e+01\n27.786971\n..\n\n\n11\nFinal consumption expenditure (% of GDP)\nNE.CON.TOTL.ZS\nRussian Federation\nRUS\n69.899501\n71.164457\n71.515193\n7.582025e+01\n7.620104e+01\n6.812235e+01\n...\n7.184092e+01\n7.179033e+01\n7.044522e+01\n7.171373e+01\n7.108801e+01\n6.807630e+01\n6.970038e+01\n7.146671e+01\n66.553162\n65.967131\n\n\n12\nFinal consumption expenditure (annual % growth)\nNE.CON.TOTL.KD.ZG\nRussian Federation\nRUS\n0.218576\n-2.405731\n-1.957162\n2.800168e+00\n-2.099959e+00\n-1.199965e+00\n...\n3.784855e+00\n8.873237e-01\n-7.968515e+00\n-1.532380e+00\n3.400083e+00\n3.464695e+00\n3.389621e+00\n-3.932425e+00\n8.088099\n-0.356868\n\n\n13\nForeign direct investment, net inflows (% of GDP)\nBX.KLT.DINV.WD.GD.ZS\nRussian Federation\nRUS\n0.174541\n0.522257\n0.658454\n1.201359e+00\n1.019119e+00\n1.662283e+00\n...\n3.019402e+00\n1.069876e+00\n5.026080e-01\n2.548500e+00\n1.814093e+00\n5.300608e-01\n1.888517e+00\n6.348512e-01\n2.202089\n-1.787319\n\n\n14\nForeign direct investment, net outflows (% of ...\nBM.KLT.DINV.WD.GD.ZS\nRussian Federation\nRUS\n0.078709\n0.153154\n0.235581\n7.862885e-01\n4.464755e-01\n1.120490e+00\n...\n3.773507e+00\n2.772000e+00\n1.619755e+00\n1.747695e+00\n2.334967e+00\n1.893220e+00\n1.294841e+00\n3.916077e-01\n3.586643\n-0.585423\n\n\n15\nGDP growth (annual %)\nNY.GDP.MKTP.KD.ZG\nRussian Federation\nRUS\n-12.569756\n-4.143528\n-3.755069\n1.399916e+00\n-5.299962e+00\n6.399915e+00\n...\n1.755422e+00\n7.362672e-01\n-1.972719e+00\n1.936901e-01\n1.825790e+00\n2.807245e+00\n2.198076e+00\n-2.653655e+00\n5.61429\n-2.069712\n\n\n16\nGDP per capita growth (annual %)\nNY.GDP.PCAP.KD.ZG\nRussian Federation\nRUS\n-12.53979\n-4.122772\n-3.614975\n1.567704e+00\n-5.143115e+00\n6.729503e+00\n...\n1.538974e+00\n-1.045262e+00\n-2.183885e+00\n1.024792e-02\n1.709386e+00\n2.815524e+00\n2.243980e+00\n-2.451027e+00\n6.045474\n-2.162418\n\n\n17\nGeneral government final consumption expenditu...\nNE.CON.GOVT.ZS\nRussian Federation\nRUS\n19.099468\n19.075659\n19.49373\n2.106711e+01\n1.873272e+01\n1.457943e+01\n...\n1.867530e+01\n1.802733e+01\n1.776539e+01\n1.846592e+01\n1.821681e+01\n1.771038e+01\n1.810137e+01\n1.997100e+01\n17.329391\n17.666285\n\n\n18\nGeneral government final consumption expenditu...\nNE.CON.GOVT.KD.ZG\nRussian Federation\nRUS\n-2.9\n-1.1\n-1.552252\n-2.400067e+00\n1.000148e+00\n3.100297e+00\n...\n5.310803e-02\n-2.480879e+00\n-3.609092e+00\n1.448922e+00\n2.528179e+00\n1.279497e+00\n2.369754e+00\n1.948304e+00\n2.896591\n2.814861\n\n\n19\nGNI growth (annual %)\nNY.GNP.MKTP.KD.ZG\nRussian Federation\nRUS\n-12.046343\n-4.495731\n-4.283494\n6.988281e-01\n-7.230456e+00\n6.783083e+00\n...\n1.339283e+00\n9.661888e-01\n-1.207827e+00\n2.948108e-01\n1.872824e+00\n2.939217e+00\n1.443640e+00\n-1.686264e+00\n5.369812\n-1.684503\n\n\n20\nGoods exports (BoP, current US$)\nBX.GSR.MRCH.CD\nRussian Federation\nRUS\n66127690000\n81175810000\n88500570000\n8.594519e+10\n7.374220e+10\n6.965695e+10\n...\n5.218355e+11\n4.968061e+11\n3.414190e+11\n2.817090e+11\n3.529414e+11\n4.439147e+11\n4.197214e+11\n3.335296e+11\n494349980000\n590834750000\n\n\n21\nGoods imports (BoP, current US$)\nBM.GSR.MRCH.CD\nRussian Federation\nRUS\n48102720000\n60885170000\n67652640000\n7.178798e+10\n5.753937e+10\n3.726237e+10\n...\n3.412692e+11\n3.078754e+11\n1.930211e+11\n1.914943e+11\n2.383839e+11\n2.488569e+11\n2.538767e+11\n2.400886e+11\n304012570000\n276711170000\n\n\n22\nImports of goods and services (% of GDP)\nNE.IMP.GNFS.ZS\nRussian Federation\nRUS\n23.195334\n25.893894\n21.849513\n2.252708e+01\n2.455105e+01\n2.617331e+01\n...\n2.044181e+01\n2.069024e+01\n2.065596e+01\n2.066364e+01\n2.078564e+01\n2.078764e+01\n2.079532e+01\n2.044472e+01\n20.662848\n15.585211\n\n\n23\nImports of goods and services (annual % growth)\nNE.IMP.GNFS.KD.ZG\nRussian Federation\nRUS\n4.217865\n21.157115\n0.228411\n4.006717e-01\n-1.740023e+01\n-1.700012e+01\n...\n3.539025e+00\n-7.260442e+00\n-2.503877e+01\n-3.672043e+00\n1.731519e+01\n2.656748e+00\n3.130358e+00\n-1.188112e+01\n19.111346\n-14.99001\n\n\n24\nServices, value added (% of GDP)\nNV.SRV.TOTL.ZS\nRussian Federation\nRUS\n44.832608\n52.228803\n49.416655\n5.059522e+01\n5.182492e+01\n4.988977e+01\n...\n5.612160e+01\n5.568483e+01\n5.614249e+01\n5.701233e+01\n5.603277e+01\n5.342881e+01\n5.417294e+01\n5.637294e+01\n54.099641\n53.976252\n\n\n25\nServices, value added (annual % growth)\nNV.SRV.TOTL.KD.ZG\nRussian Federation\nRUS\n-2.484876\n-10.125699\n-0.636282\n1.616568e+00\n-3.571718e+00\n2.248703e+00\n...\n2.277415e+00\n1.493099e+00\n-2.052879e+00\n-4.211674e-01\n1.888011e+00\n2.806935e+00\n2.447491e+00\n-2.159233e+00\n7.030021\n-2.328812\n\n\n26\nShort-term debt (% of total reserves)\nDT.DOD.DSTC.IR.ZS\nRussian Federation\nRUS\n136.909949\n57.481863\n74.586825\n3.444523e+01\n1.243782e+02\n1.267756e+02\n...\n1.648054e+01\n1.631547e+01\n1.320145e+01\n1.353924e+01\n1.293137e+01\n1.156547e+01\n1.230341e+01\n1.036480e+01\n13.636871\n..\n\n\n27\nTrade (% of GDP)\nNE.TRD.GNFS.ZS\nRussian Federation\nRUS\n50.953713\n55.182905\n47.922501\n4.725692e+01\n5.577225e+01\n6.939328e+01\n...\n4.628715e+01\n4.780134e+01\n4.935935e+01\n4.651812e+01\n4.687652e+01\n5.158090e+01\n4.922875e+01\n4.596691e+01\n50.557744\n43.774114\n\n\n28\nConsumer price index (2010 = 100)\nFP.CPI.TOTL\nRussian Federation\nRUS\n2.128943\n6.331779\n9.355331\n1.073630e+01\n1.370872e+01\n2.546347e+01\n...\n1.216390e+02\n1.311553e+02\n1.515295e+02\n1.622008e+02\n1.681752e+02\n1.730158e+02\n1.807503e+02\n1.868626e+02\n199.372063\n..\n\n\n29\nInflation, consumer prices (annual %)\nFP.CPI.TOTL.ZG\nRussian Federation\nRUS\n307.722636\n197.414268\n47.752012\n1.476133e+01\n2.768568e+01\n8.574649e+01\n...\n6.753710e+00\n7.823412e+00\n1.553441e+01\n7.042448e+00\n3.683329e+00\n2.878297e+00\n4.470367e+00\n3.381659e+00\n6.694459\n..\n\n\n30\nReal interest rate (%)\nFR.INR.RINR\nRussian Federation\nRUS\n..\n..\n..\n1.476046e+01\n1.961608e+01\n-1.895155e+01\n...\n3.937070e+00\n3.397147e+00\n7.894594e+00\n9.484354e+00\n4.945604e+00\n-1.028483e+00\n5.316709e+00\n5.825262e+00\n-9.924685\n-3.752475\n\n\n31\nLife expectancy at birth, total (years)\nSP.DYN.LE00.IN\nRussian Federation\nRUS\n64.467073\n64.690732\n65.854146\n6.669878e+01\n6.702976e+01\n6.598220e+01\n...\n7.057878e+01\n7.074366e+01\n7.118341e+01\n7.165122e+01\n7.245146e+01\n7.266220e+01\n7.308390e+01\n7.133878e+01\n69.36122\n..\n\n\n32\nMilitary expenditure (% of GDP)\nMS.MIL.XPND.GD.ZS\nRussian Federation\nRUS\n4.523701\n3.78443\n3.756559\n4.039809e+00\n2.732649e+00\n3.073288e+00\n...\n3.854043e+00\n4.112993e+00\n4.871515e+00\n5.425148e+00\n4.248996e+00\n3.719822e+00\n3.860338e+00\n4.171479e+00\n3.720451\n4.056316\n\n\n\n\n33 rows × 33 columns\n\n\n\n\ndf = df.T\ndf.columns = df.iloc[0]\ndf.head(5)\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annual % growth)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annua...\nAdjusted savings: consumption of fixed capital...\nAdjusted savings: education expenditure (% of ...\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\nSeries Code\nNY.ADJ.NNTY.KD.ZG\nNY.ADJ.NNTY.KD\nNY.ADJ.NNTY.PC.KD.ZG\nNY.ADJ.DKAP.GN.ZS\nNY.ADJ.AEDU.GN.ZS\nNY.ADJ.ICTR.GN.ZS\nNY.ADJ.NNAT.GN.ZS\nBN.CAB.XOKA.GD.ZS\nNE.EXP.GNFS.ZS\nNE.EXP.GNFS.KD.ZG\n...\nNE.IMP.GNFS.KD.ZG\nNV.SRV.TOTL.ZS\nNV.SRV.TOTL.KD.ZG\nDT.DOD.DSTC.IR.ZS\nNE.TRD.GNFS.ZS\nFP.CPI.TOTL\nFP.CPI.TOTL.ZG\nFR.INR.RINR\nSP.DYN.LE00.IN\nMS.MIL.XPND.GD.ZS\n\n\nCountry Name\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\n...\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\nRussian Federation\n\n\nCountry Code\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\n...\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\nRUS\n\n\n1994 [YR1994]\n-20.796923\n361146926879.664185\n-20.769775\n47.004948\n3.9\n29.714409\n-17.233955\n2.263327\n27.758379\n12.570762\n...\n4.217865\n44.832608\n-2.484876\n136.909949\n50.953713\n2.128943\n307.722636\n..\n64.467073\n4.523701\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[4:]\ndf\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted net national income per capita (annual % growth)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: gross savings (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\n...\nImports of goods and services (annual % growth)\nServices, value added (% of GDP)\nServices, value added (annual % growth)\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLife expectancy at birth, total (years)\nMilitary expenditure (% of GDP)\n\n\n\n\n1994 [YR1994]\n-20.796923\n361146926879.664185\n-20.769775\n47.004948\n3.9\n29.714409\n-17.233955\n2.263327\n27.758379\n12.570762\n...\n4.217865\n44.832608\n-2.484876\n136.909949\n50.953713\n2.128943\n307.722636\n..\n64.467073\n4.523701\n\n\n1995 [YR1995]\n-9.137814\n328145992820.509216\n-9.11814\n48.011109\n3.9\n28.263631\n-19.694782\n1.880458\n29.289011\n11.537544\n...\n21.157115\n52.228803\n-10.125699\n57.481863\n55.182905\n6.331779\n197.414268\n..\n64.690732\n3.78443\n\n\n1996 [YR1996]\n19.696042\n392777764330.353088\n19.870261\n36.041209\n3.544344\n27.497401\n-8.580069\n2.578983\n26.072988\n3.61451\n...\n0.228411\n49.416655\n-0.636282\n74.586825\n47.922501\n9.355331\n47.752012\n..\n65.854146\n3.756559\n\n\n1997 [YR1997]\n3.955874\n408315558299.783752\n4.127896\n32.691078\n3.544344\n22.426736\n-10.2509\n-0.206268\n24.729842\n-0.500155\n...\n0.400672\n50.595215\n1.616568\n34.445233\n47.256921\n10.736302\n14.761329\n14.760459\n66.69878\n4.039809\n\n\n1998 [YR1998]\n-6.462213\n381929338622.961914\n-6.307291\n31.657861\n3.544344\n20.202553\n-11.442376\n0.026226\n31.221205\n1.899743\n...\n-17.400232\n51.824919\n-3.571718\n124.378186\n55.772253\n13.708721\n27.68568\n19.616081\n67.029756\n2.732649\n\n\n1999 [YR1999]\n20.565726\n460475878357.992188\n20.939191\n20.772669\n3.545437\n29.404085\n8.661325\n11.666457\n43.219969\n11.199565\n...\n-17.00012\n49.889768\n2.248703\n126.775609\n69.393281\n25.463468\n85.746494\n-18.951553\n65.982195\n3.073288\n\n\n2000 [YR2000]\n22.534768\n564243051244.167847\n23.051254\n16.719621\n3.54653\n37.116967\n20.393479\n17.474242\n44.060441\n9.49948\n...\n32.399401\n49.717709\n7.093714\n56.515933\n68.093907\n30.759554\n20.798761\n-9.633111\n65.483659\n3.30703\n\n\n2001 [YR2001]\n2.625502\n579057265920.327515\n3.061649\n16.356763\n3.547622\n32.968638\n16.651608\n10.454535\n36.893494\n4.200311\n...\n18.69892\n51.465954\n3.568085\n52.259575\n61.110859\n37.365785\n21.477007\n1.226579\n65.383415\n3.546319\n\n\n2002 [YR2002]\n3.702693\n600497977610.976074\n4.180847\n15.779063\n3.548715\n29.333736\n13.544937\n7.952329\n35.212594\n10.300046\n...\n14.600559\n53.843741\n5.539901\n33.767822\n59.645446\n43.265368\n15.788731\n0.032935\n65.12878\n3.756277\n\n\n2003 [YR2003]\n6.894213\n641897587809.689575\n7.38038\n14.849506\n3.549808\n29.158632\n14.407088\n7.697992\n35.249982\n12.599771\n...\n17.30011\n53.817455\n7.547088\n38.844163\n59.128269\n49.176843\n13.663293\n-0.600171\n65.027561\n3.670838\n\n\n2004 [YR2004]\n14.943907\n737822165973.316528\n15.407705\n13.08981\n3.5509\n30.928775\n17.879048\n9.908323\n34.417891\n11.800138\n...\n23.299339\n50.658271\n5.063987\n20.948018\n56.581852\n54.53152\n10.888616\n-7.328986\n65.470976\n3.300354\n\n\n2005 [YR2005]\n10.726779\n816966720368.666382\n11.149953\n12.136276\n3.551993\n31.305699\n19.138891\n11.045417\n35.203066\n6.500035\n...\n16.59975\n48.806044\n8.028047\n14.884707\n56.713248\n61.449009\n12.685304\n-7.20669\n65.529756\n3.331237\n\n\n2006 [YR2006]\n12.254799\n917084348240.58606\n12.622973\n10.396712\n3.553085\n31.579732\n21.237003\n9.325445\n33.730475\n7.300047\n...\n21.299912\n49.721476\n10.884394\n13.365498\n54.733402\n67.390301\n9.668655\n-4.078692\n66.727561\n3.246357\n\n\n2007 [YR2007]\n14.094218\n1046340216350.809937\n14.289582\n9.887135\n3.554178\n31.976111\n22.081369\n5.554576\n30.16406\n6.299816\n...\n26.19992\n50.673048\n13.621542\n20.939431\n51.706123\n73.460347\n9.007299\n-3.344927\n67.586829\n3.118542\n\n\n2008 [YR2008]\n4.929775\n1097922433607.523193\n4.975898\n9.882478\n3.555271\n30.929513\n21.111311\n6.257972\n31.30956\n0.599853\n...\n14.799942\n50.695688\n7.119659\n17.408228\n53.382466\n83.826166\n14.110768\n-4.904962\n67.949268\n3.149486\n\n\n2009 [YR2009]\n-17.557322\n905156654939.064209\n-17.582137\n11.784852\n3.556363\n21.577535\n9.825317\n4.120869\n27.938101\n-4.70015\n...\n-30.400076\n53.766527\n-5.270751\n12.085446\n48.435061\n93.589676\n11.64733\n13.079965\n68.684634\n3.924063\n\n\n2010 [YR2010]\n12.433012\n1017694887643.396118\n12.382547\n10.405966\n3.557456\n27.121498\n16.688629\n4.423337\n29.215561\n7.000254\n...\n25.799719\n53.120212\n3.864897\n12.564856\n50.355505\n100.0\n6.849392\n-2.955084\n68.84122\n3.585086\n\n\n2011 [YR2011]\n9.615786\n1115554254810.950195\n9.530334\n9.545284\n3.558549\n29.632365\n20.002455\n4.754527\n28.055361\n0.300123\n...\n20.300282\n53.797583\n3.752802\n14.049941\n48.035399\n108.440465\n8.440465\n-12.856935\n69.683902\n3.433044\n\n\n2012 [YR2012]\n3.75807\n1157477569120.926025\n3.583592\n10.346181\n3.559641\n28.1053\n17.78466\n3.227931\n26.90732\n1.360422\n...\n9.681344\n54.509647\n4.655029\n15.228588\n47.15139\n113.94354\n5.074743\n0.176417\n70.072195\n3.68924\n\n\n2013 [YR2013]\n-0.45812\n1152174933698.841553\n-0.669869\n11.26089\n3.580174\n25.155606\n13.942729\n1.458174\n25.845337\n4.561728\n...\n3.539025\n56.121605\n2.277415\n16.480539\n46.287149\n121.638956\n6.75371\n3.93707\n70.57878\n3.854043\n\n\n2014 [YR2014]\n-0.363025\n1147992246430.809814\n-2.125109\n11.961967\n3.754815\n25.348779\n13.414918\n2.79291\n27.111097\n0.510432\n...\n-7.260442\n55.684831\n1.493099\n16.315467\n47.801341\n131.155273\n7.823412\n3.397147\n70.743659\n4.112993\n\n\n2015 [YR2015]\n-5.330003\n1086804222628.839966\n-5.533945\n12.973309\n3.637684\n27.117473\n14.09436\n4.970889\n28.703389\n3.673262\n...\n-25.038775\n56.142491\n-2.052879\n13.201448\n49.359349\n151.529464\n15.534405\n7.894594\n71.183415\n4.871515\n\n\n2016 [YR2016]\n-4.277237\n1040319034284.34375\n-4.452489\n13.953251\n3.651407\n25.728709\n11.772555\n1.916437\n25.854483\n3.168855\n...\n-3.672043\n57.012325\n-0.421167\n13.539239\n46.51812\n162.200847\n7.042448\n9.484354\n71.65122\n5.425148\n\n\n2017 [YR2017]\n3.160377\n1073197037207.525391\n3.042448\n13.823074\n4.41324\n26.373222\n12.582155\n2.044127\n26.090881\n5.013643\n...\n17.315193\n56.032768\n1.888011\n12.931374\n46.876524\n168.175239\n3.683329\n4.945604\n72.451463\n4.248996\n\n\n2018 [YR2018]\n5.798398\n1135425268184.233154\n5.80692\n12.7467\n4.41324\n29.672402\n16.88293\n6.979899\n30.793257\n5.554217\n...\n2.656748\n53.428806\n2.806935\n11.565465\n51.5809\n173.015822\n2.878297\n-1.028483\n72.662195\n3.719822\n\n\n2019 [YR2019]\n-1.349856\n1120098665959.168701\n-1.305548\n13.503027\n4.41324\n27.563239\n14.104335\n3.876125\n28.433431\n0.732545\n...\n3.130358\n54.172944\n2.447491\n12.303409\n49.228754\n180.750264\n4.470367\n5.316709\n73.083902\n3.860338\n\n\n2020 [YR2020]\n-1.690429\n1101164197011.907959\n-1.4858\n12.846195\n4.41324\n27.749065\n14.877943\n2.369115\n25.522186\n-4.170377\n...\n-11.881125\n56.372943\n-2.159233\n10.3648\n45.966908\n186.862622\n3.381659\n5.825262\n71.33878\n4.171479\n\n\n2021 [YR2021]\n..\n..\n..\n..\n..\n..\n..\n6.647848\n29.894896\n3.280495\n...\n19.111346\n54.099641\n7.030021\n13.636871\n50.557744\n199.372063\n6.694459\n-9.924685\n69.36122\n3.720451\n\n\n2022 [YR2022]\n..\n..\n..\n..\n..\n..\n..\n10.537169\n28.188903\n-13.886778\n...\n-14.99001\n53.976252\n-2.328812\n..\n43.774114\n..\n..\n-3.752475\n..\n4.056316\n\n\n\n\n29 rows × 33 columns\n\n\n\n\nprint(df.isnull().sum())\n\nSeries Name\nAdjusted net national income (annual % growth)                        0\nAdjusted net national income (constant 2015 US$)                      0\nAdjusted net national income per capita (annual % growth)             0\nAdjusted savings: consumption of fixed capital (% of GNI)             0\nAdjusted savings: education expenditure (% of GNI)                    0\nAdjusted savings: gross savings (% of GNI)                            0\nAdjusted savings: net national savings (% of GNI)                     0\nCurrent account balance (% of GDP)                                    0\nExports of goods and services (% of GDP)                              0\nExports of goods and services (annual % growth)                       0\nExternal debt stocks (% of GNI)                                       0\nFinal consumption expenditure (% of GDP)                              0\nFinal consumption expenditure (annual % growth)                       0\nForeign direct investment, net inflows (% of GDP)                     0\nForeign direct investment, net outflows (% of GDP)                    0\nGDP growth (annual %)                                                 0\nGDP per capita growth (annual %)                                      0\nGeneral government final consumption expenditure (% of GDP)           0\nGeneral government final consumption expenditure (annual % growth)    0\nGNI growth (annual %)                                                 0\nGoods exports (BoP, current US$)                                      0\nGoods imports (BoP, current US$)                                      0\nImports of goods and services (% of GDP)                              0\nImports of goods and services (annual % growth)                       0\nServices, value added (% of GDP)                                      0\nServices, value added (annual % growth)                               0\nShort-term debt (% of total reserves)                                 0\nTrade (% of GDP)                                                      0\nConsumer price index (2010 = 100)                                     0\nInflation, consumer prices (annual %)                                 0\nReal interest rate (%)                                                0\nLife expectancy at birth, total (years)                               0\nMilitary expenditure (% of GDP)                                       0\ndtype: int64\n\n\n\n# creating a new index rather than treating it\nnew_index = range(1994, 2023)\n\n# Reset the index with the new range\ndf = df.reset_index(drop=True)\ndf.index = new_index\ndf.index.name = \"year\"\n\ndf.shape\n\n(29, 33)\n\n\n\ncols= ['adj_NNI_g', 'adj_NNI_c', 'adj_savings_fix_cap_GNI', 'adj_savings_edu_GNI', 'adj_NNS_GNI',\n                    'curr_acc_bal', 'ex_imp_gdp', 'ex_imp_growth', 'ex_debt_shocks', 'final_consump_exp_gdp',\n                    'final_consump_exp_growth', 'fdi_net_inflows', 'fdi_net_outflows', 'gdp_growth', 'gdp_per_capita_growth',\n                    'gener_govt_fin_consump_exp', 'gni_growth', 'goods_exp_bop','goods_imp_bop', 'imports_goods_services_gdp', 'imports_goods_services_growth','services_gdp', 'services_growth', \n                       'short_term_debt_tot_reserves','trade_gdp', 'cpi', 'inflation','real_interest_rate','lending_interest_rate','life_exp_birth','expense_gdp','interest_payments', 'military expenditure']\n\ndf.columns = cols\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\nshort_term_debt_tot_reserves\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1994\n-20.796923\n361146926879.664185\n-20.769775\n47.004948\n3.9\n29.714409\n-17.233955\n2.263327\n27.758379\n12.570762\n...\n4.217865\n44.832608\n-2.484876\n136.909949\n50.953713\n2.128943\n307.722636\n..\n64.467073\n4.523701\n\n\n1995\n-9.137814\n328145992820.509216\n-9.11814\n48.011109\n3.9\n28.263631\n-19.694782\n1.880458\n29.289011\n11.537544\n...\n21.157115\n52.228803\n-10.125699\n57.481863\n55.182905\n6.331779\n197.414268\n..\n64.690732\n3.78443\n\n\n1996\n19.696042\n392777764330.353088\n19.870261\n36.041209\n3.544344\n27.497401\n-8.580069\n2.578983\n26.072988\n3.61451\n...\n0.228411\n49.416655\n-0.636282\n74.586825\n47.922501\n9.355331\n47.752012\n..\n65.854146\n3.756559\n\n\n1997\n3.955874\n408315558299.783752\n4.127896\n32.691078\n3.544344\n22.426736\n-10.2509\n-0.206268\n24.729842\n-0.500155\n...\n0.400672\n50.595215\n1.616568\n34.445233\n47.256921\n10.736302\n14.761329\n14.760459\n66.69878\n4.039809\n\n\n1998\n-6.462213\n381929338622.961914\n-6.307291\n31.657861\n3.544344\n20.202553\n-11.442376\n0.026226\n31.221205\n1.899743\n...\n-17.400232\n51.824919\n-3.571718\n124.378186\n55.772253\n13.708721\n27.68568\n19.616081\n67.029756\n2.732649\n\n\n1999\n20.565726\n460475878357.992188\n20.939191\n20.772669\n3.545437\n29.404085\n8.661325\n11.666457\n43.219969\n11.199565\n...\n-17.00012\n49.889768\n2.248703\n126.775609\n69.393281\n25.463468\n85.746494\n-18.951553\n65.982195\n3.073288\n\n\n2000\n22.534768\n564243051244.167847\n23.051254\n16.719621\n3.54653\n37.116967\n20.393479\n17.474242\n44.060441\n9.49948\n...\n32.399401\n49.717709\n7.093714\n56.515933\n68.093907\n30.759554\n20.798761\n-9.633111\n65.483659\n3.30703\n\n\n2001\n2.625502\n579057265920.327515\n3.061649\n16.356763\n3.547622\n32.968638\n16.651608\n10.454535\n36.893494\n4.200311\n...\n18.69892\n51.465954\n3.568085\n52.259575\n61.110859\n37.365785\n21.477007\n1.226579\n65.383415\n3.546319\n\n\n2002\n3.702693\n600497977610.976074\n4.180847\n15.779063\n3.548715\n29.333736\n13.544937\n7.952329\n35.212594\n10.300046\n...\n14.600559\n53.843741\n5.539901\n33.767822\n59.645446\n43.265368\n15.788731\n0.032935\n65.12878\n3.756277\n\n\n2003\n6.894213\n641897587809.689575\n7.38038\n14.849506\n3.549808\n29.158632\n14.407088\n7.697992\n35.249982\n12.599771\n...\n17.30011\n53.817455\n7.547088\n38.844163\n59.128269\n49.176843\n13.663293\n-0.600171\n65.027561\n3.670838\n\n\n2004\n14.943907\n737822165973.316528\n15.407705\n13.08981\n3.5509\n30.928775\n17.879048\n9.908323\n34.417891\n11.800138\n...\n23.299339\n50.658271\n5.063987\n20.948018\n56.581852\n54.53152\n10.888616\n-7.328986\n65.470976\n3.300354\n\n\n2005\n10.726779\n816966720368.666382\n11.149953\n12.136276\n3.551993\n31.305699\n19.138891\n11.045417\n35.203066\n6.500035\n...\n16.59975\n48.806044\n8.028047\n14.884707\n56.713248\n61.449009\n12.685304\n-7.20669\n65.529756\n3.331237\n\n\n2006\n12.254799\n917084348240.58606\n12.622973\n10.396712\n3.553085\n31.579732\n21.237003\n9.325445\n33.730475\n7.300047\n...\n21.299912\n49.721476\n10.884394\n13.365498\n54.733402\n67.390301\n9.668655\n-4.078692\n66.727561\n3.246357\n\n\n2007\n14.094218\n1046340216350.809937\n14.289582\n9.887135\n3.554178\n31.976111\n22.081369\n5.554576\n30.16406\n6.299816\n...\n26.19992\n50.673048\n13.621542\n20.939431\n51.706123\n73.460347\n9.007299\n-3.344927\n67.586829\n3.118542\n\n\n2008\n4.929775\n1097922433607.523193\n4.975898\n9.882478\n3.555271\n30.929513\n21.111311\n6.257972\n31.30956\n0.599853\n...\n14.799942\n50.695688\n7.119659\n17.408228\n53.382466\n83.826166\n14.110768\n-4.904962\n67.949268\n3.149486\n\n\n2009\n-17.557322\n905156654939.064209\n-17.582137\n11.784852\n3.556363\n21.577535\n9.825317\n4.120869\n27.938101\n-4.70015\n...\n-30.400076\n53.766527\n-5.270751\n12.085446\n48.435061\n93.589676\n11.64733\n13.079965\n68.684634\n3.924063\n\n\n2010\n12.433012\n1017694887643.396118\n12.382547\n10.405966\n3.557456\n27.121498\n16.688629\n4.423337\n29.215561\n7.000254\n...\n25.799719\n53.120212\n3.864897\n12.564856\n50.355505\n100.0\n6.849392\n-2.955084\n68.84122\n3.585086\n\n\n2011\n9.615786\n1115554254810.950195\n9.530334\n9.545284\n3.558549\n29.632365\n20.002455\n4.754527\n28.055361\n0.300123\n...\n20.300282\n53.797583\n3.752802\n14.049941\n48.035399\n108.440465\n8.440465\n-12.856935\n69.683902\n3.433044\n\n\n2012\n3.75807\n1157477569120.926025\n3.583592\n10.346181\n3.559641\n28.1053\n17.78466\n3.227931\n26.90732\n1.360422\n...\n9.681344\n54.509647\n4.655029\n15.228588\n47.15139\n113.94354\n5.074743\n0.176417\n70.072195\n3.68924\n\n\n2013\n-0.45812\n1152174933698.841553\n-0.669869\n11.26089\n3.580174\n25.155606\n13.942729\n1.458174\n25.845337\n4.561728\n...\n3.539025\n56.121605\n2.277415\n16.480539\n46.287149\n121.638956\n6.75371\n3.93707\n70.57878\n3.854043\n\n\n2014\n-0.363025\n1147992246430.809814\n-2.125109\n11.961967\n3.754815\n25.348779\n13.414918\n2.79291\n27.111097\n0.510432\n...\n-7.260442\n55.684831\n1.493099\n16.315467\n47.801341\n131.155273\n7.823412\n3.397147\n70.743659\n4.112993\n\n\n2015\n-5.330003\n1086804222628.839966\n-5.533945\n12.973309\n3.637684\n27.117473\n14.09436\n4.970889\n28.703389\n3.673262\n...\n-25.038775\n56.142491\n-2.052879\n13.201448\n49.359349\n151.529464\n15.534405\n7.894594\n71.183415\n4.871515\n\n\n2016\n-4.277237\n1040319034284.34375\n-4.452489\n13.953251\n3.651407\n25.728709\n11.772555\n1.916437\n25.854483\n3.168855\n...\n-3.672043\n57.012325\n-0.421167\n13.539239\n46.51812\n162.200847\n7.042448\n9.484354\n71.65122\n5.425148\n\n\n2017\n3.160377\n1073197037207.525391\n3.042448\n13.823074\n4.41324\n26.373222\n12.582155\n2.044127\n26.090881\n5.013643\n...\n17.315193\n56.032768\n1.888011\n12.931374\n46.876524\n168.175239\n3.683329\n4.945604\n72.451463\n4.248996\n\n\n2018\n5.798398\n1135425268184.233154\n5.80692\n12.7467\n4.41324\n29.672402\n16.88293\n6.979899\n30.793257\n5.554217\n...\n2.656748\n53.428806\n2.806935\n11.565465\n51.5809\n173.015822\n2.878297\n-1.028483\n72.662195\n3.719822\n\n\n2019\n-1.349856\n1120098665959.168701\n-1.305548\n13.503027\n4.41324\n27.563239\n14.104335\n3.876125\n28.433431\n0.732545\n...\n3.130358\n54.172944\n2.447491\n12.303409\n49.228754\n180.750264\n4.470367\n5.316709\n73.083902\n3.860338\n\n\n2020\n-1.690429\n1101164197011.907959\n-1.4858\n12.846195\n4.41324\n27.749065\n14.877943\n2.369115\n25.522186\n-4.170377\n...\n-11.881125\n56.372943\n-2.159233\n10.3648\n45.966908\n186.862622\n3.381659\n5.825262\n71.33878\n4.171479\n\n\n2021\n..\n..\n..\n..\n..\n..\n..\n6.647848\n29.894896\n3.280495\n...\n19.111346\n54.099641\n7.030021\n13.636871\n50.557744\n199.372063\n6.694459\n-9.924685\n69.36122\n3.720451\n\n\n2022\n..\n..\n..\n..\n..\n..\n..\n10.537169\n28.188903\n-13.886778\n...\n-14.99001\n53.976252\n-2.328812\n..\n43.774114\n..\n..\n-3.752475\n..\n4.056316\n\n\n\n\n29 rows × 33 columns\n\n\n\n\nvalue_to_replace = \"..\"\nfor col in df.columns:\n    df[col] = df[col].replace(value_to_replace, np.nan)\n\nmissing= df.isnull().sum()\n\n\nmissing_vals = pd.DataFrame({'Missing Values': missing.index, 'Missing Values Sum': missing.values})\nmissing_vals = missing_vals.sort_values(by='Missing Values Sum', ascending=False)\n\nprint(missing_vals)\n\n                   Missing Values  Missing Values Sum\n30                    expense_gdp                   3\n0                       adj_NNI_g                   2\n2         adj_savings_fix_cap_GNI                   2\n3             adj_savings_edu_GNI                   2\n4                     adj_NNS_GNI                   2\n5                    curr_acc_bal                   2\n6                      ex_imp_gdp                   2\n1                       adj_NNI_c                   2\n28          lending_interest_rate                   1\n26                      inflation                   1\n10       final_consump_exp_growth                   1\n29                 life_exp_birth                   1\n31              interest_payments                   1\n20  imports_goods_services_growth                   0\n27             real_interest_rate                   0\n25                            cpi                   0\n24                      trade_gdp                   0\n23   short_term_debt_tot_reserves                   0\n22                services_growth                   0\n21                   services_gdp                   0\n16                     gni_growth                   0\n19     imports_goods_services_gdp                   0\n18                  goods_imp_bop                   0\n17                  goods_exp_bop                   0\n15     gener_govt_fin_consump_exp                   0\n14          gdp_per_capita_growth                   0\n13                     gdp_growth                   0\n12               fdi_net_outflows                   0\n11                fdi_net_inflows                   0\n9           final_consump_exp_gdp                   0\n8                  ex_debt_shocks                   0\n7                   ex_imp_growth                   0\n32           military expenditure                   0\n\n\n\nfor cols in df.columns:\n    mean = df[cols].mean()\n    df[cols] = df[cols].fillna(mean)\n\n\nprint(df.isnull().sum())\n\nadj_NNI_g                        0\nadj_NNI_c                        0\nadj_savings_fix_cap_GNI          0\nadj_savings_edu_GNI              0\nadj_NNS_GNI                      0\ncurr_acc_bal                     0\nex_imp_gdp                       0\nex_imp_growth                    0\nex_debt_shocks                   0\nfinal_consump_exp_gdp            0\nfinal_consump_exp_growth         0\nfdi_net_inflows                  0\nfdi_net_outflows                 0\ngdp_growth                       0\ngdp_per_capita_growth            0\ngener_govt_fin_consump_exp       0\ngni_growth                       0\ngoods_exp_bop                    0\ngoods_imp_bop                    0\nimports_goods_services_gdp       0\nimports_goods_services_growth    0\nservices_gdp                     0\nservices_growth                  0\nshort_term_debt_tot_reserves     0\ntrade_gdp                        0\ncpi                              0\ninflation                        0\nreal_interest_rate               0\nlending_interest_rate            0\nlife_exp_birth                   0\nexpense_gdp                      0\ninterest_payments                0\nmilitary expenditure             0\ndtype: int64\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 29 entries, 1994 to 2022\nData columns (total 33 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   adj_NNI_g                      29 non-null     float64\n 1   adj_NNI_c                      29 non-null     float64\n 2   adj_savings_fix_cap_GNI        29 non-null     float64\n 3   adj_savings_edu_GNI            29 non-null     float64\n 4   adj_NNS_GNI                    29 non-null     float64\n 5   curr_acc_bal                   29 non-null     float64\n 6   ex_imp_gdp                     29 non-null     float64\n 7   ex_imp_growth                  29 non-null     float64\n 8   ex_debt_shocks                 29 non-null     float64\n 9   final_consump_exp_gdp          29 non-null     float64\n 10  final_consump_exp_growth       29 non-null     float64\n 11  fdi_net_inflows                29 non-null     float64\n 12  fdi_net_outflows               29 non-null     float64\n 13  gdp_growth                     29 non-null     float64\n 14  gdp_per_capita_growth          29 non-null     float64\n 15  gener_govt_fin_consump_exp     29 non-null     float64\n 16  gni_growth                     29 non-null     float64\n 17  goods_exp_bop                  29 non-null     float64\n 18  goods_imp_bop                  29 non-null     float64\n 19  imports_goods_services_gdp     29 non-null     float64\n 20  imports_goods_services_growth  29 non-null     float64\n 21  services_gdp                   29 non-null     float64\n 22  services_growth                29 non-null     float64\n 23  short_term_debt_tot_reserves   29 non-null     float64\n 24  trade_gdp                      29 non-null     float64\n 25  cpi                            29 non-null     float64\n 26  inflation                      29 non-null     float64\n 27  real_interest_rate             29 non-null     float64\n 28  lending_interest_rate          29 non-null     float64\n 29  life_exp_birth                 29 non-null     float64\n 30  expense_gdp                    29 non-null     float64\n 31  interest_payments              29 non-null     float64\n 32  military expenditure           29 non-null     float64\ndtypes: float64(33)\nmemory usage: 7.6 KB\n\n\n\ndf['year'] = df.index\n\n\ndf[\"gdp_growth\"].min()\n\n-1.787319182058073\n\n\n\ndf[\"gdp_growth\"].max()\n\n4.502694248648224\n\n\n\nbins = [0, 2, 5, 7, float('inf')]\n\n\nlabels = ['Low Growth', 'Moderate Growth', 'High Growth', 'Very High Growth']\n\n\ndf['labels'] = pd.cut(df['gdp_growth'], bins=bins, labels=labels)\n\n\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear\nlabels\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1994\n-20.796923\n3.611469e+11\n-20.769775\n47.004948\n3.900000\n29.714409\n-17.233955\n2.263327\n27.758379\n12.570762\n...\n-2.484876\n136.909949\n50.953713\n2.128943\n307.722636\n0.120247\n64.467073\n4.523701\n1994\nLow Growth\n\n\n1995\n-9.137814\n3.281460e+11\n-9.118140\n48.011109\n3.900000\n28.263631\n-19.694782\n1.880458\n29.289011\n11.537544\n...\n-10.125699\n57.481863\n55.182905\n6.331779\n197.414268\n0.120247\n64.690732\n3.784430\n1995\nLow Growth\n\n\n1996\n19.696042\n3.927778e+11\n19.870261\n36.041209\n3.544344\n27.497401\n-8.580069\n2.578983\n26.072988\n3.614510\n...\n-0.636282\n74.586825\n47.922501\n9.355331\n47.752012\n0.120247\n65.854146\n3.756559\n1996\nLow Growth\n\n\n1997\n3.955874\n4.083156e+11\n4.127896\n32.691078\n3.544344\n22.426736\n-10.250900\n-0.206268\n24.729842\n-0.500155\n...\n1.616568\n34.445233\n47.256921\n10.736302\n14.761329\n14.760459\n66.698780\n4.039809\n1997\nLow Growth\n\n\n1998\n-6.462213\n3.819293e+11\n-6.307291\n31.657861\n3.544344\n20.202553\n-11.442376\n0.026226\n31.221205\n1.899743\n...\n-3.571718\n124.378186\n55.772253\n13.708721\n27.685680\n19.616081\n67.029756\n2.732649\n1998\nLow Growth\n\n\n1999\n20.565726\n4.604759e+11\n20.939191\n20.772669\n3.545437\n29.404085\n8.661325\n11.666457\n43.219969\n11.199565\n...\n2.248703\n126.775609\n69.393281\n25.463468\n85.746494\n-18.951553\n65.982195\n3.073288\n1999\nLow Growth\n\n\n2000\n22.534768\n5.642431e+11\n23.051254\n16.719621\n3.546530\n37.116967\n20.393479\n17.474242\n44.060441\n9.499480\n...\n7.093714\n56.515933\n68.093907\n30.759554\n20.798761\n-9.633111\n65.483659\n3.307030\n2000\nLow Growth\n\n\n2001\n2.625502\n5.790573e+11\n3.061649\n16.356763\n3.547622\n32.968638\n16.651608\n10.454535\n36.893494\n4.200311\n...\n3.568085\n52.259575\n61.110859\n37.365785\n21.477007\n1.226579\n65.383415\n3.546319\n2001\nLow Growth\n\n\n2002\n3.702693\n6.004980e+11\n4.180847\n15.779063\n3.548715\n29.333736\n13.544937\n7.952329\n35.212594\n10.300046\n...\n5.539901\n33.767822\n59.645446\n43.265368\n15.788731\n0.032935\n65.128780\n3.756277\n2002\nLow Growth\n\n\n2003\n6.894213\n6.418976e+11\n7.380380\n14.849506\n3.549808\n29.158632\n14.407088\n7.697992\n35.249982\n12.599771\n...\n7.547088\n38.844163\n59.128269\n49.176843\n13.663293\n-0.600171\n65.027561\n3.670838\n2003\nLow Growth\n\n\n2004\n14.943907\n7.378222e+11\n15.407705\n13.089810\n3.550900\n30.928775\n17.879048\n9.908323\n34.417891\n11.800138\n...\n5.063987\n20.948018\n56.581852\n54.531520\n10.888616\n-7.328986\n65.470976\n3.300354\n2004\nModerate Growth\n\n\n2005\n10.726779\n8.169667e+11\n11.149953\n12.136276\n3.551993\n31.305699\n19.138891\n11.045417\n35.203066\n6.500035\n...\n8.028047\n14.884707\n56.713248\n61.449009\n12.685304\n-7.206690\n65.529756\n3.331237\n2005\nModerate Growth\n\n\n2006\n12.254799\n9.170843e+11\n12.622973\n10.396712\n3.553085\n31.579732\n21.237003\n9.325445\n33.730475\n7.300047\n...\n10.884394\n13.365498\n54.733402\n67.390301\n9.668655\n-4.078692\n66.727561\n3.246357\n2006\nModerate Growth\n\n\n2007\n14.094218\n1.046340e+12\n14.289582\n9.887135\n3.554178\n31.976111\n22.081369\n5.554576\n30.164060\n6.299816\n...\n13.621542\n20.939431\n51.706123\n73.460347\n9.007299\n-3.344927\n67.586829\n3.118542\n2007\nModerate Growth\n\n\n2008\n4.929775\n1.097922e+12\n4.975898\n9.882478\n3.555271\n30.929513\n21.111311\n6.257972\n31.309560\n0.599853\n...\n7.119659\n17.408228\n53.382466\n83.826166\n14.110768\n-4.904962\n67.949268\n3.149486\n2008\nModerate Growth\n\n\n2009\n-17.557322\n9.051567e+11\n-17.582137\n11.784852\n3.556363\n21.577535\n9.825317\n4.120869\n27.938101\n-4.700150\n...\n-5.270751\n12.085446\n48.435061\n93.589676\n11.647330\n13.079965\n68.684634\n3.924063\n2009\nModerate Growth\n\n\n2010\n12.433012\n1.017695e+12\n12.382547\n10.405966\n3.557456\n27.121498\n16.688629\n4.423337\n29.215561\n7.000254\n...\n3.864897\n12.564856\n50.355505\n100.000000\n6.849392\n-2.955084\n68.841220\n3.585086\n2010\nModerate Growth\n\n\n2011\n9.615786\n1.115554e+12\n9.530334\n9.545284\n3.558549\n29.632365\n20.002455\n4.754527\n28.055361\n0.300123\n...\n3.752802\n14.049941\n48.035399\n108.440465\n8.440465\n-12.856935\n69.683902\n3.433044\n2011\nModerate Growth\n\n\n2012\n3.758070\n1.157478e+12\n3.583592\n10.346181\n3.559641\n28.105300\n17.784660\n3.227931\n26.907320\n1.360422\n...\n4.655029\n15.228588\n47.151390\n113.943540\n5.074743\n0.176417\n70.072195\n3.689240\n2012\nModerate Growth\n\n\n2013\n-0.458120\n1.152175e+12\n-0.669869\n11.260890\n3.580174\n25.155606\n13.942729\n1.458174\n25.845337\n4.561728\n...\n2.277415\n16.480539\n46.287149\n121.638956\n6.753710\n3.937070\n70.578780\n3.854043\n2013\nModerate Growth\n\n\n2014\n-0.363025\n1.147992e+12\n-2.125109\n11.961967\n3.754815\n25.348779\n13.414918\n2.792910\n27.111097\n0.510432\n...\n1.493099\n16.315467\n47.801341\n131.155273\n7.823412\n3.397147\n70.743659\n4.112993\n2014\nLow Growth\n\n\n2015\n-5.330003\n1.086804e+12\n-5.533945\n12.973309\n3.637684\n27.117473\n14.094360\n4.970889\n28.703389\n3.673262\n...\n-2.052879\n13.201448\n49.359349\n151.529464\n15.534405\n7.894594\n71.183415\n4.871515\n2015\nLow Growth\n\n\n2016\n-4.277237\n1.040319e+12\n-4.452489\n13.953251\n3.651407\n25.728709\n11.772555\n1.916437\n25.854483\n3.168855\n...\n-0.421167\n13.539239\n46.518120\n162.200847\n7.042448\n9.484354\n71.651220\n5.425148\n2016\nModerate Growth\n\n\n2017\n3.160377\n1.073197e+12\n3.042448\n13.823074\n4.413240\n26.373222\n12.582155\n2.044127\n26.090881\n5.013643\n...\n1.888011\n12.931374\n46.876524\n168.175239\n3.683329\n4.945604\n72.451463\n4.248996\n2017\nLow Growth\n\n\n2018\n5.798398\n1.135425e+12\n5.806920\n12.746700\n4.413240\n29.672402\n16.882930\n6.979899\n30.793257\n5.554217\n...\n2.806935\n11.565465\n51.580900\n173.015822\n2.878297\n-1.028483\n72.662195\n3.719822\n2018\nLow Growth\n\n\n2019\n-1.349856\n1.120099e+12\n-1.305548\n13.503027\n4.413240\n27.563239\n14.104335\n3.876125\n28.433431\n0.732545\n...\n2.447491\n12.303409\n49.228754\n180.750264\n4.470367\n5.316709\n73.083902\n3.860338\n2019\nLow Growth\n\n\n2020\n-1.690429\n1.101164e+12\n-1.485800\n12.846195\n4.413240\n27.749065\n14.877943\n2.369115\n25.522186\n-4.170377\n...\n-2.159233\n10.364800\n45.966908\n186.862622\n3.381659\n5.825262\n71.338780\n4.171479\n2020\nLow Growth\n\n\n2021\n3.861741\n8.291734e+11\n3.927901\n17.793590\n3.720208\n28.294512\n10.513962\n6.647848\n29.894896\n3.280495\n...\n7.030021\n13.636871\n50.557744\n199.372063\n6.694459\n-9.924685\n69.361220\n3.720451\n2021\nModerate Growth\n\n\n2022\n3.861741\n8.291734e+11\n3.927901\n17.793590\n3.720208\n28.294512\n10.513962\n10.537169\n28.188903\n-13.886778\n...\n-2.328812\n35.634946\n43.774114\n87.843702\n32.123031\n-3.752475\n68.190967\n4.056316\n2022\nNaN\n\n\n\n\n29 rows × 35 columns\n\n\n\n\ncsv_file='../data/russia.csv'\n\n\ndf.to_csv(csv_file, index=True)"
  },
  {
    "objectID": "codes/countries_code/india.html",
    "href": "codes/countries_code/india.html",
    "title": "DSAN-5000: Project",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n#pip install xlrd\ndf=pd.read_excel('../data/india.xlsx')\n\n\ndf = df.T\ndf.columns = df.iloc[0]\n\n\ndf.head()\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital...\nAdjusted savings: education expenditure (% of ...\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\nSeries Code\nNY.ADJ.NNTY.KD.ZG\nNY.ADJ.NNTY.KD\nNY.ADJ.DKAP.GN.ZS\nNY.ADJ.AEDU.GN.ZS\nNY.ADJ.NNAT.GN.ZS\nBN.CAB.XOKA.GD.ZS\nNE.EXP.GNFS.ZS\nNE.EXP.GNFS.KD.ZG\nDT.DOD.DECT.GN.ZS\nNE.CON.TOTL.ZS\n...\nDT.DOD.DSTC.IR.ZS\nNE.TRD.GNFS.ZS\nFP.CPI.TOTL\nFP.CPI.TOTL.ZG\nFR.INR.RINR\nFR.INR.LEND\nSP.DYN.LE00.IN\nGC.XPN.TOTL.GD.ZS\nGC.XPN.INTP.RV.ZS\nMS.MIL.XPND.GD.ZS\n\n\nCountry Name\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\n...\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\nIndia\n\n\nCountry Code\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\n...\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\n\n\n1979 [YR1979]\n-4.294464\n221187904202.083466\n8.340217\n2.6\n7.42791\n0.032902\n6.749638\n11.154191\n11.875085\n85.691548\n...\n5.907537\n14.918805\n8.745175\n6.275683\n-1.061146\n14.5\n53.06\n12.314448\n12.925728\n3.261329\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[4:]\ndf.head()\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\n\n\n1979 [YR1979]\n-4.294464\n221187904202.083466\n8.340217\n2.6\n7.42791\n0.032902\n6.749638\n11.154191\n11.875085\n85.691548\n...\n5.907537\n14.918805\n8.745175\n6.275683\n-1.061146\n14.5\n53.06\n12.314448\n12.925728\n3.261329\n\n\n1980 [YR1980]\n11.978544\n247682993937.674408\n8.055168\n2.6\n6.418183\n-0.958069\n6.139551\n5.23733\n11.096107\n87.498021\n...\n10.583034\n15.384577\n9.737409\n11.346073\n4.476508\n16.5\n53.611\n11.702478\n13.780033\n3.133781\n\n\n1981 [YR1981]\n-2.572689\n241310879910.579712\n8.393346\n2.6\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n19.694561\n14.507265\n11.014232\n13.112547\n5.118237\n16.5\n54.175\n11.376034\n14.073244\n3.186248\n\n\n1982 [YR1982]\n1.626264\n245235232731.58252\n8.819348\n3.051058\n7.043158\n-1.257273\n5.9833\n6.020508\n13.467614\n85.319441\n...\n29.084294\n14.125928\n11.883336\n7.890743\n7.774707\n16.5\n54.732\n11.959873\n15.563031\n3.345118\n\n\n1983 [YR1983]\n11.562099\n273589572947.595245\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n40.629366\n13.690594\n13.29366\n11.868081\n7.320987\n16.5\n55.281\n12.077793\n17.460567\n3.323069\n\n\n\n\n5 rows × 33 columns\n\n\n\n\ndf = df.iloc[1:]\ndf.head()\n\n\n\n\n\n\n\nSeries Name\nAdjusted net national income (annual % growth)\nAdjusted net national income (constant 2015 US$)\nAdjusted savings: consumption of fixed capital (% of GNI)\nAdjusted savings: education expenditure (% of GNI)\nAdjusted savings: net national savings (% of GNI)\nCurrent account balance (% of GDP)\nExports of goods and services (% of GDP)\nExports of goods and services (annual % growth)\nExternal debt stocks (% of GNI)\nFinal consumption expenditure (% of GDP)\n...\nShort-term debt (% of total reserves)\nTrade (% of GDP)\nConsumer price index (2010 = 100)\nInflation, consumer prices (annual %)\nReal interest rate (%)\nLending interest rate (%)\nLife expectancy at birth, total (years)\nExpense (% of GDP)\nInterest payments (% of revenue)\nMilitary expenditure (% of GDP)\n\n\n\n\n1980 [YR1980]\n11.978544\n247682993937.674408\n8.055168\n2.6\n6.418183\n-0.958069\n6.139551\n5.23733\n11.096107\n87.498021\n...\n10.583034\n15.384577\n9.737409\n11.346073\n4.476508\n16.5\n53.611\n11.702478\n13.780033\n3.133781\n\n\n1981 [YR1981]\n-2.572689\n241310879910.579712\n8.393346\n2.6\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n19.694561\n14.507265\n11.014232\n13.112547\n5.118237\n16.5\n54.175\n11.376034\n14.073244\n3.186248\n\n\n1982 [YR1982]\n1.626264\n245235232731.58252\n8.819348\n3.051058\n7.043158\n-1.257273\n5.9833\n6.020508\n13.467614\n85.319441\n...\n29.084294\n14.125928\n11.883336\n7.890743\n7.774707\n16.5\n54.732\n11.959873\n15.563031\n3.345118\n\n\n1983 [YR1983]\n11.562099\n273589572947.595245\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n40.629366\n13.690594\n13.29366\n11.868081\n7.320987\n16.5\n55.281\n12.077793\n17.460567\n3.323069\n\n\n1984 [YR1984]\n1.851968\n278656365651.448975\n8.784357\n2.7\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n43.018087\n14.009376\n14.399548\n8.318907\n7.9471\n16.5\n55.816\n13.14296\n19.011381\n3.416876\n\n\n\n\n5 rows × 33 columns\n\n\n\n\nprint(df.isnull().sum())\n\nSeries Name\nAdjusted net national income (annual % growth)                 0\nAdjusted net national income (constant 2015 US$)               0\nAdjusted savings: consumption of fixed capital (% of GNI)      0\nAdjusted savings: education expenditure (% of GNI)             0\nAdjusted savings: net national savings (% of GNI)              0\nCurrent account balance (% of GDP)                             0\nExports of goods and services (% of GDP)                       0\nExports of goods and services (annual % growth)                0\nExternal debt stocks (% of GNI)                                0\nFinal consumption expenditure (% of GDP)                       0\nFinal consumption expenditure (annual % growth)                0\nForeign direct investment, net inflows (% of GDP)              0\nForeign direct investment, net outflows (% of GDP)             0\nGDP growth (annual %)                                          0\nGDP per capita growth (annual %)                               0\nGeneral government final consumption expenditure (% of GDP)    0\nGNI growth (annual %)                                          0\nGoods exports (BoP, current US$)                               0\nGoods imports (BoP, current US$)                               0\nImports of goods and services (% of GDP)                       0\nImports of goods and services (annual % growth)                0\nServices, value added (% of GDP)                               0\nServices, value added (annual % growth)                        0\nShort-term debt (% of total reserves)                          0\nTrade (% of GDP)                                               0\nConsumer price index (2010 = 100)                              0\nInflation, consumer prices (annual %)                          0\nReal interest rate (%)                                         0\nLending interest rate (%)                                      0\nLife expectancy at birth, total (years)                        0\nExpense (% of GDP)                                             0\nInterest payments (% of revenue)                               0\nMilitary expenditure (% of GDP)                                0\ndtype: int64\n\n\n\n# creating a new index rather than treating it\nnew_index = range(1979, 2022)\n\n# Reset the index with the new range\ndf = df.reset_index(drop=True)\ndf.index = new_index\ndf.index.name = \"year\"\n\ndf.shape\n\n(43, 33)\n\n\n\ncols= ['adj_NNI_g', 'adj_NNI_c', 'adj_savings_fix_cap_GNI', 'adj_savings_edu_GNI', 'adj_NNS_GNI',\n                    'curr_acc_bal', 'ex_imp_gdp', 'ex_imp_growth', 'ex_debt_shocks', 'final_consump_exp_gdp',\n                    'final_consump_exp_growth', 'fdi_net_inflows', 'fdi_net_outflows', 'gdp_growth', 'gdp_per_capita_growth',\n                    'gener_govt_fin_consump_exp', 'gni_growth', 'goods_exp_bop','goods_imp_bop', 'imports_goods_services_gdp', 'imports_goods_services_growth','services_gdp', 'services_growth', \n                       'short_term_debt_tot_reserves','trade_gdp', 'cpi', 'inflation','real_interest_rate','lending_interest_rate','life_exp_birth','expense_gdp','interest_payments', 'military expenditure']\n\ndf.columns = cols\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\nshort_term_debt_tot_reserves\ntrade_gdp\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1979\n11.978544\n247682993937.674408\n8.055168\n2.6\n6.418183\n-0.958069\n6.139551\n5.23733\n11.096107\n87.498021\n...\n10.583034\n15.384577\n9.737409\n11.346073\n4.476508\n16.5\n53.611\n11.702478\n13.780033\n3.133781\n\n\n1980\n-2.572689\n241310879910.579712\n8.393346\n2.6\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n19.694561\n14.507265\n11.014232\n13.112547\n5.118237\n16.5\n54.175\n11.376034\n14.073244\n3.186248\n\n\n1981\n1.626264\n245235232731.58252\n8.819348\n3.051058\n7.043158\n-1.257273\n5.9833\n6.020508\n13.467614\n85.319441\n...\n29.084294\n14.125928\n11.883336\n7.890743\n7.774707\n16.5\n54.732\n11.959873\n15.563031\n3.345118\n\n\n1982\n11.562099\n273589572947.595245\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n40.629366\n13.690594\n13.29366\n11.868081\n7.320987\n16.5\n55.281\n12.077793\n17.460567\n3.323069\n\n\n1983\n1.851968\n278656365651.448975\n8.784357\n2.7\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n43.018087\n14.009376\n14.399548\n8.318907\n7.9471\n16.5\n55.816\n13.14296\n19.011381\n3.416876\n\n\n1984\n2.568824\n285814557838.356689\n9.353953\n2.9\n7.5543\n-1.780807\n5.254555\n-6.314911\n16.829824\n83.909108\n...\n45.907013\n12.900036\n15.199648\n5.556424\n8.681674\n16.5\n56.334\n14.378945\n19.624125\n3.56903\n\n\n1985\n4.529744\n298761224680.172546\n9.396312\n3.0\n6.454966\n-1.834521\n5.196222\n5.432381\n18.13978\n84.709376\n...\n47.194195\n12.219272\n16.526534\n8.729721\n9.093224\n16.5\n56.835\n15.338638\n20.586555\n4.106469\n\n\n1986\n6.629877\n318568727399.533142\n9.730683\n2.9\n7.376519\n-1.853242\n5.604581\n12.727279\n19.285986\n83.378616\n...\n49.280124\n12.584814\n17.981055\n8.801126\n6.56018\n16.5\n57.315\n15.767219\n22.398962\n4.231318\n\n\n1987\n8.303368\n345020659711.309387\n9.652199\n2.7\n8.727017\n-2.408456\n6.03522\n7.473063\n20.20166\n81.723887\n...\n69.215231\n13.49045\n19.668303\n9.383472\n7.638633\n16.5\n57.777\n15.519503\n23.934797\n3.728672\n\n\n1988\n6.679085\n368064882024.926392\n9.735381\n3.3\n10.618226\n-2.301284\n7.01613\n11.979133\n25.194922\n79.735153\n...\n93.198001\n15.168132\n21.059694\n7.07428\n7.435843\n16.5\n58.233\n15.971534\n24.459015\n3.53418\n\n\n1989\n7.798858\n396769741112.589905\n9.724013\n3.5\n11.755826\n-2.191936\n7.05335\n11.104418\n26.350386\n78.360625\n...\n151.557983\n15.506262\n22.949008\n8.971233\n5.269527\n16.5\n58.652\n15.484217\n27.639145\n3.146215\n\n\n1990\n-0.908724\n393164201109.145508\n10.447907\n3.4\n11.647894\n-1.588911\n8.494241\n9.662286\n31.899926\n78.0968\n...\n92.831035\n16.987727\n26.132091\n13.870246\n3.624717\n17.875\n59.055\n15.33898\n28.923608\n2.909974\n\n\n1991\n4.070959\n409169754322.115967\n10.394383\n3.3\n13.196898\n-1.556245\n8.842927\n4.893244\n30.928699\n76.659385\n...\n66.465481\n18.433099\n29.212495\n11.787817\n9.132749\n18.916667\n59.452\n15.116476\n29.499858\n2.70484\n\n\n1992\n9.660763\n448698673872.196655\n10.101674\n3.2\n14.357626\n-0.671619\n9.834217\n13.779594\n33.157433\n76.454222\n...\n24.709316\n19.65154\n31.060737\n6.32689\n5.814777\n16.25\n59.815\n15.145108\n33.974271\n2.823542\n\n\n1993\n5.721647\n474371629043.350403\n9.990217\n3.1\n16.3043\n-0.512193\n9.888085\n13.043665\n30.298974\n75.276653\n...\n17.60461\n20.078144\n34.243821\n10.247936\n4.33711\n14.75\n60.216\n14.603287\n33.637618\n2.664674\n\n\n1994\n4.755024\n496928112552.502563\n9.890789\n3.1\n17.400965\n-1.544132\n10.843968\n31.396073\n26.332172\n74.240728\n...\n22.082135\n22.867449\n37.745213\n10.224886\n5.864178\n15.458333\n60.596\n14.245726\n31.889354\n2.578484\n\n\n1995\n12.397011\n558532345982.026733\n9.825787\n2.9\n17.423571\n-1.515955\n10.385169\n6.28973\n24.142642\n74.886108\n...\n27.023591\n21.929488\n41.133658\n8.977152\n7.792994\n15.958333\n60.984\n14.080711\n32.151189\n2.472768\n\n\n1996\n3.238247\n576619004216.913696\n10.050889\n2.9\n17.861733\n-0.713014\n10.690717\n-2.328176\n22.812537\n74.940559\n...\n17.776761\n22.619387\n44.080577\n7.164252\n6.909579\n13.833333\n61.388\n14.597482\n32.941772\n2.647732\n\n\n1997\n7.246747\n618405127018.825928\n9.723308\n3.770376\n16.353247\n-1.638325\n11.018469\n13.884322\n23.536455\n75.718624\n...\n14.125564\n23.69947\n49.912808\n13.230839\n5.121276\n13.541667\n61.792\n14.40763\n37.405309\n2.727311\n\n\n1998\n2.528489\n634041435042.261353\n9.895852\n4.29\n16.038214\n-0.703548\n11.452065\n17.999469\n21.917063\n76.184976\n...\n10.923393\n24.815598\n52.243646\n4.66982\n9.191247\n12.541667\n62.207\n14.804038\n37.157986\n2.957196\n\n\n1999\n5.507436\n668960864310.666382\n10.265067\n4.201292\n16.084825\n-0.982344\n12.997236\n18.153511\n21.822908\n75.686817\n...\n8.431756\n26.900923\n54.338322\n4.009436\n8.342611\n12.291667\n62.669\n15.410403\n38.912415\n2.94893\n\n\n2000\n1.046402\n675960887189.533936\n10.46326\n3.960082\n15.940066\n0.290495\n12.55838\n4.309525\n20.676061\n75.908307\n...\n5.590118\n25.993255\n56.391926\n3.779293\n8.591449\n12.083333\n63.091\n15.545626\n40.936291\n2.924436\n\n\n2001\n4.951294\n709429700530.186523\n10.453783\n3.718872\n17.921951\n1.370941\n14.264384\n21.085003\n20.673248\n74.343742\n...\n5.715853\n29.508663\n58.815173\n4.297152\n7.907177\n11.916667\n63.616\n16.052948\n39.469513\n2.826867\n\n\n2002\n9.641872\n777832002448.548218\n10.347631\n3.477663\n20.332303\n1.443561\n14.947914\n9.58222\n19.709221\n72.379968\n...\n6.099066\n30.592436\n61.053595\n3.805859\n7.307881\n11.458333\n64.094\n15.577594\n36.058542\n2.677777\n\n\n2003\n10.32709\n858159411534.189331\n10.630061\n3.221062\n22.892667\n0.110019\n17.859125\n27.176412\n17.558928\n68.75625\n...\n5.214571\n37.503814\n63.353638\n3.767252\n4.910128\n10.916667\n64.524\n15.133483\n31.90673\n2.828752\n\n\n2004\n8.412071\n930348386957.978027\n10.614744\n3.13\n24.02899\n-1.253507\n19.605247\n26.085074\n14.880053\n67.74487\n...\n6.396525\n42.00167\n66.043851\n4.246344\n4.855145\n10.75\n64.996\n15.173984\n28.570953\n2.910588\n\n\n2005\n7.694546\n1001934470095.718506\n10.461379\n3.08\n26.194569\n-0.988988\n21.267941\n20.393805\n17.099679\n65.912416\n...\n14.095495\n45.72448\n69.872099\n5.796523\n2.570607\n11.1875\n65.412\n15.18948\n25.63898\n2.680382\n\n\n2006\n8.24259\n1084519823254.809814\n10.519194\n3.08\n26.670888\n-0.663718\n20.7997\n5.866539\n16.841424\n65.622627\n...\n13.04984\n45.686269\n74.324964\n6.372881\n5.681844\n13.020833\n65.788\n15.25786\n23.370264\n2.478247\n\n\n2007\n1.706407\n1103026150598.246338\n10.916884\n3.08\n25.637738\n-2.583377\n24.097357\n14.778135\n19.057199\n67.215297\n...\n17.023123\n53.36822\n80.530554\n8.349267\n3.771756\n13.3125\n66.149\n17.22767\n26.538502\n2.631461\n\n\n2008\n10.919593\n1223472120815.657959\n10.989665\n3.08\n24.950184\n-1.951462\n20.400519\n-4.834225\n19.215581\n67.419556\n...\n16.370144\n46.27287\n89.294173\n10.882353\n4.808592\n12.1875\n66.513\n16.851893\n28.462907\n3.129385\n\n\n2009\n10.026321\n1346141369053.993896\n10.665562\n3.08\n25.960944\n-3.253484\n22.400933\n19.478135\n17.520329\n65.732466\n...\n18.785932\n49.255206\n100.0\n11.98939\n-1.983859\n8.33335\n66.909\n16.505136\n22.825788\n2.889463\n\n\n2010\n4.604685\n1408126933897.140625\n10.556404\n3.08\n24.802712\n-3.429285\n24.540411\n15.492981\n18.50558\n67.29168\n...\n26.127114\n55.62388\n108.911793\n8.911793\n1.31798\n10.166667\n67.359\n14.489839\n22.868389\n2.704482\n\n\n2011\n6.111051\n1494178287216.812012\n10.786722\n3.08\n24.793388\n-5.00489\n24.534431\n6.805489\n21.735185\n67.14481\n...\n31.072261\n55.793722\n119.235539\n9.478997\n2.473522\n10.604167\n67.887\n16.166712\n24.908665\n2.618166\n\n\n2012\n5.743356\n1579994270830.369629\n10.821082\n3.08\n23.987661\n-2.645667\n25.430861\n7.792389\n23.300868\n67.940926\n...\n31.099766\n53.844132\n131.18041\n10.017878\n3.865993\n10.291667\n68.46\n16.638683\n25.689158\n2.548825\n\n\n2013\n7.013968\n1690814556625.124023\n10.872474\n3.08\n22.889903\n-1.339509\n22.967963\n1.777591\n22.704909\n68.568574\n...\n26.324003\n48.922186\n139.924446\n6.665657\n6.695176\n10.25\n69.074\n14.803138\n27.185085\n2.543982\n\n\n2014\n8.865576\n1840715014323.439941\n10.627723\n3.08\n22.208815\n-1.067549\n19.813189\n-5.647087\n23.029514\n69.435572\n...\n23.084751\n41.922914\n146.790502\n4.906973\n7.556488\n10.008333\n69.636\n15.12569\n25.209618\n2.45745\n\n\n2015\n7.532403\n1979365085822.093994\n10.538781\n3.08\n20.883442\n-0.527881\n19.158235\n4.984258\n20.263088\n69.603829\n...\n23.205475\n40.082486\n154.054013\n4.948216\n6.232711\n9.6725\n70.117\n15.27195\n24.210561\n2.543152\n\n\n2016\n8.398101\n2145594159484.789062\n10.541804\n3.08\n21.557433\n-1.439488\n18.791765\n4.564708\n19.501016\n69.492349\n...\n23.656163\n40.742497\n159.181198\n3.328173\n5.327609\n9.508333\n70.467\n15.61411\n24.291937\n2.531511\n\n\n2017\n5.840102\n2270899037803.043945\n10.715975\n3.08\n20.969418\n-2.426975\n19.927829\n11.931871\n19.485095\n70.111541\n...\n26.035185\n43.616969\n165.451069\n3.938826\n5.361666\n9.454167\n70.71\n15.663132\n23.011306\n2.424285\n\n\n2018\n4.233916\n2367046992096.234863\n10.84664\n3.08\n19.364627\n-1.049612\n18.664265\n-3.384978\n20.000281\n71.913963\n...\n23.039152\n39.905404\n171.621576\n3.729506\n6.894875\n9.46625\n70.91\n..\n..\n2.548622\n\n\n2019\n-6.952693\n2202473491333.981445\n11.088283\n3.08\n19.896565\n1.225112\n18.705247\n-9.135286\n21.470538\n72.88427\n...\n17.541224\n37.804125\n182.988823\n6.623437\n4.20391\n9.15\n70.15\n..\n..\n2.812528\n\n\n2020\n..\n..\n..\n..\n..\n-1.060924\n21.514389\n29.293893\n19.618194\n72.300662\n...\n17.953328\n45.667683\n192.378725\n5.131407\n0.147236\n8.698333\n67.24\n..\n..\n2.471447\n\n\n2021\n..\n..\n..\n..\n..\n-2.335269\n22.449438\n11.502775\n..\n71.036559\n...\n..\n49.373094\n205.266241\n6.699034\n0.229815\n8.567143\n..\n..\n..\n2.425227\n\n\n\n\n43 rows × 33 columns\n\n\n\n\nvalue_to_replace = \"..\"\nfor col in df.columns:\n    df[col] = df[col].replace(value_to_replace, np.nan)\n\nmissing= df.isnull().sum()\n\n\nmissing_vals = pd.DataFrame({'Missing Values': missing.index, 'Missing Values Sum': missing.values})\nmissing_vals = missing_vals.sort_values(by='Missing Values Sum', ascending=False)\n\nprint(missing_vals)\n\n                   Missing Values  Missing Values Sum\n31              interest_payments                   4\n30                    expense_gdp                   4\n0                       adj_NNI_g                   2\n2         adj_savings_fix_cap_GNI                   2\n3             adj_savings_edu_GNI                   2\n4                     adj_NNS_GNI                   2\n1                       adj_NNI_c                   2\n29                 life_exp_birth                   1\n8                  ex_debt_shocks                   1\n23   short_term_debt_tot_reserves                   1\n24                      trade_gdp                   0\n21                   services_gdp                   0\n22                services_growth                   0\n28          lending_interest_rate                   0\n25                            cpi                   0\n26                      inflation                   0\n27             real_interest_rate                   0\n19     imports_goods_services_gdp                   0\n20  imports_goods_services_growth                   0\n16                     gni_growth                   0\n18                  goods_imp_bop                   0\n17                  goods_exp_bop                   0\n15     gener_govt_fin_consump_exp                   0\n14          gdp_per_capita_growth                   0\n13                     gdp_growth                   0\n12               fdi_net_outflows                   0\n11                fdi_net_inflows                   0\n10       final_consump_exp_growth                   0\n9           final_consump_exp_gdp                   0\n7                   ex_imp_growth                   0\n6                      ex_imp_gdp                   0\n5                    curr_acc_bal                   0\n32           military expenditure                   0\n\n\n\nfor cols in df.columns:\n    mean = df[cols].mean()\n    df[cols] = df[cols].fillna(mean)\n\n\nprint(df.isnull().sum())\n\nadj_NNI_g                        0\nadj_NNI_c                        0\nadj_savings_fix_cap_GNI          0\nadj_savings_edu_GNI              0\nadj_NNS_GNI                      0\ncurr_acc_bal                     0\nex_imp_gdp                       0\nex_imp_growth                    0\nex_debt_shocks                   0\nfinal_consump_exp_gdp            0\nfinal_consump_exp_growth         0\nfdi_net_inflows                  0\nfdi_net_outflows                 0\ngdp_growth                       0\ngdp_per_capita_growth            0\ngener_govt_fin_consump_exp       0\ngni_growth                       0\ngoods_exp_bop                    0\ngoods_imp_bop                    0\nimports_goods_services_gdp       0\nimports_goods_services_growth    0\nservices_gdp                     0\nservices_growth                  0\nshort_term_debt_tot_reserves     0\ntrade_gdp                        0\ncpi                              0\ninflation                        0\nreal_interest_rate               0\nlending_interest_rate            0\nlife_exp_birth                   0\nexpense_gdp                      0\ninterest_payments                0\nmilitary expenditure             0\ndtype: int64\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 43 entries, 1979 to 2021\nData columns (total 33 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   adj_NNI_g                      43 non-null     float64\n 1   adj_NNI_c                      43 non-null     float64\n 2   adj_savings_fix_cap_GNI        43 non-null     float64\n 3   adj_savings_edu_GNI            43 non-null     float64\n 4   adj_NNS_GNI                    43 non-null     float64\n 5   curr_acc_bal                   43 non-null     float64\n 6   ex_imp_gdp                     43 non-null     float64\n 7   ex_imp_growth                  43 non-null     float64\n 8   ex_debt_shocks                 43 non-null     float64\n 9   final_consump_exp_gdp          43 non-null     float64\n 10  final_consump_exp_growth       43 non-null     float64\n 11  fdi_net_inflows                43 non-null     float64\n 12  fdi_net_outflows               43 non-null     float64\n 13  gdp_growth                     43 non-null     float64\n 14  gdp_per_capita_growth          43 non-null     float64\n 15  gener_govt_fin_consump_exp     43 non-null     float64\n 16  gni_growth                     43 non-null     float64\n 17  goods_exp_bop                  43 non-null     float64\n 18  goods_imp_bop                  43 non-null     float64\n 19  imports_goods_services_gdp     43 non-null     float64\n 20  imports_goods_services_growth  43 non-null     float64\n 21  services_gdp                   43 non-null     float64\n 22  services_growth                43 non-null     float64\n 23  short_term_debt_tot_reserves   43 non-null     float64\n 24  trade_gdp                      43 non-null     float64\n 25  cpi                            43 non-null     float64\n 26  inflation                      43 non-null     float64\n 27  real_interest_rate             43 non-null     float64\n 28  lending_interest_rate          43 non-null     float64\n 29  life_exp_birth                 43 non-null     float64\n 30  expense_gdp                    43 non-null     float64\n 31  interest_payments              43 non-null     float64\n 32  military expenditure           43 non-null     float64\ndtypes: float64(33)\nmemory usage: 11.2 KB\n\n\n\ndf['year'] = df.index\n\n\ndf[\"gdp_growth\"].min()\n\n-5.8310532203120715\n\n\n\ndf[\"gdp_growth\"].max()\n\n9.627782916078445\n\n\n\nbins = [0, 2, 5, 7, float('inf')]\n\n\nlabels = ['Low Growth', 'Moderate Growth', 'High Growth', 'Very High Growth']\n\n\ndf['labels'] = pd.cut(df['gdp_growth'], bins=bins, labels=labels)\n\n\ndf\n\n\n\n\n\n\n\n\nadj_NNI_g\nadj_NNI_c\nadj_savings_fix_cap_GNI\nadj_savings_edu_GNI\nadj_NNS_GNI\ncurr_acc_bal\nex_imp_gdp\nex_imp_growth\nex_debt_shocks\nfinal_consump_exp_gdp\n...\ncpi\ninflation\nreal_interest_rate\nlending_interest_rate\nlife_exp_birth\nexpense_gdp\ninterest_payments\nmilitary expenditure\nyear\nlabels\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1979\n11.978544\n2.476830e+11\n8.055168\n2.600000\n6.418183\n-0.958069\n6.139551\n5.237330\n11.096107\n87.498021\n...\n9.737409\n11.346073\n4.476508\n16.500000\n53.611000\n11.702478\n13.780033\n3.133781\n1979\nHigh Growth\n\n\n1980\n-2.572689\n2.413109e+11\n8.393346\n2.600000\n7.373027\n-1.394549\n5.936027\n-0.816934\n11.615484\n85.768606\n...\n11.014232\n13.112547\n5.118237\n16.500000\n54.175000\n11.376034\n14.073244\n3.186248\n1980\nHigh Growth\n\n\n1981\n1.626264\n2.452352e+11\n8.819348\n3.051058\n7.043158\n-1.257273\n5.983300\n6.020508\n13.467614\n85.319441\n...\n11.883336\n7.890743\n7.774707\n16.500000\n54.732000\n11.959873\n15.563031\n3.345118\n1981\nModerate Growth\n\n\n1982\n11.562099\n2.735896e+11\n8.419293\n3.153437\n7.024774\n-0.887438\n5.837629\n-0.914918\n14.101651\n85.635851\n...\n13.293660\n11.868081\n7.320987\n16.500000\n55.281000\n12.077793\n17.460567\n3.323069\n1982\nVery High Growth\n\n\n1983\n1.851968\n2.786564e+11\n8.784357\n2.700000\n7.097912\n-1.089317\n6.283401\n7.297852\n15.530868\n84.960526\n...\n14.399548\n8.318907\n7.947100\n16.500000\n55.816000\n13.142960\n19.011381\n3.416876\n1983\nModerate Growth\n\n\n1984\n2.568824\n2.858146e+11\n9.353953\n2.900000\n7.554300\n-1.780807\n5.254555\n-6.314911\n16.829824\n83.909108\n...\n15.199648\n5.556424\n8.681674\n16.500000\n56.334000\n14.378945\n19.624125\n3.569030\n1984\nHigh Growth\n\n\n1985\n4.529744\n2.987612e+11\n9.396312\n3.000000\n6.454966\n-1.834521\n5.196222\n5.432381\n18.139780\n84.709376\n...\n16.526534\n8.729721\n9.093224\n16.500000\n56.835000\n15.338638\n20.586555\n4.106469\n1985\nModerate Growth\n\n\n1986\n6.629877\n3.185687e+11\n9.730683\n2.900000\n7.376519\n-1.853242\n5.604581\n12.727279\n19.285986\n83.378616\n...\n17.981055\n8.801126\n6.560180\n16.500000\n57.315000\n15.767219\n22.398962\n4.231318\n1986\nModerate Growth\n\n\n1987\n8.303368\n3.450207e+11\n9.652199\n2.700000\n8.727017\n-2.408456\n6.035220\n7.473063\n20.201660\n81.723887\n...\n19.668303\n9.383472\n7.638633\n16.500000\n57.777000\n15.519503\n23.934797\n3.728672\n1987\nVery High Growth\n\n\n1988\n6.679085\n3.680649e+11\n9.735381\n3.300000\n10.618226\n-2.301284\n7.016130\n11.979133\n25.194922\n79.735153\n...\n21.059694\n7.074280\n7.435843\n16.500000\n58.233000\n15.971534\n24.459015\n3.534180\n1988\nHigh Growth\n\n\n1989\n7.798858\n3.967697e+11\n9.724013\n3.500000\n11.755826\n-2.191936\n7.053350\n11.104418\n26.350386\n78.360625\n...\n22.949008\n8.971233\n5.269527\n16.500000\n58.652000\n15.484217\n27.639145\n3.146215\n1989\nHigh Growth\n\n\n1990\n-0.908724\n3.931642e+11\n10.447907\n3.400000\n11.647894\n-1.588911\n8.494241\n9.662286\n31.899926\n78.096800\n...\n26.132091\n13.870246\n3.624717\n17.875000\n59.055000\n15.338980\n28.923608\n2.909974\n1990\nLow Growth\n\n\n1991\n4.070959\n4.091698e+11\n10.394383\n3.300000\n13.196898\n-1.556245\n8.842927\n4.893244\n30.928699\n76.659385\n...\n29.212495\n11.787817\n9.132749\n18.916667\n59.452000\n15.116476\n29.499858\n2.704840\n1991\nHigh Growth\n\n\n1992\n9.660763\n4.486987e+11\n10.101674\n3.200000\n14.357626\n-0.671619\n9.834217\n13.779594\n33.157433\n76.454222\n...\n31.060737\n6.326890\n5.814777\n16.250000\n59.815000\n15.145108\n33.974271\n2.823542\n1992\nModerate Growth\n\n\n1993\n5.721647\n4.743716e+11\n9.990217\n3.100000\n16.304300\n-0.512193\n9.888085\n13.043665\n30.298974\n75.276653\n...\n34.243821\n10.247936\n4.337110\n14.750000\n60.216000\n14.603287\n33.637618\n2.664674\n1993\nHigh Growth\n\n\n1994\n4.755024\n4.969281e+11\n9.890789\n3.100000\n17.400965\n-1.544132\n10.843968\n31.396073\n26.332172\n74.240728\n...\n37.745213\n10.224886\n5.864178\n15.458333\n60.596000\n14.245726\n31.889354\n2.578484\n1994\nVery High Growth\n\n\n1995\n12.397011\n5.585323e+11\n9.825787\n2.900000\n17.423571\n-1.515955\n10.385169\n6.289730\n24.142642\n74.886108\n...\n41.133658\n8.977152\n7.792994\n15.958333\n60.984000\n14.080711\n32.151189\n2.472768\n1995\nVery High Growth\n\n\n1996\n3.238247\n5.766190e+11\n10.050889\n2.900000\n17.861733\n-0.713014\n10.690717\n-2.328176\n22.812537\n74.940559\n...\n44.080577\n7.164252\n6.909579\n13.833333\n61.388000\n14.597482\n32.941772\n2.647732\n1996\nModerate Growth\n\n\n1997\n7.246747\n6.184051e+11\n9.723308\n3.770376\n16.353247\n-1.638325\n11.018469\n13.884322\n23.536455\n75.718624\n...\n49.912808\n13.230839\n5.121276\n13.541667\n61.792000\n14.407630\n37.405309\n2.727311\n1997\nHigh Growth\n\n\n1998\n2.528489\n6.340414e+11\n9.895852\n4.290000\n16.038214\n-0.703548\n11.452065\n17.999469\n21.917063\n76.184976\n...\n52.243646\n4.669820\n9.191247\n12.541667\n62.207000\n14.804038\n37.157986\n2.957196\n1998\nVery High Growth\n\n\n1999\n5.507436\n6.689609e+11\n10.265067\n4.201292\n16.084825\n-0.982344\n12.997236\n18.153511\n21.822908\n75.686817\n...\n54.338322\n4.009436\n8.342611\n12.291667\n62.669000\n15.410403\n38.912415\n2.948930\n1999\nModerate Growth\n\n\n2000\n1.046402\n6.759609e+11\n10.463260\n3.960082\n15.940066\n0.290495\n12.558380\n4.309525\n20.676061\n75.908307\n...\n56.391926\n3.779293\n8.591449\n12.083333\n63.091000\n15.545626\n40.936291\n2.924436\n2000\nModerate Growth\n\n\n2001\n4.951294\n7.094297e+11\n10.453783\n3.718872\n17.921951\n1.370941\n14.264384\n21.085003\n20.673248\n74.343742\n...\n58.815173\n4.297152\n7.907177\n11.916667\n63.616000\n16.052948\n39.469513\n2.826867\n2001\nModerate Growth\n\n\n2002\n9.641872\n7.778320e+11\n10.347631\n3.477663\n20.332303\n1.443561\n14.947914\n9.582220\n19.709221\n72.379968\n...\n61.053595\n3.805859\n7.307881\n11.458333\n64.094000\n15.577594\n36.058542\n2.677777\n2002\nVery High Growth\n\n\n2003\n10.327090\n8.581594e+11\n10.630061\n3.221062\n22.892667\n0.110019\n17.859125\n27.176412\n17.558928\n68.756250\n...\n63.353638\n3.767252\n4.910128\n10.916667\n64.524000\n15.133483\n31.906730\n2.828752\n2003\nVery High Growth\n\n\n2004\n8.412071\n9.303484e+11\n10.614744\n3.130000\n24.028990\n-1.253507\n19.605247\n26.085074\n14.880053\n67.744870\n...\n66.043851\n4.246344\n4.855145\n10.750000\n64.996000\n15.173984\n28.570953\n2.910588\n2004\nVery High Growth\n\n\n2005\n7.694546\n1.001934e+12\n10.461379\n3.080000\n26.194569\n-0.988988\n21.267941\n20.393805\n17.099679\n65.912416\n...\n69.872099\n5.796523\n2.570607\n11.187500\n65.412000\n15.189480\n25.638980\n2.680382\n2005\nVery High Growth\n\n\n2006\n8.242590\n1.084520e+12\n10.519194\n3.080000\n26.670888\n-0.663718\n20.799700\n5.866539\n16.841424\n65.622627\n...\n74.324964\n6.372881\n5.681844\n13.020833\n65.788000\n15.257860\n23.370264\n2.478247\n2006\nVery High Growth\n\n\n2007\n1.706407\n1.103026e+12\n10.916884\n3.080000\n25.637738\n-2.583377\n24.097357\n14.778135\n19.057199\n67.215297\n...\n80.530554\n8.349267\n3.771756\n13.312500\n66.149000\n17.227670\n26.538502\n2.631461\n2007\nModerate Growth\n\n\n2008\n10.919593\n1.223472e+12\n10.989665\n3.080000\n24.950184\n-1.951462\n20.400519\n-4.834225\n19.215581\n67.419556\n...\n89.294173\n10.882353\n4.808592\n12.187500\n66.513000\n16.851893\n28.462907\n3.129385\n2008\nVery High Growth\n\n\n2009\n10.026321\n1.346141e+12\n10.665562\n3.080000\n25.960944\n-3.253484\n22.400933\n19.478135\n17.520329\n65.732466\n...\n100.000000\n11.989390\n-1.983859\n8.333350\n66.909000\n16.505136\n22.825788\n2.889463\n2009\nVery High Growth\n\n\n2010\n4.604685\n1.408127e+12\n10.556404\n3.080000\n24.802712\n-3.429285\n24.540411\n15.492981\n18.505580\n67.291680\n...\n108.911793\n8.911793\n1.317980\n10.166667\n67.359000\n14.489839\n22.868389\n2.704482\n2010\nHigh Growth\n\n\n2011\n6.111051\n1.494178e+12\n10.786722\n3.080000\n24.793388\n-5.004890\n24.534431\n6.805489\n21.735185\n67.144810\n...\n119.235539\n9.478997\n2.473522\n10.604167\n67.887000\n16.166712\n24.908665\n2.618166\n2011\nHigh Growth\n\n\n2012\n5.743356\n1.579994e+12\n10.821082\n3.080000\n23.987661\n-2.645667\n25.430861\n7.792389\n23.300868\n67.940926\n...\n131.180410\n10.017878\n3.865993\n10.291667\n68.460000\n16.638683\n25.689158\n2.548825\n2012\nHigh Growth\n\n\n2013\n7.013968\n1.690815e+12\n10.872474\n3.080000\n22.889903\n-1.339509\n22.967963\n1.777591\n22.704909\n68.568574\n...\n139.924446\n6.665657\n6.695176\n10.250000\n69.074000\n14.803138\n27.185085\n2.543982\n2013\nVery High Growth\n\n\n2014\n8.865576\n1.840715e+12\n10.627723\n3.080000\n22.208815\n-1.067549\n19.813189\n-5.647087\n23.029514\n69.435572\n...\n146.790502\n4.906973\n7.556488\n10.008333\n69.636000\n15.125690\n25.209618\n2.457450\n2014\nVery High Growth\n\n\n2015\n7.532403\n1.979365e+12\n10.538781\n3.080000\n20.883442\n-0.527881\n19.158235\n4.984258\n20.263088\n69.603829\n...\n154.054013\n4.948216\n6.232711\n9.672500\n70.117000\n15.271950\n24.210561\n2.543152\n2015\nVery High Growth\n\n\n2016\n8.398101\n2.145594e+12\n10.541804\n3.080000\n21.557433\n-1.439488\n18.791765\n4.564708\n19.501016\n69.492349\n...\n159.181198\n3.328173\n5.327609\n9.508333\n70.467000\n15.614110\n24.291937\n2.531511\n2016\nHigh Growth\n\n\n2017\n5.840102\n2.270899e+12\n10.715975\n3.080000\n20.969418\n-2.426975\n19.927829\n11.931871\n19.485095\n70.111541\n...\n165.451069\n3.938826\n5.361666\n9.454167\n70.710000\n15.663132\n23.011306\n2.424285\n2017\nHigh Growth\n\n\n2018\n4.233916\n2.367047e+12\n10.846640\n3.080000\n19.364627\n-1.049612\n18.664265\n-3.384978\n20.000281\n71.913963\n...\n171.621576\n3.729506\n6.894875\n9.466250\n70.910000\n14.942512\n27.081472\n2.548622\n2018\nModerate Growth\n\n\n2019\n-6.952693\n2.202473e+12\n11.088283\n3.080000\n19.896565\n1.225112\n18.705247\n-9.135286\n21.470538\n72.884270\n...\n182.988823\n6.623437\n4.203910\n9.150000\n70.150000\n14.942512\n27.081472\n2.812528\n2019\nNaN\n\n\n2020\n5.842249\n9.089853e+11\n10.100195\n3.177411\n16.975547\n-1.060924\n21.514389\n29.293893\n19.618194\n72.300662\n...\n192.378725\n5.131407\n0.147236\n8.698333\n67.240000\n14.942512\n27.081472\n2.471447\n2020\nVery High Growth\n\n\n2021\n5.842249\n9.089853e+11\n10.100195\n3.177411\n16.975547\n-2.335269\n22.449438\n11.502775\n20.750216\n71.036559\n...\n205.266241\n6.699034\n0.229815\n8.567143\n62.858024\n14.942512\n27.081472\n2.425227\n2021\nVery High Growth\n\n\n\n\n43 rows × 35 columns\n\n\n\n\ncsv_file='../data/india.csv'\n\n\ndf.to_csv(csv_file, index=True)"
  },
  {
    "objectID": "codes/decisiontree_r.html",
    "href": "codes/decisiontree_r.html",
    "title": "Decision Trees- Regression",
    "section": "",
    "text": "In this part, an attempt is made to perform a supervised learning algorithmn where the model is going to be trained on a labeled dataset where both the ‘X’ and the ‘Y’ variables are defined. Hence, using this mapping from predictors to the target variable, we use Decision Tree and Random Forest as a regressor here. The exploration of sk-learn libraries is used for the modelling and hyperparameter tuning with GridSearch CV and RandomisedSearchCV. Although economic data has the time component and seasonal affects associated with it, here an attempt is made to understand if the fiscal and monetary data points can indeed predict GDP or not, especially with the data of the developing nations with high variance in economic performance."
  },
  {
    "objectID": "codes/decisiontree_r.html#baseline-decision-tree-regressor",
    "href": "codes/decisiontree_r.html#baseline-decision-tree-regressor",
    "title": "Decision Trees- Regression",
    "section": "Baseline Decision Tree Regressor",
    "text": "Baseline Decision Tree Regressor\nTo understand the basal performance of just the decision tree, a base model of decision tree without tuning any hyperparameters is introduced.\n\n\nCode\nX_train, X_temp, y_train, y_temp = train_test_split(X, Y, test_size=0.4, random_state=42)\nX_test, X_val, y_test, y_val = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\n\n\n\nCode\ndt_regressor = DecisionTreeRegressor()\ndt_regressor.fit(X_train, y_train)\n\n\nDecisionTreeRegressor()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeRegressorDecisionTreeRegressor()\n\n\n\n\nCode\n# predicting on train test\ny_train_pred = dt_regressor.predict(X_train)\n\n# prediction on test set \ny_test_pred = dt_regressor.predict(X_test)\n\n# predicting on validation set\ny_val_pred = dt_regressor.predict(X_val)\n\n\n\n\n\nCode\nrmse_train1, r2_train1, mse_train1, explained_var_train1 = calculate_metrics(y_train, y_train_pred)\nrmse_test1, r2_test1, mse_test1, explained_var_test1 = calculate_metrics(y_test, y_test_pred)\nrmse_val1, r2_val1, mse_val1, explained_var_val1 = calculate_metrics(y_val, y_val_pred)\n\n\n\n\nCode\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(20, 10))\nplot_tree(dt_regressor, filled=True, feature_names=X.columns)\nplt.title('Decison Tree (Baseline Model)')\nplt.show()\n\n\n\n\n\nThis is a visual representation of the data. It makes sense also to understand why the basal tree is this huge as there is so much noise in the data since all the numerical variables are continous in nature and since most of the variables are usually correlated to each other. However, using the GridsearchCV and RandomisedSearchCV which are two hyperparameter tuning methods, we try to see if the tree can get pruned.\nHyperparameters are crucial settings that affect the performance of a model but are not learned from data. As a result, hyperparameter adjustment is essential for improved model performance. GridSearchCV, or Grid Search Cross-Validation, streamlines the procedure of determining the best hyperparameters by searching exhaustively through a predetermined grid of possible values. Cross-validation is used to evaluate the model’s performance across different sets of data, preventing overfitting. The technique computes a scoring metric for each hyperparameter combination and chooses the set that produces the best results. This method reduces the need for human experimentation, resulting in a more complete exploration of the hyperparameter space and improved model generalisation to new data."
  },
  {
    "objectID": "codes/decisiontree_r.html#decision-tree-regressor-gridsearchcv",
    "href": "codes/decisiontree_r.html#decision-tree-regressor-gridsearchcv",
    "title": "Decision Trees- Regression",
    "section": "Decision Tree Regressor : GridSearchCV",
    "text": "Decision Tree Regressor : GridSearchCV\n\n\nCode\n\nparameters = {'criterion':['squared_error','absolute_error'],\n              'max_depth':np.arange(1,21).tolist()[0::2],\n              'min_samples_split':np.arange(2,15).tolist()[0::2],\n              'max_leaf_nodes':np.arange(3,26).tolist()[0::2]}\n\ng2 = GridSearchCV(DecisionTreeRegressor(), parameters, cv=5)\ng2.fit(X_train,y_train)\n\nrgr_params1 = g2.best_params_\nrgr_params1\n\n\n{'criterion': 'squared_error',\n 'max_depth': 15,\n 'max_leaf_nodes': 17,\n 'min_samples_split': 4}\n\n\n\n\nCode\n# updated model\nbest_dt_regressor2 = DecisionTreeRegressor(**rgr_params1)\n\n# fitting the model\nbest_dt_regressor2.fit(X_train, y_train)\n\n# making the predictions on train, test and validation\ny_train_pred2= best_dt_regressor2.predict(X_train)\ny_test_pred2 = best_dt_regressor2.predict(X_test)\ny_val_pred2 = best_dt_regressor2.predict(X_val)\n\n# calculating the metrics\nrmse_train2, r2_train2, mse_train2, explained_var_train2 = calculate_metrics(y_train, y_train_pred2)\nrmse_test2, r2_test2, mse_test2, explained_var_test2 = calculate_metrics(y_test, y_test_pred2)\nrmse_val2, r2_val2, mse_val2, explained_var_val2 = calculate_metrics(y_val, y_val_pred2)\n\n\n\n\nCode\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(20, 10))\nplot_tree(best_dt_regressor2, filled=True, feature_names=X.columns)\nplt.title('Decison Tree (Grid Search CV)')\nplt.show()\n\n\n\n\n\nLooking into the performance after Gridsearch CV, the model as usual performs really well on train but not that way on test or validation suggesting to explore more aspects of hyperparameter tuning. As decision tree is very sensitive to features, Standard Scaler was used in the initial data cleaning and preprocessing technique."
  },
  {
    "objectID": "codes/decisiontree_r.html#results",
    "href": "codes/decisiontree_r.html#results",
    "title": "Decision Trees- Regression",
    "section": "Results",
    "text": "Results\n\nThe Tabular Representation of the Metrics\n\n\nCode\n\nheaders = [\"Metric\", \"Baseline\", \"GridSearchCV\", \"RandomisedSearchCV\"]\n\n# training set\nmetrics_training = [\n    [\"Training\", \"RMSE\", rmse_train1, rmse_train2, rmse_train3],\n    [\"Training\", \"R2 Score\", r2_train1, r2_train2, r2_train3],\n    [\"Training\", \"MSE\", mse_train1, mse_train2, mse_train3],\n    [\"Training\", \"Explained Variance\", explained_var_train1, explained_var_train2, explained_var_train3],\n]\n\n# testing set\nmetrics_test = [\n    [\"Test\", \"RMSE\", rmse_test1, rmse_test2, rmse_test3],\n    [\"Test\", \"R2 Score\", r2_test1, r2_test2, r2_test3],\n    [\"Test\", \"MSE\", mse_test1, mse_test2, mse_test3],\n    [\"Test\", \"Explained Variance\", explained_var_test1, explained_var_test2, explained_var_test3],\n]\n\n# validation set\nmetrics_validation = [\n    [\"Validation\", \"RMSE\", rmse_val1, rmse_val2, rmse_val3],\n    [\"Validation\", \"R2 Score\", r2_val1, r2_val2, r2_val3],\n    [\"Validation\", \"MSE\", mse_val1, mse_val2, mse_val3],\n    [\"Validation\", \"Explained Variance\", explained_var_val1, explained_var_val2, explained_var_val3],\n]\n\n# all metrics\ncombined= metrics_training + metrics_test + metrics_validation\ntable_combined = [headers] + metrics_training + metrics_test + metrics_validation\ntable1 = tabulate(table_combined, headers=\"firstrow\", tablefmt=\"fancy_grid\")\n\nprint(table1)\n\n\n\n╒════════════╤════════════════════╤══════════════╤════════════════╤══════════════════════╕\n│            │ Metric             │     Baseline │   GridSearchCV │   RandomisedSearchCV │\n╞════════════╪════════════════════╪══════════════╪════════════════╪══════════════════════╡\n│ Training   │ RMSE               │   5.8062e-17 │      0.0940319 │            0.111146  │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Training   │ R2 Score           │ 100          │     98.9811    │           98.5765    │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Training   │ MSE                │   3.3712e-33 │      0.008842  │            0.0123535 │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Training   │ Explained Variance │ 100          │     98.983     │           98.5765    │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Test       │ RMSE               │   0.755316   │      0.733824  │            0.636561  │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Test       │ R2 Score           │  45.9598     │     48.9914    │           61.617     │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Test       │ MSE                │   0.570503   │      0.538498  │            0.40521   │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Test       │ Explained Variance │  47.3454     │     50.3098    │           62.0277    │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Validation │ RMSE               │   0.755316   │      0.736845  │            0.633901  │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Validation │ R2 Score           │  59.2769     │     61.2444    │           71.3169    │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Validation │ MSE                │   0.570503   │      0.54294   │            0.401831  │\n├────────────┼────────────────────┼──────────────┼────────────────┼──────────────────────┤\n│ Validation │ Explained Variance │  60.3211     │     62.2439    │           72.0303    │\n╘════════════╧════════════════════╧══════════════╧════════════════╧══════════════════════╛\n\n\n\n\nDiscussion\nWhen you look at the performance of the training, testing and validation set in terms of the baseline decision tree, the GridSearchCV tree and the RandomisedSearchCV set, we see that the baseline decision tree has overfit a lot despite the testing and the validation of the baseline decision tree performing well. If you look at the GridSearchCV, the performance overall is lesser than baseline but the RMSE between trainng and testing for GridSearchCV is lesser, showcasing that the hyperparameter tuning has looked into overfitting. The best performing for me personally is the RandomisedSearchCV as it looks the overfitting by a lot more as the difference between the training, testing and validation RMSE’s is lesser in comparision. The R2 score is higher out of all under training, testing and validation for RandomisedSearchCV. Hence, the RandomisedSearchCV performs the best."
  },
  {
    "objectID": "codes/decisiontree_r.html#random-forest-gridsearchcv-method",
    "href": "codes/decisiontree_r.html#random-forest-gridsearchcv-method",
    "title": "Decision Trees- Regression",
    "section": "Random Forest : GridSearchCV Method",
    "text": "Random Forest : GridSearchCV Method\n\n\nCode\nparameters = {\n    'n_estimators': [100, 150, 200, 250, 300],\n    'max_depth': [1, 2, 3, 4, 5, 6, 7, 8],\n    'min_samples_split': [2, 3, 4, 5, 6],\n}\n\nregr = RandomForestRegressor(random_state=80)\n\nclf = GridSearchCV(regr, parameters, error_score='raise')\nclf.fit(X_train, y_train)\n\nprint(\"Best Parameters:\", clf.best_params_)\nprint(\"Best Score:\", clf.best_score_)\n\n\nBest Parameters: {'max_depth': 8, 'min_samples_split': 2, 'n_estimators': 250}\nBest Score: 0.8735751920102682\n\n\n\n\nCode\nbest_rf_model = RandomForestRegressor(\n    max_depth=8,\n    min_samples_split=2,\n    n_estimators=250,\n    random_state=80\n)\n\nbest_rf_model.fit(X_train, y_train)\n\n\nRandomForestRegressor(max_depth=8, n_estimators=250, random_state=80)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(max_depth=8, n_estimators=250, random_state=80)\n\n\n\n\nCode\n# predictions on the training set\ny_train_pred_rf2 = best_rf_model.predict(X_train)\n\n# predictions on the test set\ny_test_pred_rf2 = best_rf_model.predict(X_test)\n\n# predictions on the validation set  \ny_val_pred_rf2 = best_rf_model.predict(X_val)\n\n\n\n\nCode\n# calculating metrics \nrmse_train5, r2_train5, mse_train5, explained_var_train5 = calculate_metrics(y_train, y_train_pred_rf2)\nrmse_test5, r2_test5, mse_test5, explained_var_test5 = calculate_metrics(y_test, y_test_pred_rf2)\nrmse_val5, r2_val5, mse_val5, explained_var_val5 = calculate_metrics(y_val, y_val_pred_rf2)\n\n\n\n\nCode\nfor i in range(3):\n    tree = best_rf_model.estimators_[i]\n\n    # Plot the tree\n    plt.figure(figsize=(15, 10))\n    plot_tree(tree, filled=True, feature_names=X_train.columns, class_names=['0', '1'], rounded=True, proportion=True)\n    plt.title(f'Decision Tree {i + 1}')\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\nHere we see that the trees have been more pruned.\n\nResults\n\n\nThe Tabular Representation of the Metrics\n\n\nCode\n\nheaders = [\"Metric\", \"Baseline\", \"Grid Search\"]\n\n# training set\nmetrics_training2 = [\n    [\"Training\", \"RMSE\", rmse_train4, rmse_train5],\n    [\"Training\", \"R2 Score\", r2_train4, r2_train5],\n    [\"Training\", \"MSE\", mse_train4, mse_train5],\n    [\"Training\", \"Explained Variance\", explained_var_train4, explained_var_train5],\n]\n\n# testing set\nmetrics_test2 = [\n    [\"Test\", \"RMSE\", rmse_test4, rmse_test5],\n    [\"Test\", \"R2 Score\", r2_test4, r2_test5],\n    [\"Test\", \"MSE\", mse_test4, mse_test5],\n    [\"Test\", \"Explained Variance\", explained_var_test4, explained_var_test5],\n]\n\n# validation set \nmetrics_validation2 = [\n    [\"Validation\", \"RMSE\", rmse_val4, rmse_val5],\n    [\"Validation\", \"R2 Score\", r2_val4, r2_val5],\n    [\"Validation\", \"MSE\", mse_val4, mse_val5],\n    [\"Validation\", \"Explained Variance\", explained_var_val4, explained_var_val5],\n]\n\n# all\ntable_combined = [headers] + metrics_training2 + metrics_test2 + metrics_validation2\ntable2 = tabulate(table_combined, headers=\"firstrow\", tablefmt=\"fancy_grid\")\nprint(table2)\n\n\n\n\n\n╒════════════╤════════════════════╤════════════╤═══════════════╕\n│            │ Metric             │   Baseline │   Grid Search │\n╞════════════╪════════════════════╪════════════╪═══════════════╡\n│ Training   │ RMSE               │  0.10223   │      0.102044 │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Training   │ R2 Score           │ 98.7957    │     98.8001   │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Training   │ MSE                │  0.0104509 │      0.010413 │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Training   │ Explained Variance │ 98.8034    │     98.81     │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Test       │ RMSE               │  0.683789  │      0.670609 │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Test       │ R2 Score           │ 55.7101    │     57.4011   │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Test       │ MSE                │  0.467568  │      0.449716 │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Test       │ Explained Variance │ 56.1406    │     57.8541   │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Validation │ RMSE               │  0.686953  │      0.677716 │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Validation │ R2 Score           │ 66.3149    │     67.2148   │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Validation │ MSE                │  0.471905  │      0.459299 │\n├────────────┼────────────────────┼────────────┼───────────────┤\n│ Validation │ Explained Variance │ 67.3569    │     68.2541   │\n╘════════════╧════════════════════╧════════════╧═══════════════╛\n\n\n\n\nDiscussion\nIn accordance to the performance, that there is still overfitting of the data in terms of the RMSE from the training and testing data for both baseline Random Forest and the one that is tuned by GridSearchCV, however, we see that out of all the models, the GridSearchCV with Random Forest works the best."
  },
  {
    "objectID": "codes/decisiontree_r.html#conclusion",
    "href": "codes/decisiontree_r.html#conclusion",
    "title": "Decision Trees- Regression",
    "section": "Conclusion",
    "text": "Conclusion\nIn conclusion, I can say that hyperparameter tuning actually helps with the model and random forest performs the best in comparison the decision tree model. When we look in terms of Decision Tree, hyperparameter tuning with RandomisedSearchCV performs the best in reducing the overfitting and in terms of Random Forest, hyperparameter tuning with GridSearchCV performs the best and overall as well.\nHowever, there is still a lot of overfitting. If time permits, I would look into the nature of the data and explore it in terms of the time series perspective to reduce autocorrelation and look into more overfitting techniques like L1 and L2 regularization techniques."
  }
]